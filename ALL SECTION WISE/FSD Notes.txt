     #Front-end Development:-
     to get IntelliSense in visual studio code use CRTL + SpaceBar

     Section 2: Introduction to HTML
          HTML:
               Hyper Text Markup Language
          
          -Heading:
               h1 to h6
               <h1>Hello world..!</h1>
               here,
                    Anything inside the Angular bracket are tags, <h1> is a Opening tag.
                    </h1> is a Closing tag.
               
               Element:-
                    Content & tag Combinedly called element, 
                         <h1>Hello world..!</h1>
          
          -There's a couple of things to note in terms of do's and don'ts when it comes to heading elements that
               I want to talk to you about.
               One important rule is notice how in our exercise there was only one H1.
               It's not good practice to have more than one H1 because the H1 is the very top level heading.
               Imagine the H1 as the book title and the table of contents as including the other parts
               So maybe the H2 would be the first chapter.
               Don't have more than one H1.
               Instead, if you need another subtitle or another level of heading, then go to the H2 or H3 or all
               of the other ones up until H6.
               Now the other thing to watch out for is don't skip a level.
               When you're creating heading elements, don't go straight from H1 to H3.
               If you have an H3, there should also be an H2 somewhere on that web page.
               Instead, I recommend to just go in order when you have an H1 that you've created and then you realize
               you need another heading, then go to an H2.
               And then if you need another level of heading that's even lower in priority, go to an H3.
               Don't jump between the different level headings.

          -Paragraph <p> :
               <p>This is a paragraph.</p>
               -paragraph used to organize content properly, to tell
                that where statement ends & where new one starts.
          
          -Self Closing tags:-     
               void element
               eg.
                    <hr />    Horizontal Rule
                    <br />    break 

     Section 3: Intermediate HTML
          -Ordered List:
               <ol>
                    <li>Item 1</li>
                    <li>Item 2</li>
                    <li>Item 3</li>
               </ol>
          
          -Un-order List:
               <ul>
                    <li>Item 1</li>
                    <li>Item 2</li>
                    <li>Item 3</li>
               </ul>
          -Nesting List:
               <ul>
                    <li>Item 1
                         <ol>
                              <li> Item 1</li>
                              <li> Item 2</li>
                              <li> Item 3</li>
                         </ol>
                    </li>
                    <li>Item 2</li>
                    <li>Item 3</li>
               </ul>
          
          -List attributes:
               <ol type="i" reversed>        //it will reverse the sequence
               <ol type="i" start="2">       //It will start from 2
          
          -Anchor:-
               Link:
                    <a href="https://www.google.com">Google</a>

               Draggable Link:
                    <a href="https://www.youtube.com/" draggable="true">YouTube</a>

          -Image:-
               <img src="https://picsum.photos/400" alt="RandomImage" />
               where,
                    src - source/address of image.
                    alt -  alternative text for image.
               
               -to generate random images use this url (at the end mention the size)
                    https://picsum.photos/400
                    -here image is of (400px X 400px).
               
     Section 4: Multi-Page WebSite
          -Computer file path:
               i) Absolute file path        - The path from root/ from starting
              ii) Relative file path        - path related to some other file/ current file
             iii) ./     - indicates the current folder
              iV)  ../   - go back by one step. (upper folder)
               v) ../../ - go back by 2 step. (2 times out of the current folder)

          -Web Hosting:
               - Hosting your site to server/ uploading all files/ folder to internet.
               - Using GitHub
               - On GitHub make sure your home file named as index.html only. other name won't work.
          
          -HTML special concept:
                <nav>
                    <ul type="none">
                         <li><a href="./Mahesh.html#one">Mahesh</a></li>
                         <li><a href="./Vivek.html#second">Vivek</a></li>
                    </ul>
               </nav>
               -------------------------------------------
               for hyper link to next page use attribute target
                    <a href="./Vivek.html#second" target="_blank">Vivek</a>
                         -go to vivek.html page on that go to id named second.
                         
               • Definition list
               <dl>
                    <dt></dt>
                    <dd> </dd>
                    
                    <dt> </dt>
                    <dd> </dd>
               </dl>
               eg.
                    <dl>
                         <dt>Vivek :</dt>
                         <dd>Vivek Mahesh Nikate</dd>
                         <dt>Mahesh</dt>
                         <dd>Mahesh Arun Nikate</dd>
                    </dl>

     Section 5: Introduction to CSS
          -CSS - Cascading Style Sheets
          -Adding CSS into HTML
               -There are 3 ways to do it.
                    1] Inline           <tag style="" />                        - Least recommended (use to target only particular/ one element)
                    2] Internal         <style> CSS </style>
                    3] External         <link href="style.css" rel="stylesheet" />               - Most recommended

          -CSS Selector:-
               1) Element Selector:-
                    •element like h1,h2, p, article, section, div etc.
                    eg.
                         p{
                              color: red;
                         }

               2) Class Selector:-
                    • we can add class as an attribute to HTML element 
                    • Selection with class name. 
                    • Use dot(.) operator before class name.
                    • multiple elements can have one class.
                    • Class name start with (.) dot sing.   
                    eg.
                         <p class="para">This is paragraph</p>
                         <style>
                              .para{
                                   //styles
                                   color:red;
                              }
                         </style>                    
                         
               3) Id Selector:-
                    •Id Selector selected using # sign.
                    •ID is unique/ one time on complete page.
                    eg.
                         <p id="demo">This is paragraph</p>
                              <style>
                                   #demo{
                                        //styles
                                        color:red;
                                   }
                              </style>

               4) Attribute Selector:-
                    • Selection based on attributes we mentioned withing square brackets
                    • attributes values are case-sensitive.
                    • in Syntax html element before square bracket (p[draggable]) is not mandatory
                    • Syntax:
                         HTML element[attribute]{
                              //styles
                         } 
                         or
                         [attribute="value"]{
                              //styles
                         }
                    • eg.
                         <p id="demo" class="para" draggable='true'>This is paragraph</p>
                              p[draggable]{
                                   color:red;
                              }
                                   eg.
                                   Selects all paragraph elements with a draggable attribute & change their color to red.
                              --------------------------------------------------------------
                              p[draggable='true']{
                                   color:blue;
                              }
                                   eg.
                                   Selects all paragraph elements with a draggable attribute set to true & change their color to blue.
                              --------------------------------------------------------------
                              [class*="te"] {
                                   background: yellow;
                              }
                                   eg.
                                   select all the element who has class name containing substring "te" word.

                    Detail:-
                              Selector	           Example	                         Example description
                         [attribute]	          [target]	                    Selects all elements with a target attribute
                         [attribute=value]	     [target="_blank"]	          Selects all elements with target="_blank"
                         [attribute~=value]	     [title~="flower"]	          Selects all elements with a title attribute containing the word "flower"
                         [attribute|=value]	     [lang|="en"]	               Selects all elements with a lang attribute value starting with "en"
                         [attribute^=value]	     a[href^="https"]	          Selects every <a> element whose href attribute value begins with "https"
                         [attribute$=value]	     a[href$=".pdf"]	          Selects every <a> element whose href attribute value ends with ".pdf"
                         [attribute*=value]	     a[href*="w3schools"]	     Selects every <a> element whose href attribute value contains the substring "w3schools"
               
               5) Universal Selector:-
                    • * - Asterisk 
                    • Asterisk(*) means select all.
                    • Syntax:
                         *{
                              color: yellow;
                         }
     
     Section 6: CSS Properties
          -CSS Colors:
               •eg.
                    html{
                         background-color: red;        //setting html element's background color to red.
                    }
                    h1{
                         color: blue;                  //setting the h1 text color to blue
                    }

          -Font Properties:
           eg.
               color
               font-weight
               font-family
               font-size
               --------------------------------------------
               • font-size:-
                         values-
                              large
                              x-large
                              xx-large
                              1px = 1/96th inch = 0.26mm
                              1pt = 1/72nd inch = 0.35mm
                              1em = 100% of parent (relative to parent)
                              1rem= 100% of root  (relative to html(root) element)
                    
                    -em & rem are relative sizes.
                    -Most reacommended use rem.
                    -coz rem is changing its size according to the root (html) element.
                    -& em is changing size according to its parent element size.
                    eg.
                         font-size: 20px; //      2em; 2rem;
               ---------------------------------------------
               • font-weight:-
                    values-
                         normal/ bold
                         lighter/bolder           lighter will descrease by 100 (-100)
                                                  bolder will increase by 100 (+100)
                         number (100 - 900)       100- light , 900 - bold
                    
                    eg.  font-weight: bolder;          //700; lighter; normal;
               ---------------------------------------------
               • font-family:-
                    eg.
                         font-family: arial;      //Helvetica; san-serif; fantasy;
                         font-family: "Times New Roman", serif;
               ---------------------------------------------
               • text-align:-
                    eg.
                         text-align: center;      //right; left; start; left;
               ---------------------------------------------
          
          -Inspection CSS
               -pesticide extension
               -inspect mode
               -More tools ⇒ CSS overview
          
          -CSS Box Model
              •Border:
                    border:10px solid red;
                    -here 3 values separated by spaces
                    -first describe the size. or (2em, 2pc)
                    -second describe the style. or (dashed, grooved, inset, outset, dotted etc)
                    -third describe the color. or (red, green, blue, black, yellow etc)
                    -but border does not affect the size of content, it'll be same all time.
               
                    border-top:0px;
                    border-width: 0px 4px 8px 16px;         // top right bottom left (TRBL)
                    border-width: 10px 20px;                 // top-bottom left-right
               
                    If the border-style property has four values:
                              border-style: dotted solid double dashed;
                              top border is dotted
                              right border is solid
                              bottom border is double
                              left border is dashed

                         If the border-style property has three values:
                              border-style: dotted solid double;
                              top border is dotted
                              right and left borders are solid
                              bottom border is double
                         
                         If the border-style property has two values:
                              border-style: dotted solid;
                              top and bottom borders are dotted
                              right and left borders are solid
                         
                         If the border-style property has one value:
                              border-style: dotted;
                              all four borders are dotted
                    
                    All CSS Border Properties
                         Property	                              Description
                         ---------------------------------------------------------------------------------------------
                         border	                Sets all the border properties in one declaration
                         border-bottom	           Sets all the bottom border properties in one declaration
                         border-bottom-color	      Sets the color of the bottom border
                         border-bottom-style	      Sets the style of the bottom border
                         border-bottom-width	      Sets the width of the bottom border
                         border-color	           Sets the color of the four borders
                         border-left	           Sets all the left border properties in one declaration
                         border-left-color	      Sets the color of the left border
                         border-left-style	      Sets the style of the left border
                         border-left-width	      Sets the width of the left border
                         border-radius	           Sets all the four border-*-radius properties for rounded corners
                         border-right	           Sets all the right border properties in one declaration
                         border-right-color	      Sets the color of the right border
                         border-right-style	      Sets the style of the right border
                         border-right-width	      Sets the width of the right border
                         border-style	           Sets the style of the four borders
                         border-top	           Sets all the top border properties in one declaration
                         border-top-color	      Sets the color of the top border
                         border-top-style	      Sets the style of the top border
                         border-top-width	      Sets the width of the top border
                         border-width	           Sets the width of the four borders
              ----------------------------------------------------------------------------------------------------------------
               •Padding:
                    -distance between content & border.
                         padding-top: <length> | <percentage>
                         padding-right: <length> | <percentage>
                         padding-bottom: <length> | <percentage>
                         padding-left: <length> | <percentage>

                    -If the padding property has four values:
                         padding:10px 5px 15px 20px;
                         top padding is 10px
                         right padding is 5px
                         bottom padding is 15px
                         left padding is 20px
                         
                    -If the padding property has three values:
                         padding:10px 5px 15px;
                         top padding is 10px
                         right and left padding are 5px
                         bottom    padding is 15px
                    
                    -If the padding property has two values:
                         padding:10px 5px;
                         top and bottom padding are 10px
                         right and left padding are 5px

                    -If the padding property has one value:
                         padding:10px;
                         all four paddings are 10px
                    
                    -Note: Negative values are not allowed. 

               •Margin:
                    -distance between border & other content's on page.
                    
                    Margin - Individual Sides
                    CSS has properties for specifying the margin for each side of an element:
                         margin-top
                         margin-right
                         margin-bottom
                         margin-left

                    All the margin properties can have the following values:
                         auto - the browser calculates the margin
                         length - specifies a margin in px, pt, cm, etc.
                         % - specifies a margin in % of the width of the containing element
                         inherit - specifies that the margin should be inherited from the parent element

                    Tip: Negative values are allowed.

                    Example
                         Set different margins for all four sides of a <p> element:
                         p {
                         margin-top: 100px;
                         margin-bottom: 100px;
                         margin-right: 150px;
                         margin-left: 80px;
                         }
                    
                    
                    -If the margin property has four values:
                         margin: 25px 50px 75px 100px;
                              top margin is 25px
                              right margin is 50px
                              bottom margin is 75px
                              left margin is 100px

                    -If the margin property has three values:
                         margin: 25px 50px 75px;
                              top margin is 25px
                              right and left margins are 50px
                              bottom margin is 75px

                    -If the margin property has two values:
                         margin: 25px 50px;
                              top and bottom margins are 25px
                              right and left margins are 50px

                    -If the margin property has one value:
                              margin: 25px;
                                   all four margins are 25px

                    -The auto Value
                         You can set the margin property to auto to horizontally center the element within its container.
                           margin: auto;
                    
                    -div element:
                         division element to make separate section on page.
               
     Section 7: Intermediate CSS
          -Spcificity & Inheritance
               1) Position-
                    li{
                         color:green;
                         color:red;
                    }
                    li{
                         color:black;
                    }
                    -here black color will gets applied to the li item.
                    -its completely at the end.

               2) Spcificity-
                    -element
                    -class selector          
                    -attribute selector
                    -id selector

                    (element selector) < (class selector) < (attribute selector) < (id selector) < (inline styling)

                    -at the end if inline styling is present then it'll get applied else, styles which are
                     defined in ID will gets applied.

               3) Type-
                    -External
                    -Internal
                    -Inline
                    (Inline) > (Internal) > (External)
                    
                    -at the end the styles if mentioned inline it'll get applied
                         else it'll check for Internal styles <style> </style> within styles tag
                         or else it'll go for external styles.
                    eg.
                         -if the case is like this.
                          styles mentioned internally also & added the external file after internal styling
                          then it will override all your internal styling
                          
                         <style>
                              h1{
                                   color:red !important; 
                              }
                         </style>
                         <link rel="stylesheet" href="./style.css">

                         -here in above case h1 color will get changed according to the color mentioned inside style.css file
                          coz it is added after internal styling so it will override all internal styles.

               4) Importance-
                    eg.
                         color: red;
                         color: yellow !important;
                              -this style will override all your other styles
                              -even inline style & Position does not matter
                              -if you add at the top later words changed to bottom
                              -still the important one style gets applied.
                              -color will  be yellow only
                         
                         h1{
                              color:rgb(255, 255, 255) !important; 
                              color:red; 
                              color:rgb(71, 42, 42) ; 
                              color:blue;
                         }
                              -here according to Position the blue is at the last so
                               the blue color should be get applied but here white will be applied coz its important.

          -Combining CSS selector
               1) Group Selector:
                    - it will apply to all selector mentioned.
                    - comma(,) between the selectors.
                     Syntax:
                         selector1, selector2,..., selector N{
                              //styles
                         }
                     eg.
                         h1, h2, h3, div, p{
                              border: 4px solid pink;
                              border-radius: 2px;
                              color: blue;
                         }

               2) Child Selector:
                    -apply to the direct child of left side.
                    -greater than (>) symbol between selectors.
                    -one level down only
                    -only children no childrens of children.
                    -only child.
                    Syntax:
                         selector1 >  selector2 {
                              //styles
                         }
                    eg.
                         div > p {
                              color: firebrick;
                         }

                         .box > h1{                              //class name box having child all child h1 has bg color is yellow
                              background-color: yellow;
                         }

               3) Descendant Selector:
                    -Apply to all Descendant of left side
                    -space between the selectors
                     Syntax:
                         selector1 selector2{
                              //styles
                         }
                    eg.
                         div li{
                              color: blue;
                         }
               
               4) Chaining selectors:
                    -Chaining is used to be very specific element to style.
                    -super specific selector.
                    -no spaces between selector.
                    -start with html element only.
                    -if start class name or id name then all will
                    -consider as id/ class name.
                    eg.
                         Syntax:

                         <li class="done">Read</li>
                         <li class="done">Maths Questions</li>

                         li.done{
                              color: seagreen;
                         }

               5) Combining All selectors:
                    -You can Combine all type of selectors & you can be more specific.
                    eg.
                         Descendant + Chaining of Selectors

                         ul p.done{
                              color: red;
                              font-size: 5rem;
                         }
                         -here <ul>'s descend element p having the class done is going to get affect
                          with color red & font size of 5rem.

          -CSS Positioning
               1) Static:
                    -This is default positioning  

               2) Relative:
                    -It will Positioned relatively by the current/ original position of that element/object

               3) Absolute:
                    -Absolute positioned element is get out of the flow of html document.
                    -elements which are below this element will takes it's place
                    -Absolute will An element with position: absolute; 
                     is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport)
                    -if ancestor has that position: relative style is mentioned.

               4) Fixed:
                    -Position relative to top left corner of browser window even if you scroll
                     still it is there on same location of page.
               
               •Z-index:
                    -higher the value will display the element/ content on top  of other;
                    
                     Syntax:
                         z-index: <number>;
                         eg.
                          z-index: -1;
                          z-index: 1;
                          z-index: 99;

     Section 8: Advance CSS
          -CSS Display:
               -Four values for display property.
                    display: block;
                         -block: displays the element as a block element
                         -it takes complete width of page.
                         -You can set the height & width to block element

                    display: inline;
                         -inline will display the element next to each other on same line
                         -The width will be the same as that of content to fit.
                         -You can NOT set width & height for inline element
                          coz it will take the width to just fit the content in it.

                    display: inline-block;
                         -inline-block is the in-between option of block & inline.
                         -in this case you can set the height & width to an element
                         -& other thing is element are displayed next to each other on same line.

                    display: none;
                         -This styling will just disappear that element from page.
               
          -CSS Float:
               -So recommend to only use float when you want to wrap text around an image.
               -Two values for float property.
                float: left;
                    -all the content will start floatig to right side.

                float: right;
                    -all the content will start float to left side.
               eg.
                    <img>
                    <p>text</p>
                    <footer> company </footer>

                    <style>
                         img {
                              float: left;        
                         }
                    </style>

                    //here img is going to stick to left side 
                    // & paragraph will occupy the space of right side & viceversa
                    //but footer also going to occupy the remaining space
                    // so we need to use clear property to clear things out.

                    <style>
                         footer{
                              clear: left;
                         }
                    </style>

                    -clear property hsa 3 values
                         clear: left;
                         clear: right;
                         clear: both;

          -Responsive Website:
               -For responsive website there are different ways by
                -media queries
                -CSS Grid (for 2D layouts)
                -CSS Flexbox  (for 1D layouts)
                -By Framework (like Bootstrap)
               
               Property-
                    For grid
                         -display: grid;

                    For Flexbox
                         -display: flex;
                    
                    -Bootstrap is built on top of Flexbox.
                    -Bootstrap uses 12 division pattern for responsiveness.
     
          -Media Queries:
           eg. <body>
                    <div></div>
               </body>
               
               div{
                    width: 400px;
                    height: 400px;
                    background-color: aqua;
               }

               @media (max-width: 600px){
                    div{
                         width: 200px;
                         height: 200px;
                         background-color: rgb(58, 255, 74);
                    }
               }

               @media (width <= 30em) {
                    html { background: rgb(0 0 0 / 0.5); }
               }

               //and keyword: if both are true.
               @media (min-width: 600px) and (max-width: 800px) {
                    html { background: red; }
               }

               @media (600px <= width <= 800px) {
                    html { background: red; }
               }
               
               //Or keyword: if any one of them is true
               Comma separate.
               @media (max-width: 600px), (min-width: 800px) {
                    html { background: red; }
               }
          
     Section 9: FlexBox
          -Display: flex
               eg.  HTML code:
                     <body>
                         <div class='container'>
                              <div style="background-color:red;">
                                   Lorem Ipsum is simply dummy text of the printing and typesetting industry. 
                                   Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, 
                                   when an unknown printer took a galley of type and scrambled it to make a type specimen book. 
                                   It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. 
                                   It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, 
                                   and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
                              </div>
                              <div style="background-color:green;">
                                   Lorem Ipsum is simply dummy text of the printing and typesetting industry. 
                                   Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, 
                                   when an unknown printer took a galley of type and scrambled it to make a type specimen book. 
                                   It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. 
                                   It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, 
                                   and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
                              </div>
                              <div style="background-color:blue;">
                                   Lorem Ipsum is simply dummy text of the printing and typesetting industry. 
                                   Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, 
                                   when an unknown printer took a galley of type and scrambled it to make a type specimen book. 
                                   It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. 
                                   It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, 
                                   and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
                              </div>
                         </div>
                    </body>

                    CSS code:
                         .container{
                              display:flex;
                              gap:20px;
                         }

               -When we give style display flex then all your conetent within it,
                will be displayed on the same line & all content width will be 
                as much as the content in it to fit.
               -we can use the gap property to make space between element
                    eg.  
                         gap:20px; // 10%

               -display flex property you applied to a div / section that will element
                will considered as block level element. will occupy the full width of page 
                width:100%;

               -to rectify it. Use display:inline-flex property
                this will make that element to adjust its width according to its size.
                & next element also goes on the same line, if the space is available.
          
          -Flex Direction:
               -The defualt value is row
               -It has 2 values row & column
                    -flex-direction: row;              //main axis Horizontal & cross axis perpendicular to main axis
                    -flex-direction: row-reverse;
                    -flex-direction: column;           //main axis Vertical & cross axis perpendicular to main axis
                    -flex-direction: column-reverse;

               -If the direction is row then flex-basis:100px 
                here the 100px will be considered as width
               -If its column then flex-basis will considered as height.

               -Select all the elements that are the direct
               children of the .container class.       

                    .container > *{
                         //styles
                    }  

               -flex-flow is short hand for flex-direction & flex-wrap.
               -/* flex-flow: <'flex-direction'> */
                    flex-flow: row;
                    flex-flow: row-reverse;
                    flex-flow: column;
                    flex-flow: column-reverse;

               -/* flex-flow: <'flex-wrap'> */
                    flex-flow: nowrap;
                    flex-flow: wrap;
                    flex-flow: wrap-reverse;

               -/* flex-flow: <'flex-direction'> and <'flex-wrap'> */
                    flex-flow: row nowrap;
                    flex-flow: column wrap;
                    flex-flow: column-reverse wrap-reverse;
          
          -Flexible Layouts :
               -when you use property display flex then you can use
                order property.
               -Any element having higher order value that will be displayed at
                last.
               -Syntax:
                    order: <any_num>    //higher number item will be displayed at last.   
                eg.
                    .red {
                              background-color: #eb4d4b;
                              order: 12;
                         }
                    
               -flex-wrap: nowrap;          
                    -default  
                    -if you shrink the screen still the item stay at same line some time get out of frame also.
                    -this property is set on parent.

               -flex-wrap: wrap;
                    -This will shifts some items to the next line if you shrink the screen.
                    -This is property set on parent

               -flex-wrap: wrap-reverse
                    -in reverse order (from bottom of page).
               
               -justify-content:
                    -it has different values
                         eg.                         
                              justify-content: center;
                                   -align to center 

                              justify-content: left;
                                   -align to the left of page         //default

                              justify-content: right;
                                   -align to the right side 

                              justify-content: start;
                                   -align to left/start

                              justify-content: end;
                                   -align to end/right
                                   
                              justify-content: flex-start;
                                   -align to left/start

                              justify-content: flex-end;
                                   -align to end/right

                              justify-content: stretch;
               
               -Align-items:
                    -to use align-item property we have to give height to the container vh (viewport height).
                    -justify Content will place the content along main axis.
                    -Align item place the content along cross axis.
                    -main & cross axis are perpendicular to each other.
                    eg.
                         height:100vh;
                         align-items: flex-start; 
                              -at top of screen

                         align-items: flex-end;
                              -at bottom of screen

                         align-items: center;

                         align-items: stretch;
                              -This is will cover complete height gets stretched
               
               -align-self:
                    -This property is used for children of container.
                    -we used this property to make any element independant from others.
                    eg.
                         align-self: flex-start;
                         align-self: flex-end;
                         align-self: start;
                         align-self: end;

               -align-content:
                    -This property will work only when you set 
                      flex-wrap: wrap;
          
          -Flex Sizing:
               content width < width < flex-basis < min-width/max-width
               -flex-basis:-
                    This act as height when main axis is Vertical & as width when main axis is Horizontal
                    eg.
                         flex-basis: 10em;
                         flex-basis: 3px;
                         flex-basis: 50%;
                         flex-basis: auto;

                         /* Intrinsic sizing keywords */
                         flex-basis: max-content;
                         flex-basis: min-content;
                         flex-basis: fit-content;

                         /* Automatically size based on the flex item's content */
                         flex-basis: content;
               
               -flex-grow:
                    -allows to grow increase the size.
                    -/* <number> values */
                         flex-grow: 0;       //for equally distribution
                         flex-grow: 3;
                         flex-grow: 0.6;
               
               -flex-shrink:
                    -allows to shrink up to min size of content.

               -flex-
                    flex-basis:0;
                    flex-grow:1;
                    flex-shrink:1;

                    flex: 1 1 0;        //grow shrink basis; 

                         /* Shorthand syntax */
                    flex:1
                         -flex-grow:1
                         -flex-shrink:1
                         -flex-basis:0
                    flex:2
                         -flex-grow:2
                         -flex-shrink:2
                         -flex-basis:0
                    flex:3
                         -flex-grow:3
                         -flex-shrink:3
                         -flex-basis:0

     Section 10: CSS Grid:

          -display: grid;
               -Grid is used for making 2D design.
               -FlexBox are used to make 1D layout inline designing.
               eg.
                    display: grid;
                    grid-template-columns: <how many column you want>
                         -if you want 4 then
                              grid-template-columns: 1fr 1fr 1fr 1fr;
                              or
                              grid-template-columns: repeat(4, 1fr);
                              grid-template-rows: repeat(4, 1fr);

                         
                         if you want 10 then
                              grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
                              or
                              grid-template-columns: repeat(10, 1fr);
                              grid-template-rows: repeat(10, 1fr);

          -Grid Sizing:
               Shorthand for 
                -grid-template-columns: 1fr 1fr;
                -grid-template-row: 1fr 1fr;
                eg.
                    grid-template: 1fr 1fr / 1fr 1fr;            <rows> / <columns>
               
               -grid-template-columns: 200px auto;     //first column is of 200px , 2nd column will occupy 100% screen.
               -grid-template-row: 100px auto;     //first row is of 100px , 2nd row will occupy only the size of conetent in it.
               
               -grid-template-columns: 100px minmax(400px, 800px);
                    -here it will get min width of 400px only, after that it won't reduce the width.

               -grid-template-rows: 100px 400px

               -if you program create a new grid in future for that styling
                    grid-auto-rows:200px     //row of height 200px;
          
          -Grid Placement:
               grid-column-start: <number>  
                    -this will define the grid item to start in the grid container.

                    grid-column-start:1           //to mention start column
                    grid-column-end: -1           //to mention end column
          
                    eg.
                         Typing both grid-column-start and grid-column-end every time can get tiring. 
                         Fortunately, grid-column is a shorthand property that can accept both values at once,
                         separated by a slash.
                         For example, 
                              grid-column: 2 / 4;           //  <start> / <end>
                              will set the grid item to start on the 2nd vertical grid line and end on the 4th grid line.

                              grid-column: -3/-1;
                                   start at -3 means from last 3rd.
                                   end at -1 means complete last column
                              
                              grid-column: 2 / span 3
                                   start at 2nd column & from there go for next 3 blocks.
                              
               grid-column-end: <number>
                    -this will define the grid item to end in the grid container.

               grid-row-start: <number>
                    -this will define the grid item to start in the grid container.

               grid-row-end: <number>
                    -this will define the grid item to end in the grid container.

               -grid-column: <number> / span <number>
                    -this will define the grid item to start in the grid container.
                    eg.
                         grid-column: 1 / span 2;    //start at first column , end at 3rd column

                         grid-row: 3/6;          // <start>/<end>
                              start at 3rd grid line & end at 6th line.                    
                    
               -grid-row: <number> / span <number>
                    -this will define the grid item to end in the grid container.

               
               grid properties:
                    grid-column-start: 1;    //start at first column
                    grid-column-end: 3;      //end at 3rd column
                    grid-row-start: 2;
                    grid-row-end: -1;        //row end at last row.   (-1 indicates the last row).
               
               Shorthand:
                    grid-area:  <grid-row-start> / <grid-column-start> / <grid-row-end> / <grid-column-end>
                    eg.
                         grid-area: 2/ 1/ 3/ 3;

                    If typing out both grid-column and grid-row is too much for you, there's yet another shorthand for that. 
                    grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.
                    One example of this would be 
                         grid-area: 1 / 1 / 3 / 6;.

                    grid-template-columns:repeat(8,12.5%)
                         -8 columns of 12.5% width.
                    
                    grid-template-columns: 50px repeat(3,1fr) 50px
                         -creating 3 columns  first is 50px, in middle 3 columns of 1fr & last column is of 50px.
                    
                    grid-template is a shorthand property that combines grid-template-rows and grid-template-columns.
                    For example, 
                         grid-template: 50% 50% / 200px; 
                         will create a grid with two rows that are 50% each, and one column that is 200 pixels wide.

     Section 11: Bootstrap:
          -BootStrap
               -Its a type of CSS Framework
               -created in 2010 by twitter developer.
               -it contain pre-made CSS style file
               -It is famous coz of, it follows the 12 column layout system built on top of Flexbox.
               -Mobil First Approach.
               
               -Pros:-
                    -End up with good design in short period of time.
                    -makes the desinging process fast forwards.
               
               -Cons:-
                    -Disadvantage is we use HTML is for content & CSS is for styling.
                    but if we use the external styles then we have to add so many class name on HTML 
                    file only. It makes HTML file so complicated to understand.

                    -You will not get full customization.

               -So when should you use the CSS frameworks like Bootstrap and when should you not?
                    Well, when you are building a mobile first responsive website that you want to put online very quickly
                    and access beautiful components designed by professional designers, keeping everything on your website
                    looking slick and uniform, then you probably want to consider using bootstrap.
                    But if you're building a very simple website where you just need HTML and CSS and you can quickly throw
                    it up, or if you're building a really complex custom design website and you want complete control over
                    the design, then it's probably not a good idea to use an external CSS framework like Bootstrap.

               -How to add BootStrap:
                    Use CDN link (Content Delivery Network) for style & script.

          -BootStrap Layout:
               -Its 12 column layout system
               -Its mobile first approach.
               -made up of 3 components container, row & column
               eg.
                    <div class="container">
                         <div class="row">
                              <div class="col">
                                   Hello
                              </div>
                         </div>
                    </div>
               
               -Sized columns:
                    eg.
                         <div class="container">
                              <div class="row">
                                   <div class="col-2"> Hello </div>
                                   <div class="col-4"> Hello </div>
                                   <div class="col-6"> Hello </div>
                              </div>
                         </div>
               
               -BootStrap BreakPoints:
               -xs - Extra small devices (portrait phones, less than 576px)
               -sm - Small devices (landscape phones, 576px and up)
               -md - Medium devices (tablets, 768px and up)
               -lg - Large devices (desktops, 992px and up)
               -xl - Extra large devices (large desktops, 1200px and up)
               -xxl - Extra extra large devices (large desktops, 1400px and up)
               -xxxl - Extra extra extra large devices (large desktops, 1600px and up)

                     screen             class-infix         Dimension
                    extra small              xs             <576px
                    small                    sm             ≥576px
                    medium                   md             ≥768px
                    large                    lg             ≥992px
                    extra large              xl             ≥1200px
                    extra extra large        xxl            ≥1400px

                    eg.
                         col-sm-12
                              -on small screen it will take full width of page

                         col-sm-6
                              -on small screen it will take half width
                         -------------------
                         
                         col-md-12
                              -on medium screen it will take full width of page
                              
                         col-md-6
                              -on medium screen it will take half width
                         -------------------
                         
                         col-lg-12
                              -on large screen it will take full width of page
                              
                         col-lg-6
                              -on large screen it will take half width
                         -------------------
                         
                         col-xl-12
                              -on extra-large screen it will take full width of page
                              
                         col-xl-6
                              -on extra-large screen it will take half width
                         -------------------

                         col-xxl-12
                              -on extra extra large screen it will take full width of page
                              
                         col-xxl-6
                              -on extra-extra-large screen it will take half width
          
          -BootStrap Components:
               -Spacing
                    -These notation are used as class name
                    -To add margin or padding to the component
                    -m for margin
                    -p for padding
                    -t for top
                    -r for right
                    -b for bottom
                    -l for left
                    -x for x-axis  (horizontally)
                    -y for y-axis  (vertically)
                    syntax:
                         property-side-size
                    eg.
                         -margin for top of 5
                              mt-5
                         
                         -horizontally padding
                              px-2
                              
               -BootStrap supports dark theme
                    add dark theme.
                    <html lang="en" data-bs-theme="dark">

          -project:
