Git is source control system to control the source code.
Git hub is the cloud to store all codes repositories.
git is popular version control system

command

use in particular directory/ to create a git repo in that folder
git init

cloning
git clone url

to add file in staging area to commit
git add name.ext

for commiting changes
git commit
then i to insert
then esc key to out
then press :wq 
then enter to exit
or

git commit -m "msg here for committing"

check status
git status

to check files
ls  

//to create a new file
touch new.txt
touch new.html
touch new.js

touch name.ext

to add all files to staging area/ to track
git add .
git add -A
git add --all
git add --a

adding particular file
git add name.ext 

to commit all files at same time
git commit -am "msg here"


-git is version control system(vcs) to track the changes made in file
-gives easy recovery for files.

-to remove the tracking of git use this command/remove the hidden folder .git 
    DANGEROUS
    rm -rf .git

cloning
git clone url optional_name 

pwd = to check present working directory

ls = list of folder/ files
 
cd = change directory 

File Status lifecycle
    1.untracked
    2.unmodified
    3.modified
    4.staged -> commit

#Git diff command
    -git diff
        >compare the staging area to working directory if any changes is there.
        if there is any changes made then shows the changes else blank output.

#to add file & commit in single command/ skipping the staging area
    -git commit -a -m "Direct commit"
    >NOTE : this work if all file in tracking mode
            if new file is created then it won't go into the staging area.

to check all commits made 
git log

to check last 4 commits with their complete discription
git log -p -4

to just check the last 2 commits 
git log -2

to remove the file
rm name.ext
git rm name.ext

to change name 
mv old.ext new.ext

to copy file or its content 
cp name.ext copied_version_Mannual_name.ext

to see the content of file
cat home.html
cat filename.ext

to untrack any file or remove from tracking
git rm --cached home.html

Default branch of git is MASTER 

to see the short summary of commits
git log --stat

to see the changes in one line pretty
git log --pretty                //to check all commits
git log --pretty=oneline        //in oneline


last 3 commit in one line
git log --pretty=oneline -3

git log --pretty -3


short
git log --pretty=short          //all commits shown

last 2 commits shown
git log --pretty=short -2

full
 git log --pretty=full

//NOTE
    author  -- the person who created the file 
    commit -- person who changed the content of file 
-------------------------------------------------------

changed made in last 2 days
git log --since=2.days
git log --since=2.day

2 weeks
git log --since=2.weeks
git log --since=2.week

2 years
git log --since=2.year
git log --since=2.years

--------------------------------------------------------
git log ouput in particular format

git log --pretty=format:"%h -- %an"

%h - is hashCode
%an - is author name
%ae - is author email

---------------------------------------------------------
to modify the last commit & change heading & some content.
git commit --amend

// amend means change 
to check the last commit only
git log -1


//to unstage the staged file
git restore --staged Home.html

//to recovery previous version of file to restore the unwanted changed or to match to last commit

git checkout filename.ext
-git checkout Home.html
-git checkout -- Home.html

to match all files in project to the last commit
-git checkout -f
-git restore name.ext

//website or repositories present on internet to check
-git remote
-git remote -v 

push = upload the coding files on server    (uploading on github)
pull = download the files from server with it's complete history (taking from github)

//to push the existing repo on github
git remote add name_here url
-git remote add origin git@github.com:viveknikate/GitHarryPractice.git

//to check branches
git branch

//to upload
git push -u origin master
 
//generating key
ssh-keygen -t rsa -b 4096 -C "vivek.nikate@capgemini.com"

//to check the ssh agent is running
eval $(ssh-agent -s)

//add key
 ssh-add ~/.ssh/id_rsa

//to copy content to clipboard
clip < ~/.ssh/id_rsa.pub

//to see the key content
tail ~/.ssh/id_rsa.pub

after generating key you can push to the internet using
git push -u origin master

//pushing new file to github
 git commit -am "Direct commit with added new.txt file github"
 git commit -a -m "Modified New.txt file added some content"

//alias:
git config --global alias.st status         st => status

 git config --global alias.unstage 'restore --staged'      

//creating branches
creates a new branch & also switch to that,
 git checkout -b develop

//to switch branch
git checkout software_Engine
git checkout branch_name
 
//just to create branch without swithing to that branch 
 git branch branch_name

//to checkout all branches
git branch -a
git branch

//to delete a particular branch
git branch --delete branch_name

eg.
         git branch SoftwareEngine
         git branch --delete softwareEngine
         git branch -d SoftwareDevelop


         //forcefully deletion
          git branch  -D develop
          git branch -D branch_name



//NOTE: WARNING  WHENEVER YOU ARE SWITCHING THE BRANCH 
        MAKE SURE THAT YOU COMMITTED IN THAT BRANCH.
        EVERY BRANCH GIT STATUS SHOULD BE WORKING TREE CLEAN NOTHING TO COMMIT.


//merging
 git merge branch_name
 git merge <branch_name_except_theCurrentBranch_your_present_in> 

 :suppose 2 branch are there X, Y 
 & you want to merge Y in x 
 then you should be in the X branch
 then run merge command like
 git merge Y        (when your in X)


//Merge Conflict: branch merged but git not able to merge it
<<< conflict resolution marker

//last commit msg of every branch
git branch -v


//if you want to check the merged & non merged branches then 
//branches should be present not be deleted 
--if you deleted the branches then won't show any output on screen  
//already merged branches
git branch --merged

//shows the non merged branches 
git branch --no-merged

//if you are deleting the branch which is NOT MERGED & completed some development there,
    it shows some error to not delete, still you can forcefully delete that branch

//if you are deleting the branch which is MERGED & completed some development there, can directly delete that branch

Branching WorkFlows:
    -Long Running branches
    -Topic branches

//every branch needs to push mannually
//suppose you are created new branch & in that you created a new files folder then won't affect to the master branch    
    unless you merge them after mergin that files folder will gets added into the master branch

& viceverse if you created a files or folder on master then it won't reflect on other branches

//pushing

git push <name> <branch_name>

//while pushing any branch to github make sure you are in same branch recommended

//to delete the branch on remote repositories
git push -d origin software_Engine
git push -d <name_of_repo> <branch_name>

//branch rename locally
 git branch -m software_Engine SoftwareDevelopment
 git branch -m <old name> <New_name>

//commands
git config --global user.email <your email address>
git --version
git config --global user.name "Your Name"

-to checkout the default config list.
git config --list


-To check out the index.html from the second commit, find the number of the second commit using the git log, and then type the following at the prompt:
git checkout <second commit's number> index.html
git checkout 900cfcf index.html

-To discard the effect of the previous operation and restore index.html to its state at the end of the third commit, type:
git reset HEAD index.html
git checkout -- index.html

git reset <file>
	unstage a staged file, but leave working directory unchanged.
git reset
	reset staging area to the last commit without disturbing the working directory

================================================END=========================================================