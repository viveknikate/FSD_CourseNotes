GIT NOTES BY HARRY :-
    Git is source control system to control the source code.
    Git hub is the cloud to store all codes repositories.
    git is popular version control system

    command

    -to print on screen:
        -echo '....text.....'
        -echo "....text....."
        -echo hello\'s world
    
    -To put some content in file
        -echo my name >> name.txt
        -echo "my name something" >> name.txt
        -echo something here goes all time >> name.txt


    use in particular directory/ to create a git repo in that folder
    git init

    cloning
    git clone url

    to add file in staging area to commit
    git add name.ext

    -to edit file using terminal there are 3 commands
        vi <file_name.txt>
        eg.
            vi index.html

        Type  :qa!  and press <Enter> to abandon all changes and exit Vim
        To save changes you made press :wq press <Enter>
        press CRTL + C 

        vim <file_name.txt>
        eg.
            vim index.html
        
        nano <file_name.txt>
            eg.
                nano index.html


    for commiting changes
    git commit
    then i to insert
    then esc key to out
    then press :wq    or     :qa!
    then enter to exit
    or

    git commit -m "msg here for committing"

    check status
    git status

    to check files
    ls  

    //to create a new file
    touch new.txt
    touch new.html
    touch new.js

    touch name.ext

    to add all files to staging area/ to track
    git add .
    git add -A
    git add --all
    git add --a

    adding particular file
    git add name.ext 

    to commit all files at same time
    git commit -am "msg here"


    -git is version control system(vcs) to track the changes made in file
    -gives easy recovery for files.

    -to remove the tracking of git use this command/remove the hidden folder .git 
        DANGEROUS
        rm -rf .git

    cloning
    git clone url optional_name 

    pwd = to check present working directory/ Print Working Directory.

    ls = list of folder/ files
    
    cd = change directory 

    File Status lifecycle
        1.untracked
        2.unmodified
        3.modified
        4.staged -> commit

    #Git diff command
        -git diff
            >compare the staging area to working directory if any changes is there.
            if there is any changes made then shows the changes else blank output.

    #to add file & commit in single command/ skipping the staging area
        -git commit -a -m "Direct commit"
        >NOTE : this work if all file in tracking mode
                if new file is created then it won't go into the staging area.

    to check all commits made 
    git log

    //stat:-
    to check the changes made in repo : Like file deletion/insertion(updation).
    it gives the complete folder structure at that commit.
    git log --stat 
    git log --stat -1       //it will give the last commit detail info.
    

    //patch:-
    patch is like git diff, give more info made inside file. 
    shows complete code & changes in it.
    git log --patch 
    git log --patch -1      //changes in last commit.
    

    //Revert
    It will take progress back by to that particular commit_id we mentioned & generate new commit 
    with previous error free commit.
    
    git revert <commit_id>  //create new commit with whatever changes made upto that mentioned commit_id. 


    to check last 4 commits with their complete discription
    git log -p -4

    to just check the last 2 commits 
    git log -2

    to remove the file
    rm name.ext
    git rm name.ext

    to change name 
    mv old.ext new.ext

    to copy file or its content 
    cp name.ext copied_version_Mannual_name.ext

    -In Windows [Redirectional Operator (>)]
        echo 'some content' > file.txt

    -to check the content in window:
        more filename.txt
        or
        type filename.txt
    
    -in window:
        type file.txt file2.txt > vivek.txt             //combined 2 files.
        more file.txt file2.txt > vivek.txt             //combined 2 files.

    -to see the content of file
    cat home.html
    cat filename.ext

    to create file with content:
        cat > file_name.txt         //create new file & then you can add content inside file, by clicking enter button
                                    // after adding content press 'crtl + c' or 'crtl + D' to get out from editing mode.
        
        cat >> file_name.txt        //to append the content inside the file.
                                    //without changing the previous content.

    to untrack any file or remove from tracking
    git rm --cached home.html

    Default branch of git is MASTER or Main

    to see the total no.of commits on git bash/terminal
        git rev-list --all --count

    to see the short summary of commits
    git log --stat

    to see the changes in one line pretty
    git log --pretty                //to check all commits
    git log --pretty=oneline        //in oneline


    last 3 commit in one line
    git log --pretty=oneline -3

    git log --pretty -3


    short
    git log --pretty=short          //all commits shown

    last 2 commits shown
    git log --pretty=short -2

    full
    git log --pretty=full

    //NOTE
        author  -- the person who created the file 
        commit -- person who changed the content of file 
    -------------------------------------------------------

    changed made in last 2 days
    git log --since=2.days
    git log --since=2.day

    2 weeks
    git log --since=2.weeks
    git log --since=2.week

    2 years
    git log --since=2.year
    git log --since=2.years

    --------------------------------------------------------
    git log ouput in particular format

    git log --pretty=format:"%h -- %an"

    %h - is hashCode
    %an - is author name
    %ae - is author email

    ---------------------------------------------------------
    to modify the last commit & change heading & some content.
    git commit --amend
    git commit --amend -m 'new updated msg goes here.'

    
    //commiting things without changing the last massage.
    git commit --amend --no-edit

    // amend means change 
    to check the last commit only
    git log -1


    //to unstage the staged file
    git restore --staged Home.html

    //to recovery previous version of file to restore the unwanted changed or to match to last commit

    git checkout filename.ext
    -git checkout Home.html
    -git checkout -- Home.html

    to match all files in project to the last commit
    -git checkout -f
    -git restore name.ext

    //website or repositories present on internet to check
    -git remote
    -git remote -v 

    push = upload the coding files on server    (uploading on github)
    pull = download the files from server with it's complete history (taking from github)

    //to push the existing repo on github
    git remote add <name_here> <url>
    -git remote add origin git@github.com:viveknikate/GitHarryPractice.git

    //to remove remote which you added before
         git remote remove <remote_name>
         git remote remove origin

    //to check branches
    git branch
    git branch --list

    //to upload
    git push -u origin master
    
    //generating key
    ssh-keygen -t rsa -b 4096 -C "vivek.nikate@capgemini.com"

    //to check the ssh agent is running
    eval $(ssh-agent -s)

    //add key
    ssh-add ~/.ssh/id_rsa

    //to copy content to clipboard
    clip < ~/.ssh/id_rsa.pub

    //to see the key content
    tail ~/.ssh/id_rsa.pub

    after generating key you can push to the internet using
    git push -u origin master

    //pushing new file to github
    git commit -am "Direct commit with added new.txt file github"
    git commit -a -m "Modified New.txt file added some content"

    //alias:
    git config --global alias.st status         st => status

    git config --global alias.unstage 'restore --staged'      

    //creating branches
    creates a new branch & also switch to that,
    git checkout -b develop

    //to go back HEAD/index by one commit using relative refs(^)
    git checkout HEAD^

    //to go back HEAD/index by three commit using relative refs(^)
    git checkout HEAD^^^

    //to switch branch
    git checkout software_Engine
    git checkout <branch_name>
    
    //just to create branch without swithing to that branch 
    git branch <branch_name>
    git branch version2

    //to checkout all branches & remote branches
    git branch -a
    git branch

    //to delete a particular branch
    git branch --delete branch_name

    eg.
            git branch SoftwareEngine
            git branch --delete softwareEngine
            git branch -d SoftwareDevelop


            //forcefully deletion
            git branch  -D develop
            git branch -D branch_name



    //NOTE: WARNING  WHENEVER YOU ARE SWITCHING THE BRANCH 
            MAKE SURE THAT YOU COMMITTED IN THAT BRANCH.
            EVERY BRANCH GIT STATUS SHOULD BE WORKING TREE CLEAN NOTHING TO COMMIT.


    //merging
    git merge branch_name
    git merge <branch_name_except_theCurrentBranch_your_present_in> 

    :suppose 2 branch are there X, Y 
    & you want to merge Y in x 
    then you should be in the X branch
    then run merge command like
    git merge Y        (when your in X)


    //Merge Conflict: branch merged but git not able to merge it
    <<< conflict resolution marker

    //last commit msg of every branch
    git branch -v


    //if you want to check the merged & non merged branches then 
    //branches should be present not be deleted 
    --if you deleted the branches then won't show any output on screen  
    //already merged branches
    git branch --merged

    //shows the non merged branches 
    git branch --no-merged

    //if you are deleting the branch which is NOT MERGED & completed some development there,
        it shows some error to not delete, still you can forcefully delete that branch

    //if you are deleting the branch which is MERGED & completed some development there, can directly delete that branch

    Branching WorkFlows:
        -Long Running branches
        -Topic branches

    //every branch needs to push mannually
    //suppose you are created new branch & in that you created a new files folder then won't affect to the master branch    
        unless you merge them after mergin that files folder will gets added into the master branch

    & viceverse if you created a files or folder on master then it won't reflect on other branches

    //pushing

    git push <name> <branch_name>

    //while pushing any branch to github make sure you are in same branch recommended

    //to delete the branch on remote repositories
    git push -d origin software_Engine
    git push -d <name_of_repo> <branch_name>

    //branch rename locally
    git branch -m software_Engine SoftwareDevelopment
    git branch -m <old name> <New_name>

    //or to rename the current branch
        git branch -m <new_name>
        git branch -M <new_name>
        eg.
            git branch feature

    //commands
    git config --global user.email <your email address>
    git --version
    git config --global user.name "Your Name"

    -to checkout the default config list.
    git config --list

    -to unset/ change the name or mail
        git config --global --unset user.name
        git config --global --unset user.email
    
    -to edit the file.
    git config --global --edit



    -To check out the index.html from the second commit, find the number of the second commit using the git log, and then type the following at the prompt:
    git checkout <second commit's number> index.html
    git checkout 900cfcf index.html

    -To discard the effect of the previous operation and restore index.html to its state at the end of the third commit, type:
    git reset HEAD index.html
    git checkout -- index.html

    git reset <file>
        unstage a staged file, but leave working directory unchanged.
    git reset
        reset staging area to the last commit without disturbing the working directory

    #Cherry-Pick:
        -git cherry-pick <Commit1> <Commit2> <...>
            It's a very straightforward way of saying that you would like to copy a series of commits below your current location (HEAD). 
            I personally love cherry-pick because there is very little magic involved and it's easy to understand.
            
            Here's a repository where we have some work in branch side that we want to copy to main. 
            This could be accomplished through a rebase (which we have already learned), but let's see how cherry-pick performs.
            That's it! We wanted commits C2 and C4 and git plopped them down right below us. Simple as that!

            git cherry-pick <commit_hash> <commit_hash>
        
        -git rebase -i HEAD~4
            Reorder 4 commits or exclude(remove) also.


===================================================================================End============================================================================
GIT NOTES:
    to check the status of folder/project
    -git status 

    cmd to set user name & email

    -git config --global user.name Vivek
    -git config --global user.email vivek@gmail.com

    to initialize on specific location
    -git init

    to set the file in staging area
    -git add file_name

    to first commit
    -git commit 
    press i to insert
    after inserting the msg then press  'esc :wq' to exit

    to create the files in folder
    -touch file_name.
    eg.
        touch index.html

    to add all file in staging area same time use
    -git add -A
    -git add --all 
    -git add .

    to commit use advance command
    -git commit -m "msg goes here"

    to recover/ or match to last commit use 
    -git checkout file_name
    eg.
        git checkout index.html

    to recover all file same time use
    -git checkout -f

    to check all commits
    -git log

    to exit from log history press just Q

    to check the last 5 commits use
    -git log -p -5

    if your are currently working on modified files & modifing it & you want 
    to check the difference between the last committed & current changes in file then use
    IT DOES THE COMPARISON BETWEEN THE WORKING DIRECTORY & FILE IN STAGING AREA
    -git diff

    will show the recent change made by you in the same file


    to see the changes in file from last commit to staged file use
    -git diff --staged

    to add file directly to the commit use
    -git commit -a -m "skipped stage area & committed"

    to remove file from tracking & from hard disk also
    -git rm  file_name

    to just remove file from tracking or committed by mistake use
    -git rm --cached file_name
    eg.
        git rm --cached index.html
        git rm --cached  -r -f .        //removing all files from staging area recursively & forcefully.
        git rm --cached  -r .        //removing all files from of current directory staging area recursively.

    to get short msg for git status
    -git status -s
    -git status --short

    to check the branches use 
    -git branch

    to create new branch use
    -git branch newBranch 
    
    to change the branch use
    -git checkout branch_name
    eg
        git checkout feature
        
    to merge the new branch into the master branch use
    -git merge branch_name
    eg 
        git merge feature

    to create a new branch & directly go into it
    -git checkout -b branch_name

    to delete particular branch use 
    -git branch --delete branch_name

    *now pushing the repository on gitHub 
    add the remote command copy paste it on git bash

    to push branch
    -git push -u origin branch_name

    //Rebase
        Rebasing essentially takes set of all commits, "copies" them, and plops them down somewhere else.
        he advantage of rebasing is that it can be used to make a nice linear sequence of commits. 
        The commit log / history of the repository will be a lot cleaner if only rebasing is allowed.

        Scenario of Rebase:
            -You are main branch 4 commits are there.
            -created new branch called 'FEATURE', on feature branch there are 5 commits.

            -now you switched to the main branch & want to fetch all commits of FEATURE branch to main branch.
            in this case you need to use rebase.

            -if you stay in main branch & ran the command with same branch name like
             git rebase main
             then ouput like 'BRANCH IS ALREADY UP-TO-DATE'.

            -want to fetch all changes in main branch & continue the project building on main branch, then
             stay in other branch & use this command
             git rebase <Other_branch_name>
             git rebase main;          

             if you stay in feature branch & run this command then project head start to point feature branch
             -git rebase main  

             whatever you write at the end of rebase command (the branch) the all commits of the branch you are currently
             present in. are moved to that other branch (gets appended).
             
    
    git rebase -i HEAD~3  //rebase 3 commits backwards
    git checkout newBranch;
    git commit <on_newBranch>;
    
    -want to change its commit to main branch
    git rebase main

    changing particular branch's head to specific commit:
        git branch -f main HEAD~3
        -main branch moved back by 3 commits
        
        git branch -f feature HEAD~3
        -feature branch moved back by 3 commits


        -git checkout <commit_hash>   
        //HEAD will point to that hash.

        -git checkout <branch_name>
        //changing branch

        git branch -f <branch_name> HEAD~3
        eg.
            git branch -f bugFix HEAD~3         

            here, -f means forcefully changing head of that brach, means that branch.
            HEAD~3 means go back (previous) 3 commits 
        
        -git branch -f <branch_name> <commit_hash>  
        eg.
            git branch -f bugFix c6.
            pointing that branch to that commit_hash

    Git Reset
        git reset reverses changes by moving a branch reference backwards in time to an older commit. 
        In this sense you can think of it as "rewriting history;" 
        git reset will move a branch backwards as if the commit had never been made in the first place.
        Let's see what that looks like:

            git reset HEAD~1

             Git moved the main branch reference back to C1; 
             now our local repository is in a state as if C2 had never happened.

    Git Revert
        While resetting works great for local branches on your own machine, 
        its method of "rewriting history" doesn't work for remote branches that others are using.
        In order to reverse changes and share those reversed changes with others, 
        we need to use git revert. Let's see it in action.

            git revert HEAD

                Weird, a new commit plopped down below the commit we wanted to reverse. 
                That's because this new commit C2' introduces changes 
                -- it just happens to introduce changes that exactly reverses the commit of C2.
                With reverting, you can push out your changes to share with others.

    Git Describe:
        Because tags serve as such great "anchors" in the codebase, 
        git has a command to describe where you are relative to the closest "anchor" (aka tag). And that command is called git describe!
        Git describe can help you get your bearings after you've moved many commits backwards or forwards in history;
        eg.
            Git describe takes the form of:
                git describe <ref>
                Where <ref> is anything git can resolve into a commit. 
                If you don't specify a ref, git just uses where you're checked out right now (HEAD)
                The output of the command looks like:
                    <tag>_<numCommits>_g<hash>
                    Where tag is the closest ancestor tag in history, numCommits is how many commits away that tag is, 
                    and <hash> is the hash of the commit being described.
    
    -Specifying Parents
        Like the ~(tild) modifier, the ^(caret) modifier also accepts an optional number after it.
        Rather than specifying the number of generations to go back (what ~ takes), 
        the modifier on ^ specifies which parent reference to follow from a merge commit. 
        Remember that merge commits have multiple parents, so the path to choose is ambiguous.
        Git will normally follow the "first" parent upwards from a merge commit, but specifying a number with ^ changes this default behavior.

        Here we have a merge commit. If we checkout main^ without the modifier, 
        we will follow the first parent after the merge commit.            
        (In our visuals, the first parent is positioned directly above the merge commit.)

            git checkout main^
        
        Now let's try specifying the second parent instead...

            git checkout main^2
        
        Chaining:
            git checkout HEAD~          //one commit back
            git checkout HEAD^2         //from merge follow 2nd parent as processing branch
            git check HEAD~2            // go back by 2 commits.

            these modifiers can be chained together! 

                git checkout HEAD~^2~2
            
        Multiple Command with ; at the end..
            checking status & creating new file.
            eg.
                git status; touch index.js

    -Remote:
        git fetch        //for downloading the commit without changing the local file system.
        git pull         //for downloading & merging all commits. fetch + merge

        after downloading to merge all commits use
            git rebase
            git merge

            -shorthand for a fetch and a rebase!
                git pull --rebase


==========================================End====================================================
Udemy git course

-Version control system
-Decentralized/ Distributed
    can be centralized
-created for linux kernel project
-local operation
    super fast
-open source

-The default branch for git is master
-The default branch for github is main
---------------------------------------------------------------------------------------------------
#To Open any repository directly on browser

-just press (.) Period key on keyboard.

 just paste this (vscode.dev/) in link of GitHub repo.
 -https://github.com/viveknikate/CV     
    
    this above link you want to open directly in browser 
    the link will modified to ->
    https://vscode.dev/github.com/viveknikate/CV
---------------------------------------------------------------------------------------------------
#TO STOP ANY COMMAND EXCUTION:
    -ctrl+C (press control+C)

#OR to get out of any editor or log just press "q"

#When you use commit command then press "i" to insert the content,
 when you done, press "esc" then ":wq" then "enter"

#TO CHECK THE GIT SOFTWARE Version:
    $ git -v
    $ git version
    $ git --version
    ※output:
        git version 2.38.1.windows.1    

#TO SET THE USER NAME:
    -git config --global user.name "<name>"
    eg.
        -git config --global user.name "Vivek"

#TO CHECK THE USER NAME:
    -git config user.name

#TO SET THE EMAIL:
    -git config --global user.email "<EMAIL>"
    eg.
        -git config --global user.email "viveknikate.2000@gmail.com"

#TO SEEK HELP 
    -git help <command-name>
    eg.
        -git help rm
        -git help fetch

※TO CHECK UP TILL NOW HOW MANY COMMANDS YOU USED/ RUNNED ON PROMT USE:
    -history

#Repository:
    Collection of Files Managed by Git is called Repository.
    -History (all of it)
    -Quasi-hidden .git folder
    
#Commits and files:
    -Snapshots are Commits
    -one or more file changes
    -Commits are saved on (Timeline)branch
    -default branch is master branch

#Github:
    -most popular git hosting platform
    -free plan 
        free ulimited public Repository
        no private Repository
    -business model
        private Repository
===========================================================================
Git commands:

PRESENT WORKING DIRECTORY:
    -pwd

TO LIST ALL FOLDER/ FILES IN SPECIFIC FOLDER:
    -ls
    detail info:
    -ls -l

TO CLEAR THE SCREEN USE NEED TO USE:
    -clear

TO CHECKOUT THE HIDDEN FOLDER ALSO 
    ls -al

TO CHANGE THE DIRECTORY
    cd folder_name
    cd folder_name1/folder_name2
or  
BACK TO PARENT
    -cd ..          //back by 1 step    
    -cd ../../../   //back by 3 step
    
-to get back to root/ main directory:-
    -cd ~


GIT INIT COMMAND:
    -git init <folder_name>
    eg.
        -git init sample_folder
        -git init "Main Project"            //when space is there in folder_name use quotes or back slash
        -git init Main\ 2nd\ project        // for spacing back slash \ is used 

    or 
    within expected folder just enter the below command
    -git init
    or
    -git init .        
                 //DOT(.) to mention that initialize the .git folder in the current folder

#git states:
    1.working directory
    2.staging area
    3.repository(.git folder)

#TO CHECKOUT THE THE STATUS
    -git status

#TO ADD FILE TO TRACKING: (to add file to staging area)
    -git add <file_name>            //to add particular file

    -git add .                      //to add all files in current folder with DOT(.)

    -git add --all                  //to add all files

    -git add -A                     // to add all files

#TO REMOVE FILE FROM STAGING AREA (Unstage):
    -git rm --cached <file_name>

    -git restore --staged .         //remove all files from staging area

    -git restore --staged <file_name>   //remove particular file from staging area

    -git reset <file_name>

    -git reset HEAD <file_name>

#AFTER ADDING COMMIT THE CHANGES 
TO COMMIT USE
    -git commit -m "msg goes here"

#TO CHECK THE COMMITS:
    -git log            //all Commits

    -to see log with branches design 
        -git log --oneline --graph
        eg.
        $ git log --oneline --graph
            *   e36cb3e (HEAD -> master, Main/master) Merge pull request #2 from viveknikate/Example
            |\
            | * a93b6fb Update new11.txt
            |/
            *   423c0be Merge pull request #1 from viveknikate/viveknikate-patch-1
            |\
            | * 98522bb txt file
            |/
            * 91fa9ca Modified sample txt file added content name in it
            * 9f726c0 Skipped stagin area Direct commit
            *   fa2958d (tag: V1.0, tag: Tag2, tag: Tag1) modified new11 txt file
            |\
            | * aca8e21 Commiting changes in another branch before moving to master branch
            * | 93bb9ba Third line in new11.txt file
            |/
            * 916aa17 modified new11 files in 2nd branch
            * ad45864 modified git ignore folder
            * cd7ede5 added new folder

    -git log -4         //last four Commits

    -git log -5 --oneline       //last 5 commits with short msg 
                                    description in one line
                                
                                //here in oneline 
                                the first 7 character is taken as msg.
    
    -TO CHECK COMMITS WITH FULL DESCRIPTION:
     this command shows the last commit with all changes we made in it.
        -git show
    
        -git show <commit_SHA-1_code>
        eg.
            -git show 9f726c0
            -git show 410a8d96d46022739582382cf37b352b8c045f41



- '.git' folder is special folder where all directory Managed by Git.
- just stay out of this folder

#TO FORCEFULLY DELELTE ALL CONTENT IN .GIT FOLDER
    -rm -rf .git

#To get out of any editor press 'q'

#TO CHECK WHAT ARE THE FILES WE ARE TRACKING:
    it shows which files currently in tracking mode
        -git ls-files

#To check files which are ignored but still in tracking use this command
    git ls-files -ci --exclude-standard

    after you found such files then remove them using this command
    git rm --cached <file_name_you_want_to_ignore>

#TO REMOVE FILES :
    =The difference between the (rm <file_name>) command & (git rm <file_name>) is 
    that, rm just delete the files without knowing to git 
    & next time we have to stage the change we made & then 
    further we have to commit the changes

    =if we use the git rm <file_name> command then it remove the file 
        & stage the change 
        further we can directly  commit the changes 
        ONE STEP IS REDUCED WHEN WE USE (git rm <file_name>) command

    -rm <file_name>
    -git rm <file_name>
        eg.
            rm sample.txt
            git rm sample.txt

#TO REMOVE THE DIRECTORY
    -rm -rf <directory_name>
    eg.
        rm -rf newfolder
    eg.
        git rm -rf 'New folder'/


#DIRECT COMMIT:
    -git commit -a -m "direct commit"   //this will work when file is added 
    -git commit -am "direct commit"     //this will work when the file is previously is in tracking mode of git or added.

#TO INGORE THE PARTICULAR FILE ADD THEM IN .gitignore folder
name must be same 
-to comment in gitignore folder use 

    .gitignore  
        -> to ignore the txt files
            *.txt
        
        -> to ignore log folder which are machine generated 
            *.log
        
        -> to ignore the particular file
            name.extention
            eg.
                sample.txt
        
        ->to ignore folder
            by default the git doesn't track the folder 
            it tracks the files inside the folder
            -to ingore the content of that folder 
                just put the folder_name inside the  ".gitignore" file
            FOLDER_NAME

        
        -VISIT THE .gitignore Repository ON GitHub FOR PARTICULAR Project THEY WILL TELL YOU WHICH FILES
        SHOULD BE IGNORED

#TO RESTORE THE PREVIOUS BUG FREE FILE USE
    -git checkout <file_name>
    eg.
        git checkout sample.txt
    
    -git checkout -- <file_name>
    eg.
        git checkout -- sample.txt
    
    -git restore -- <file_name>
    -git restore <file_name>
    eg.
        git restore -- sample.txt
        git restore sample.txt

#to restore all files as that of previous 
    -git checkout -f
eg.
    //folder restoring
    name must match with previous

    -git restore --staged 'New folder/34t.txt'      
    -git restore 'New folder/34t.txt'


#After deleting to restore the file
    -git restore -- <file_name>
    -git restore <file_name>
    eg.
        git restore -- sample.txt
        git restore sample.txt


#TO CHANGE THE FILE NAME IN GIT:
    -mv <old_name> <new_name>
    eg.
        mv first1.txt first11.txt

    -git mv <old_name> <new_name>
        git mv first1.txt first11.txt

#TO COPY THE FILE
    -cp <path/filename.extention> <path/newname.extention>
    eg.
        -cp Git\ Course\ Udemy.txt ~/Desktop/GitUdemyCourseNotes.txt
    
    >>to copy all files inside folder
        -cp -R <folder_path>/* <new-path>           
        -cp -R <folder_path>/* .

        //-R for recursively means copy subfolder file everything inside it 
        //*  for everything
        //. if you want to copy other folder's content inside 
            the path where you are currently standing use DOT(.)  
        
#rm command
    -git rm <file_name>
    
    -git add -u             //u -> update
    changes staged by add command
    
#Differences:
    -git diff <hash_code1> <hash_code2>
        eg.
            git diff e8a16f5 410a8d9

    -git diff <hash_code1> HEAD
    -git diff f6e1bd6 HEAD      (HEAD is the updated version of the project)
        
    -git difftool e8a16f5 HEAD
        crtl + Q        (to quite from difftool)

    -git diff   
            (gives the difference between working directory & last commit)
    
    »This diff command also gives the difference between 2 branches 
    eg.
        -git diff <branch_1> <branch_2>
        eg.
            -git diff SecondBranch master

---------------------------------------------------------------------------------
Branch & Merging:
    1. Fast Forward Merge
    2. Automatic Merge
    3. Manual Merge
---------------------------------------------------------------------------------
Spcial Markers:
    -Like "pointers"
    -HEAD
        -Points to Last commit of current branch
        -can be moved(Advanced)
------------------------------------------------------------------
#Branches:
    #TO CHANGE THE NAME OF CURRENT BRANCH WE ARE WORKING IN, use:
    -space should not be there.
        -git branch -m <new_name>
        -git branch -m <"new_name">
        eg.
            -git branch -m MainMaster
            -git branch -m "MainMaster"

    #TO CHECKOUT HOW MANY BRANCHES ARE THERE:
    #Or to checkout in which branch currently we're working in
        -git branch
        ※output:
                $ git branch
                    * NewOne
                      master
                      
        »»»Here the * denotes that we're currently working in branch
           named NewOne 

    #TO CREATE BRANCH:
        -git branch <branch_name>
        eg.
            -git branch NewOne
    
    #TO CHECKOUT ALL REMOTE/ LOCAL BRANCHES:
        -git branch -a
        eg.
             git branch  -a
                * master                        //local branch will be shown first
                remotes/Main/master             // remote branches shown here.

    
    #TO DELELTE BRANCH:
        -git branch -d <branch_name>
        -git branch --delete <branch_name>
        -git branch -D <branch_name>            //forceful deletion of branch
        eg.
            git branch -d example
            git branch --delete example2
            git branch -D example3
    
    #TO DELELTE BRANCH OF REMOTE REPO:
        -git push -d <remote_repo_name> <branch_name>
        -git push <remote_repo_name> :<branch_name>
        eg.
            -git push -d Main VivekBranch
            -git push Main :VivekBranch

            $ git push Main :AnotherBranch
            To https://github.com/viveknikate/UdemyGit.git
            - [deleted]         AnotherBranch



    #TO SWITCH ANOTHER BRANCH:
        -git checkout <branch_name>
        eg.
            -git checkout NewOne    //going inside NewOne branch
            -git checkout master    //going inside master branch


    #TO CREATE BRANCH & SWITCH TO THAT BRANCH:
        -git checkout -b <branch_name>
        eg.
             git checkout -b Feature
-------------------------------------------------------------------------
#git Tags:
    -to check how many tags are there simply run below command
    -git tag --list (or)
    -git tag    (or)

    -git show
    -will show the tags after commit hash within parenthesis.
        
    2 Types of tags,
    
        1.Light Weigth tag:
            -light Weigth tags are tags there's no information associated with it.
            
            #TO CREATE LIGHT WEIGHT TAG:
                -git tag <tag_name>
                eg. 
                    git tag mytag
            
            #CREATING TAG FOR PARTICULAR BRANCH:
                -git tag <tag_name> <branch_name>
                -git tag <tag_name> <commit_id>
                eg.
                    -git tag stable master          //created tag named stable on branch master
                    -git tag unstable 916aa17       //created tag named unstable on commit_id
                
                Creating Annotated tag  
                    -git tag -a <tag_name> -m "<tag msg>" <commit_id>
                    eg
                        -git tag -a V0.1 -m "Release 0.1 (Alpha)" 5b9c858

            #PUSHING SPECIFIC TAG ON GitHub:
                -git push <remote_repo_name> <tag_name>
                eg.
                    -git push Main stable
            
            #PUSH ALL TAG AT ONCE:
                -git push --tags

            

            eg. Delete the tags from github remote: 
            git push -d <remote_repo_name> <tag_name>
            git push -d <remote_repo_name> <1st_tag_name> <2nd_tag_name>

            git push <remote_repo_name> :<tag_name>
            eg.
                -git push -d Main Tag1
                -git push -d Main stable unstable

                -git push Main :<tag_name>
                eg.
                    $ git push Main :v1
                    To https://github.com/viveknikate/UdemyGit.git
                    - [deleted]         v1


        2.Annotated tags:
            -Annotated are those tag, 
             some extra information is associated with them are called Annotated tags.
            -They contain some information 
            
            -In this Annotated tags the extra information shown is ,
                » tag name
                » Tagger's name
                » tag's Commit msg
                » The last Commits detail information

            -The normal light weight tag will shows the just last commits detail information


            #TO CREATE ANNOTATED TAGS:
                -git tag -a <tag_name> -m "msg here"
                eg.
                    -git tag -a v1.0 -m "Released 1st version"

                here, -a is to mention this is Annotated tag
                      -m is for commit msg.

    #TO DELETE A TAG:
        -git tag --delete <tag_name>
        -git tag -d <tag_name>
        eg.
            -git tag --delete mytag
            -git tag -d mytag

    #TO CHANGE TAG WHERE IT IS CURRENTLY POINTING:
        -git tag -f <tag_name> <commit_id>
        eg.
            -git tag -f v4 91fa9ca
        
        -to forcefully change the pointer of tag previously assigned 
            -git push <remote_repo_name> <tag_name> --force
            -git push --force <remote_repo_name> <tag_name>
            eg.
                -git push Main v4 --force
                -git push --force Main v4
---------------------------------------------------------------------------------
#Stashing : Save temporary changes
    >>This command will save all the work temporarily 
    >>& when we run the status command then show working directory is clean
        -git stash 
    
    >>You can make as many changes you want & save them temporarily with this above stash command
    >>later on to get back this changes you made, run "stash pop" command.

    >>To check the list of stashes use command:
        -git stash list
        -git stash show
        ※output:
            stash{0} changes made in file1.txt
            stash{1} changes made in file1.txt
            
    >>To get back the changes made & temporarily saved by stash command use:
        -git stash pop
--------------------------------------------------------------------------------------
#TimeTravelling:    getting back in time 
    -with reset & reflog

    -Reseting means basically, all it does is change wher HEAD is pointing.
    -it doesn't lose all the commits it saves the commit & just change the HEAD pointing
    eg.
        -git log 
        ※output:
                55551ABC    5th commit <- [HEAD]    (here the head is pointing)
                44443ABC    4th commit
                33333ABC    3rd commit
                22222ABC    2nd commit
                11111ABC    1st commit

        -git reset 22222ABC --soft
        -git log
        ※output:
                55551ABC    5th commit 
                44443ABC    4th commit
                33333ABC    3rd commit
                22222ABC    2nd commit
                22222ABC    2nd commit <- [HEAD]    (here the head is pointing)
                11111ABC    1st commit

    RESETING TYPES:
        1.SOFT
            -SOFT reset is the LEAST DESTRUCTIVE of them all.
            -soft preserve the changes made in staging area & working directory. 
            -when we run SOFT attribute then it just 
             show all files but in STAGED CONDITION
        2.MIX/ DEFAULT
            -This is the default one
            -when we run default attribute then it just 
             show all files but in UNSTAGED CONDITION

        3.HARD:
            -HARD reset MOST DESTRUCTIVE of all of them
            -when we run HARD attribute then it 
             deletes all the files, and 
             move the HEAD to that particular commit &
             whatever the files created where the HEAD is pointing
             (commites/files after HEAD) that will be completely (from project folder)
             deleted by HARD attribute


    >>To point back our head, use:
        -git reset <commit_hash/commit_id> --soft
        eg.
            git reset 121212 --soft
    
    >>hard parameter
        -git reset commit_id --hard
        output:
            HEAD is now at <commit_hash> <commit msg>
        eg. 
             git reset e8a16f5 --hard
             output:
                HEAD is now at e8a16f5 Added all files again

    >>Reflog:
        git log shows us the commit ids,
        -git log
        where 
        git reflog shows us all the actions we've taken while in this repository 
        -git reflog

    => making directory as that of previous as it is before reset HEAD 
        git reset --hard <commit_id>
        git reset <commit_id>
        eg.
            git reset --hard fa2958d
            git reset fa2958d
--------------------------------------------------------------------------------
#SAVING FILES ONLINE:
    -git remote add <name> <link>
    eg.
        -git remote add origin https://github.com/repo
----------------------------------------------------------------------------------
#PUSHING LOCAL REPO :
    -git push -u <name_of_remote_repo> <branch_name> --tags
    eg.
        -git push -u origin master --tags 
    here, -u is define the relation between local master branch & remote master branch
           --tags is for sending all the local tags to the remote repo

    -WHEN WE DO PUSHES IN THE FUTURE, THE "-u" will no longer be required.
        -git push
----------------------------------------------------------------------------------
eg. 
    - git remote
    Main

    -git remote -v          //here -v is verbose
    Main    git@github.com:viveknikate/UdemyCourseGitPractice.git (fetch)
    Main    git@github.com:viveknikate/UdemyCourseGitPractice.git (push)

    #TO ADD MORE REMOTE Repository:
        -git remote add <remote_repo_name> <repo_link>
        eg.
            -git remote add UpStream https://github.com/viveknikate/UdemyGit.git

    #prune:-
        It will delete remote refs that are no longer in use on the remote repository. fetches the latest update from remote 
        -git fetch --prune
        -git fetch -p
        

    -git push -u <remote_repo_name> <branch_name> 
    or
    -git push -u <remote_repo_name> <branch_name> --tags         //mention --tags if you want to push tags to github
    eg.
        git push -u Main master --tags
        git push -u Main master
----------------------------------------------------------------------------------
Q. is actually possible to specify the default branch to start a repo on local side
=> Yes.
    -git init -b Main local-repo
    eg.
        -git init -b <default_branch_name> <folder_name>

        "-b" allows to specify the default branch_name.
        folder_name where to initialize the git repo.
-----------------------------------------------------------------------------------    
    #TO SET THE DEFAULT BRANCHING 
        -git config --global init.defaultBranch <branch_name>
        eg.
            -git config --global init.defaultBranch master
            -git config --global init.defaultBranch Main

    #TO CHECK THE GIT DEFAULT CONFIGURATION
        -git config  --global  --list
        -cat ~/.gitconfig           //default configuration information
    
    #TO SET THE DEFAULT EDITOR FOR GIT:
        -git config --global core.editor "<application exe name>"  
        eg.
            -git config --global core.editor "code"     //here code is name for visual studio code
        
        -TO OPEN THAT .GITCONFIG FILE TO SEE THE DEFAULT CONFIGURATION:
            -git config --global -e
            -cat ~/.gitconfig
            -git config --edit


    #TO DOWNLOAD/ PULL THE REPO
        -git clone <repo_link>
    
    #NOTE:  WHEN YOU ARE WORKING WITH SAME DIRECTORY & ALREADY PUSHED THE CODES
            THEN WHEN YOU'RE PUSHING THE CODE NEXT TIME JUST USE :
            -git push
            WITHOUT REPO-NAME BRANCH-NAME AFTER PUSH 
-----------------------------------------------------------------------------------
#SSH & HTTPS:
    SSH- SecureShell
    HTTPS-HyperText Transfer Protocol with Secure

    -mkdir .ssh
    -cd .ssh

    #TO GENERATE THE SSH KEY USE BELOW COMMAND:
        -ssh-keygen -t rsa -C "<email_id>"
        -ssh-keygen -t rsa -C "vivek.nikate@capgemini.com"
    here the -t is type of key


    after running these commands check folder content with ls command
    -here the .pub file is the public key
    -other file is private key  
    
    -leave private key files

    -Open the .pub file copy all content within it, go to github account setting 
     in that ssh key section press add ssh key
     give title then paste all the content in below box
     that's it we're done with key generation.

    #TO CHECK WE ARE CONNETECT TO Github OR NOT USE COMMAND:
        -ssh -T git@github.com 
        -SSH -T git@github.com 
        eg.
            ssh -T git@github.com
            output:
                Hi viveknikate! You've successfully authenticated, 
                but GitHub does not provide shell access.
------------------------------------------------------------------------------------
Git Fetch: is the command that tells the local repository that there 
            are changes available in the remote repository without bringing 
            the changes into the local repository.
             -git fetch <remote>
             -git fetch     //makes related updates to the local repo from remote repo

Git Pull:
        -pull is 2 commands in one.(fetch+merge)
        -Fetch brings remote changes to local repo & merge them to local repo
        -pull brings the copy of the remote directory changes 
         into the local repository.
        -running pull command is little destructive coz sometimes Merging arises conflicts in repo.
         so us fetch command
            -git pull <remote> <branch>
            
            $ git pull
            Already up to date.

------------------------------------------------------------------------------------
#Cloning:   Using
            1)SSH:
                    -git clone <repo_ssh_link>
                    -git clone <repo_ssh_link> <folder_name>
                    eg.
                        -git clone git@github.com:viveknikate/CV2.git Vivek-CV      //all content cloned into vivek-cv named folder
                        -git clone git@github.com:viveknikate/CV2.git 
            2)HTTPS:
                     -git clone <repo_https_link>
                     -git clone <repo_https_link> <folder_name>
                     eg.
                        -git clone https://github.com/viveknikate/CV2.git
                        -git clone https://github.com/viveknikate/CV2.git Sample-project
                        -git clone https://github.com/viveknikate/CV2.git Updated_CV
------------------------------------------------------------------------------------
#If we changed the project name on GitHub then to sync on local repo use below commands:
    
    #TO SHOW ALL DETAIL INFO OF REPO:
    -git remote show <remote-repo-name>
    eg.    
        $ git remote show Main
        * remote Main
            Fetch URL: git@github.com:viveknikate/UdemyCourseGitPractice.git
            Push  URL: git@github.com:viveknikate/UdemyCourseGitPractice.git
            HEAD branch: master
            Remote branch:
                master tracked
            Local branch configured for 'git pull':
                master merges with remote master
            Local ref configured for 'git push':
                master pushes to master (up to date)
    
    #To update local repo's name:
        -git remote set-url <remote_repo_name> <repo_https_link>/<repo_ssh_link>
        eg.
            vnikate@lin80030770 MINGW64 ~/Desktop/Udemy Git/Project (master)
            $ git remote -v
            Main    git@github.com:viveknikate/UdemyCourseGitPractice.git (fetch)           //before running set-url command name is UdemyCourseGitPractice
            Main    git@github.com:viveknikate/UdemyCourseGitPractice.git (push)

            vnikate@lin80030770 MINGW64 ~/Desktop/Udemy Git/Project (master)
            $ git remote set-url Main https://github.com/viveknikate/UdemyGit.git

            vnikate@lin80030770 MINGW64 ~/Desktop/Udemy Git/Project (master)
            $ git remote -v
            Main    https://github.com/viveknikate/UdemyGit.git (fetch)                     //after running set-url command name is UdemyGit
            Main    https://github.com/viveknikate/UdemyGit.git (push)
------------------------------------------------------------------------------------
#Merge:
    -git merge <branch_name_(exceptBranchYourCurrentlyIn)>
    eg.
        -git merge example        
------------------------------------------------------------------------------------
#Gist:-
    short/ small program/script files.
    Gist is a simple way to share snippets and pastes with others. 
=================================End================================================