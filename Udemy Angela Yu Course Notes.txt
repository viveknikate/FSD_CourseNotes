Servers : A special computer needs to be online 24*7 to serve
Client : a user requesting to Server

ISP : Internet Service Provider
DNS : Domain Name System
        It work like phone book search that 
        website IP address on its database

Every Computer connected to the Internet has an IP address
its like postal code for computer 

-to see the ip address of website go to this website
https://www.nslookup.io/

you'll get the IP address of that site

-website mostly made up of HTML, CSS & Javascript

HTML         :  Responsible for content of website
CSS          :  Responsible for styling for site color, font etc
Javascript   :  makes the site functional, actionable, working, not just looks
                make some actions

-When we refresh the browser means we're asking 
 browser to give HTML, CSS & Javascript files once again to render

<img> tag to add images to websites. 
It is an inline and empty element, which means 
that it doesn't start on a new line and doesn't take
a closing tag
=====================================================
SECTION 2: Intro to HTML
HTML : HyperText Markup Language
 HyperText means link, When we clicked goes to other documents
 Extension is eiter .htm OR .html

Tags:
    heading : <h1></h1>
    h1 to h6.

    <h1 style="writing-mode:vertical-lr;">hello world</h1>
    -vertical text

    Line break/new line not closing tag/self closing tag
    <br> or <br /> in XHTML

    Horizontal Rule <hr>, self closing tag
    <hr size="3">
    eg.
        <center>
            <hr size="5" color="black" width="50%">
            <h1>Vivek Mahes Nikate</h1>
            <h3>by</h3>
            <h2>Mahes Arun Nikate</h2>
            <hr size="5" color="grey" width="30%">
            <hr size="3" noshade>
        </center>
    

HTML Boilerplate:   Simply the structure of writing HTML
<!DOCTYPE html>     - says reading document of HTML5 version
<html lang="en">    
    <head> contain info of website
    <meta> info of website
    <title> name displayed over tab bar
    <body> content of site goes in body

    <p contenteditable>This is paragraph</p>
    <p contenteditable="true">This is paragraph</p>
    <h1 contenteditable>Hello world..!</h1>
    -here the paragraph is editable now.

    changing the styles on page:
        <style contenteditable="true" style="display: block;">
            h1{
                color: red;
            }
        </style>
        -here you can change the value only, 
         you can't define the value for new tag or new property for that tag.
==================================================
<em> or <i> tag for italics always prefer to use <em> tag cause it conveys the meaning
<b> or <strong> for boldness of text always use strong.

semantic in HTML:A semantic element/tag clearly describes its meaning 
                 to both the browser and the developer
                 eg. <form> , <table> , and <article> - Clearly defines its content.

non-semantic tag:   <div> and <span> - Tells nothing about its content

-to center element use <center> tag or
    text-align:center;  or
    display: flex; then justify-content:center;

#Building Personal Site here..
Content in that
    *Unorder Listening
    eg
        <h3>Education</h3>
        <ul>
           <li>B-Tech in CSE with 88% aggregate.</li>
           <li>HSC with 81% grade</li>
           <li>SCC with 82%</li> 
        </ul>
    *Ordered List :
        also you can use attribute "type" to count items & "start" to start the count from that number start must be decimal numbern like 
        eg. <ol type="i" start="2"> or            
            <ol type="a"> or
            <ol type="A"> or
            <ol type="I">

    Value	Description
        1	Default. Decimal numbers (1, 2, 3, 4)
        a	Alphabetically ordered list, lowercase (a, b, c, d)
        A	Alphabetically ordered list, uppercase (A, B, C, D)
        i	Roman numbers, lowercase (i, ii, iii, iv)
        I	Roman numbers, uppercase (I, II, III, IV)

        <h3>Hobbies:</h3>
        <ol type="i" start="5">
            <li>Learning new things</li>
            <li>Listening Music</li>
            <li>3D Modeling</li>
            <li>Thinking</li>
        </ol>
    -------------------------------------------------------------------------------------
    Img tag:
        " ../../ " used here to locate my image which is 2 folder back from the current folder.
        if it is inside the folder then you need to describe the path like  folder1/folder2/imgName.png
        if file & image in same folder/location then just use img name

        <img src="../../Vivek.jpg" alt="Vivek's profile photo" width="100" height="100"> 
        <img style="border-radius:90%; border:7px solid rgb(182, 12, 216);">
        <img style="border-radius:10px; border:7px solid rgb(182, 12, 216);">
    -------------------------------------------------------------------------------------------
      Hyper Link:-
        here the target attribute used to open the page on new tab      
        <a href="https://www.capgemini.com/" target="_blank">Capgemini</a>
    ------------------------------------------------------------------------------------------
    table:
    cellspacing ="4" 
    <table border="4">
            <caption>Project 1</caption>
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr> 
                    <td>Project</td>
                    <td>Blood Donation Camp Management Syste</td>
                </tr>
                <tr>
                    <td>Client</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>Role</td>
                    <td>Developer</td>
                </tr>
                <tr>
                    <td>Tech. used</td>
                    <td>C#, .Net Framework, ASP.Net</td>
                </tr>   
            </tbody>
            <tfoot>
                <tr>
                    <td>Description </td>
                    <td>The main objective of the Blood donation camp 
                        management system is to manage the details of Blood, 
                        Donor, Blood Group, Blood Bank, Stock etc. It to create an 
                        efficient system for the donors, where they can get ideas 
                        about ongoing Blood Donation Camp timing.</td>
                </tr>
            </tfoot>
        </table>
        --------------------------------------------------------------------------------------
        form:-
            <form action="mailto:vivek.nikate@capgemini.com">
            <form action="page address">

        <input type="date">
        <input type="file">
        <input type="submit">
        <input type="email">
        <input type="range">
        <input type="time">
        <input type="button">
        <form>
            <label for="name">Your name:</label>
            <input type="text" required> <br>

            <label for="">Password</label>
            <input type="password" name="" id=""><br>

            <label for="">Color</label>
            <input type="color" name="" id="" required><br>
        </form>
        ------------------------------------------------

        " To submit the static pages on github..
          create the repo & upload the files on it
          then go to setting in that pages section choose main branch & 
          then click save to host the application live "

          Home page name must must "index.html" lowercase
==========================================================================================================
Video tag HTML:-
    <video 
            poster="http://placehold.it/1200x500" 
            height="300px" 
            width="500px"
            style="background-color:green;"
            //src="http://techslides.com/demos/sample-videos/small.webm"
            controls
            //type="video/mp4"
        >
        <source src="link" type="video/mp4" />
    </video>
       
    -Adding multiple picture according to screen size,
    <picture style="display: flex; justify-content: center;">
          <source 
               srcset="https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8cGVyc29ufGVufDB8fDB8fA%3D%3D&w=1000&q=80"
               media="(min-width:1200px)"
          >
          <source
               srcset="https://media.hswstatic.com/eyJidWNrZXQiOiJjb250ZW50Lmhzd3N0YXRpYy5jb20iLCJrZXkiOiJnaWZcL3BsYXlcLzBiN2Y0ZTliLWY1OWMtNDAyNC05ZjA2LWIzZGMxMjg1MGFiNy0xOTIwLTEwODAuanBnIiwiZWRpdHMiOnsicmVzaXplIjp7IndpZHRoIjo4Mjh9LCJ0b0Zvcm1hdCI6ImF2aWYifX0="
               media="(min-width:720px)"
          >
          <img src="https://upload.wikimedia.org/wikipedia/commons/a/a0/Pierre-Person.jpg" alt="Person" title="I'm person">
     </picture>
==========================================================================================================
NOTE:- if you don't give any styling to the page keep in mind that there is always 
        default styling given by browser. you can override it.

CSS: Cascading Style Sheets
    #Giving background color 
        <body bgcolor="hotpink">
        <body bgcolor="#FFD4B2">
        <body bgcolor="FFD4B2">
        <body style="background-color:crimson">

    1.Inline Styling 
    2.Internal Styling (in the head tag inside that style tag)
    3.External Styling (Adding link of styling file to head section of html page)

            hr{
                background-color: powderblue;
                border-style: dotted none none;
                            /* top (left right)  bottom */
                width: 5%;
                height: 1px;
                border-color: grey;
                border-width: 8px;   
            }

            hr{
                border-bottom: 10px dotted;
                border-top: none;
            }

    Syntax:
        Selector {
            property : value;
        }
        Selector means "whos property you want to change?"
        property means "what you want to change about that Selector?"
        value means " what value want  to give to that property?"
    
    h1{
    color: red;
    font-size: 150px;
    }

    HTML ELEMENT HAVE ONE ID ONLY BUT MAY HAVE MORE THAN ONE CLASSES
    CLASS NAME ID NAME ARE CASE SENSITIVE
    IMG HAS 2 CLASSES BELOW 1. becon2 & 2.CIRCULAR
    <img class="becon2 CIRCULAR" src="https://emojipedia-us.s3.amazonaws.com/thumbs/240/apple/118/bacon_1f953.png" alt="bacon-img">
    .becon2{
        background-color: rebeccapurple;
    }

    .CIRCULAR{
        border-radius: 40px;
    }

    -------------------------------------------------------------------------
    CLASS: -
    The .class selector selects elements with a specific class attribute.
    To select elements with a specific class, write a period (.) dot character, followed by the name of the class.

    <img class="becon2" src="https://emojipedia-us.s3.amazonaws.com/thumbs/240/apple/118/bacon_1f953.png" alt="bacon-img">            
    
     .becon2{
            background-color: rebeccapurple;
        }

    eg.
        In this example all HTML elements with class="center" will be red and center-aligned: 
        .center {
        text-align: center;
        color: red;
        }
        <p class="center">This paragraph will be red and center-aligned.</p>

    eg.2nd
        You can also specify that only specific HTML elements should be affected by a class.
        Example
        In this example only <p> elements with class="center" will be red and center-aligned:

        p.center {
        text-align: center;
        color: red;
        }
        p.center {
            text-align: center;
            color: red;
        }
        p.large {
            font-size: 300%;
        }

    <h1 class="center">This heading will not be affected</h1>
    <p class="center">This paragraph will be red and center-aligned.</p>
    <p class="center large">This paragraph will be red, center-aligned, and in a large font-size.</p> 


    -----------------------------------------------------------------------------------
    
    ID Selector:-
    The id selector uses the id attribute of an HTML element to select a specific element.
    The id of an element is unique within a page(once in a page), so the id selector is used to select one unique element!
    To select an element with a specific id, write a hash (#) POUND character, followed by the id of the element.
    eg.
        <p id="para1">Hello World!</p>
        #para1 {
                text-align: center;
                color: red;
            }
        
    --------------------------------------------------------------------------------------
    * Selector:-

    Select all elements, and set their background color to yellow:
        * {
            background-color: yellow;
        }
    eg.
        this gets applied to the complete body.
                
        * {
            background-color: yellow;
            font-size:20px;
            font-weight:bold;
            color:blue;
        }

    select all elements inside <div> elements and set their background color to yellow:
    div * {
           background-color: yellow;
        }
        
        <div class="intro">
        <p id="firstname">My name is Donald.</p>
        <p id="hometown">I live in Duckburg.</p>
        </div>
    --------------------------------------------------------------------------------------
    Adding Favourite Icon 
    <link rel="icon" href="../MySite/favicons/favicon.ico">
    <link rel="icon" href="../MySite/favicons/favicon.ico?v=2"> 
        -last parameter is optional like "?v=2" is called the version 2 for cached browser
    --------------------------------------------------------------------------------------
    <div> is a content division element, allows you to split or divide your content into 
        separate container's
    NOTE: To change the default margin of h1 & body tag by default given by browser, not mandatory to mention 
            unit(px) when value is 0.
            body{
                margin: 0;
            }
            h1{
                margin: 0px;
            }
    --------------------------------------------------------------------------------------
    CSS properties:
        .middle-container{
                height: 200px;
                width: 200px;
                background-color: rgb(255, 111, 135);
                border: 20px solid black;
                margin-left: 260px;
                text-align: center;
                border-top-left-radius: 20px;
                font-size: 30px;
                font-weight: bolder;
                color: white;
                border-bottom-right-radius: 30px;
            }
    ---------------------------------------------------------------------------------------
    //below styling will stop selecting the text from user end 
        & won't be able to copy the text
    <body>
        <h1>
            Hello world..!
        </h1>
    </body>
    
    body>h1{
        color:red;
        text-align: center;
        cursor: not-allowed;
        user-select:none;
    }
    ---------------------------------------------------------------------------------------
    Block elements in CSS:
        block elements are those who takes complete/whole width of screen on web page
        eg.
            header h1 to h6
            paragraph
            div
            list
            form
    Inline elements : takes space as much as they want for their height & width,
    eg. 
            span
            img
            anchors 
    NOTE: why we use block element instead of inline
        -> for inline element we can't mention the width as 
            that of block elements
        
        to change block to inline or viceversa then use 
        display property
        eg. 
        span {
            display:block;
        }
        or
        p {
            display:inline;
        }

        NOTE: to use both property inline & block use 
        property as
        eg. 
        p {
            display : inline-block;
        }
    ====================================================================================
    *quize answer to hide
    when you hide the element on screen like it never exists use 
    display : none property/ when we use this it don't gives its original space completely disappears
    p{
        display:none;
    }
    or
    you want to hide element but want to show empty space on screen then use visibility property
    p {
        visibility : hidden;
    }
===================================================================================
CSS Animation:-
    <h1>Hello world...!!</h1>

     h1{
        opacity: 0;
        transform: translateY(50px);
        animation: FadeUP 2s forwards;    
        /* forwards retain the last keyframe properties*/
      }

      @keyframes FadeUP{
        to{
          opacity: 1;
          transform: translateY(0);
        }  
      }
===================================================================================
  Position in CSS:
    4 types:
        1.Static
            all html element are static in Position by default, go along with HTML rule & keep the flow
        2.Relative:-
            Adding margin relative to the current position of object
            to make relative use position property first then decide by how much distance want to move the 
            div/image
            here image is relative posed & moved from the left edge by 50px to right side;
            & from top edge push to the bottom by 100px; & so far
            eg.
                img{
                     position:relative;
                     left:50px;
                     top:100px;
                     right:100px;
                     bottom:400px;
                }
        eg.
            HTML code:
                <div class="red">1</div>
                <div class="green">2</div>
                <div class="blue">3</div>
            CSS code:
                .red{
                    background-color:red;
                    height:100px;
                    width:100px;
                    display:inline-block;
                    position:relative;
                    left:400px;
                    top:100px
                }

                .green{
                    background-color:greenyellow;
                    height:100px;
                    width:100px;
                    display:inline-block;
                    position:relative;
                    right:100px;      
                }

                .blue{
                    background-color:blue;
                    height:100px;
                    width:100px;
                    display:inline-block;
                    position:relative;
                    right: 100px;
                }
        3.Absolute:
            Adding margin to it's parent element/ the element get out of the natural HTML render process.
            the original place will not there when we mention the position is Absolute
            the Absolute positioned element is dead for other element
            you can move anywhere on screen within it's parent.
            eg. 
                <div class="red">red</div>
                .red{  
                    background-color:red;
                    height:100px;
                    width:100px;
                    position:absolute;
                    bottom:50px;
                    right:50px;
                    top:100px;
                    left:200px;
                }
                here red block is going to set 50px marginal distance from bottom edge of parent & same for other.
            eg.
            HTML code:-
                <body>
                    <div class="red">Red</div>
                    <div class="blue">blue</div>
                    <div class="yello">Yellow</div>
                </body>
            CSS code:-
                body{
                    margin:0;
                }
                .red{
                    background-color:red;
                    text-align:center;
                    height:100px;
                    width:100px;
                    position:absolute;
                    top:200px;
                    left:200px;
                }

                .blue{
                    background-color:blue;
                    text-align:center;
                    height:100px;
                    width:100px;
                    position:absolute;
                    top:100px;
                    left:100px;
                }

                .yello{
                    background-color:yellow;
                    text-align:center;
                    height:100px;
                    width:100px;
                    position:absolute;
                    top:0;
                    left:0;
                }
    ----------------------------------------------------------------------------------------------------
        4.Fixed:
             <!-- here in this case the nav bar is fixed even if we scroll the page 
                    & we given the z-index to appear nav bar over the other content -->
             nav{
                position: fixed;
                width: 100%;
                background-color: aquamarine;
                left: auto;
                right: auto;
                font-size: xx-large;
                z-index: 1;
            }
            li{
                display: inline;
                margin: 30px;
                padding: 30px;
            }
            body{
                margin: 0;
            }
            <nav>
                <ul>
                    <li>Home</li>
                    <li>About</li>
                    <li>Contact</li>
                    <li>Login</li>
                    <li>Signup</li>
                </ul>
            </nav>
    -------------------------------------------------------------------------------------------
    margin: 0;      //for all sides;
    
    margin: 10px 20px; // 10px margin for top-bottom
                       // 20px margin for left-right

    margin: 12px 13px 14px; 
                        // 12px margin for top
                        // 13px margin for left right
                        // 14px margin for bottom   
    margin : 1px 12px 13px 14px;
              top right bottom left     
    ---------------------------------------------------------------------------------------------
    Fallback for font-family:-
        -here if Arial is present the use that font to render the site else go for next font
        or next is also not installed then go for next font again.
        more specific to less specific
         -font-family:Arial, Helvetica, sans-serif;
    ---------------------------------------------------------------------------------------------
    Favourite Icon on tab bar:
        put ?v=2 after icon name in href if icon not shows.
        rel is to be icon 
    <link rel="icon" href="../MySite/favicons/favicon.ico?v=2">
    ---------------------------------------------------------------------------------------------
    Font size:
        100% == 16px
        1em = capital M width(in older days) but now
        1em = 16px
        16px == 100% == 1em

        -if we put font size in px then it won't change when browser font size changes
         to change the font size of our site we need to implement the dynamically 
         changing font size 
         So use 'em' or '%' unit for font size to changable as per browser's font size

        -dynamic size depends & inherited from parent element
         else the static size like px does not depends on parent element or their size they are 
         contstant

        rem:- Root em  (recommended)
             This is like root size for font 
             ignore/ don't inherit the font size coming from parent.
        eg.
            font-size: 16rem
        NOTE:  MOSTLY USE THE rem UNIT FOR FONT-SIZE ie. most adaptable, useful, least error prone
    ---------------------------------------------------------------------------------------------------
    Line-height: without unit
        line-height:2
    --------------------------------------------------------------
    float property to float img or text
    eg. 
        float: left;    //float on left side
        float: right    //float on right side

        Never use the float property to position a element always use position property to 
        position a element.
        float use for the just wrap out the text 
    --------------------------------------------------------------
    clear property to clear the margin..
    eg. 
        clear: left;    //This is like anti- float property 
                        //clear means left side of that thing is clear 
        clear: right;
=========================================================================================================
#BootStrap :
    A Frotend Library/framework
    devleoped by Twitter for responsive applications
    just to give the class name to particular para it'll design it automatically
    CDN: - Content Delivery Network.
    
    Front-end : HTML, CSS, JavaScript, BootStrap
    Back-end  : .NET, PHP, Java, SQL, NodeJS, Ruby

    Basics classes of BootStrap:-
        btn, btn-primary, btn-dark, btn-danger, btn-outline-dark & btn-lg (large)
        navbar, bg-dark

    -To use BootStrap class need to download the style file or we need to ues the CDN link
     always try to use CDN cause it decreased the network latency increases the speed.
     
     CDN link:
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    while adding this link,
        this link must go before your css file's link.
    or download it & then use it, like 
        
        <link rel="stylesheet" href="path/styleFiles/bootstrap.css">
 ----------------------------------------------------------------------------------------
 before creating website make it's wireframe first
    1.https://balsamiq.com/
    2.https://sneakpeekit.com/
 ------------------------------------------------------------------------------------------
    BootStrap classes:- class="btn btn-primary"
                        class="bg-dark"
        primary         light
        secondary       success
        dark            info
        warning         link 
        danger

        class="btn btn-outline-primary"
        class="btn btn-outline-dark"
        class="btn btn-outline-success"
----------------------------------------------------------------------------------------------
navbar-brand class is used for company logo.
----------------------------------------------------
row, col = row  & column

-Full Screen total width is 12 box  (not responsive)
    col-6 means 50% of screen width
    col-3 means 25% of total screen width.

-Responsive column row
    col-md-6 => column medium 6
    md- medium screen
    lg- large screen
    sm- smaller screen
--------------------------------------------------------------------------------------------------
eg.
    <div class="row">
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            1
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            2
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            3
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            4
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            5
        </div>
    </div>

#2.
    <div class="row">
        <div class="col-6" style="border:2px solid; background-color:black;color:white;">col-6</div>
        <div class="col-3" style="border:2px solid; background-color:black;color:white;">col-3</div>
        <div class="col-2" style="border:2px solid; background-color:black;color:white;">col-2</div>
        <div class="col-1" style="border:2px solid; background-color:black;color:white;">col-1</div>
    </div>

#3.
    More responsive:-
    <div class="row">
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
    </div>

#4.
    <div class="row">
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
    </div>
---------------------------------------------------------------------------------------------------------------------------------
-container:- container class with some padding-margin.
            eg. class="container"

-container-fluid:- container-fluid takes full width of screen 
                    adjust according to the screen size.
            eg. class="container-fluid"
---------------------------------------------------------------------------------------------------------------------------
Always remember:
    #fff - white
    #000 - black
---------------------------------------------------------------------------------------------------------------------------
#Media-query breakpoint:
eg.
    @media <type> <feature>

    1) @media print {

    }

    2) @media screen (min-width:900px){
        //change things displayed
    }
    eg.
        @media (max-width:900px){
            h1{
                color:red;
            }
        }
        -> here the h1 will change color to red 
            when the width is 900 or less than 900
        
        @media (min-width:900px)
        {
            h1{
                font-size:5rem;
            }
        }
        -> here h1 will change its size when the minimum width must be 900 or more;
            like if the width of screen >= 900px then 
            increases the font size of h1 to 5rem.
    
    3) Multiple queries:-
        @media (min-width:700px) and (max-width:1000px){
            h1{
                color:red;
                font-size:4rem;
            }
        }
        ->
            here h1 will change its color & font-size when the
            minimum width is 700px & maximum width is 1000px

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    here, content of page should be get fit according to device-width.

    @media (min-width:400px){
        //This styles will get applied if the width is 400 or more than 400
    }

    or
    @media (width >= 400){
        //This styles will get applied if the width is 400 or more than 400
    }

    @media (width = 400)          //you can use any of this operator 
    @media (width <= 400)
    @media (width >= 400)

    #RANGE:
        @media(720px <=  width <= 1080px){
            //apply styles if width is between 720px to 1080px
        }

        in css words AND
        @media (min-width:720px) and (max-width:1080px){

        }

        OR use ','

        @media (min-width:720px), (max-width:1080px){

        }

    @media (orientation:landscape){
        //apply these styles if width > height
    }

    @media (orientation:portrait){
        //apply these styles if height > width
    }

Font awesome link:-
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
     
     font awesome working classes icon
     <i class="fa fa-twitter"></i>
      <i class="fa fa-facebook"></i>
      <i class="fa fa-instagram"></i>
      <i class="fa fa-envelope"></i>
---------------------------------------------------------------------------------------
As a programmer, we're always aspiring to be DRY.
D - Do not
R - Repeat
Y - Yourself
--------------
Opposite of dry is WET code.
W - We
E - Enjoy
T - Typing
-----------------------
Code Refactoring:-
    1.Readability
    2.Modularity
    3.Efficiency
    4.Length
---------------------------------------------------------------------------------------
1.Multiple Selector:

    Selector1, selector2,.. {
        //styles
    }
    eg.
        h1,  h2, h3, h4, h5, h6 {
            font-family: Arial;
        }
    
2.Hierarchical Selector:-
    -space is crucial here in between selector
    -first selector is parent selector & 2nd one is child selector

    -WHEN THERE IS SPACE BETWEEN SELECTORS THEN read it from right to left like below 
        selector2 is child of Selector1.

    Selector1 selector2{
        //style
    }

    eg.
        #title .container-fluid{
            padding:3% 5%;
        }
        -> here the the class container-fluid which are INSIDE the title ID will 
        get applied the padding of 3% for top-bottom & 5% left-right

    div h1{
        color:red;
    }
    -> here the h1 tags text color will be red only if then are inside the div tag

    container-fluid h1{
        color:red;
    }
    -> here the h1 heading will get the text color of red which are INSIDE class container-fluid.
    (colored red only when h1 is the child of container-fluid)

3.Combined Selector:- DOT(.) for Class
                      POUND(#) for ID

    -WHEN THERE IS NO SPACE BETWEEN SELECTORS read it from left to right
    
    Selector1.selector2{

    }

    Selector1.#ID_selector{

    }
    eg.
        h1.container1.title{
            color:red;
        }
        -here h1 have class container1 & title have the color red;

    eg.
        h1#title{
            color:red;
        }
        -> here its like   "h1 has an ID of title should have color of red"
------------------------------------------------------------------------------------------------------------------
HTML
    <div class="container1">
        <h1 class="title">Hello World..!!</h1>
    </div>
    <div class="container2">
        <h1 class="title">Good Bye World..!!</h1>
    </div>
CSS
    div.container1{
        color:red;      //here the container1's h1 will be red colored
    }
------------------------------------------------------------------------------------------------------------------------
inline styling > ID > class > html elements 

Priority:-  
            the last style will be applied.
            eg.
                h1{
                    color:red;
                    color:green;
                }
                ->here the h1 color first turn to red then it'll be green
                
        -classes have higher priority than HTML elements(h1, div, section, etc)
        -ID have higher priority than classes
        -inline styling has higher priority than ID

RECOMMENDED:
=FIRST CONSIDER USING CLASS INSTEAD OF GOING STRAIGHT TO AN ID,even if it only appears once.
=ID are also used for navigation purpose
=Try to apply only a single custom class to each of your elements
=Avoid inline styling at all costs.
===========================================================================================================================
#4 Pillar's of Web Design:
    1) Color Theory
    2) Typography
    3) User Interface (UI)
    4) User Experience (UX)
===========================================================================================================================
>>Sample Design made with canva:
https://www.canva.com/design/DAFYkEsiWUM/7fWPvRA2eHX4jhMVlvPB1A/view?website#4:hotel
===========================================================================================================================
#JavaScript(JS) :-  JavaScript uses camelCase (first letter lowercase next word letter will be uppercase)
    -ECMAScript(ES6)
    -JavaScript is Interpreted Language.
    -alert("Hello");
    -alert("Hello")
    -alert('Hello')

    -use console mode in chrome's inspect mode.
        use this to print something on console tab
        console.log("Hello world");

    -use this to print on page.
        a='Vivek'
        document.write(a);
    
    -to print h1 tag on page
        document.write("<h1>Hello world..!</h1>");
    
    -styling element:-
        document.write("<h1 style=\"color:green\">Hello world..!</h1>");            //here BackSlash used to escape the quotation
        document.write("<h1 style='color:green'>Hello world..!</h1>");

        to add multiple instructions use shift for jumping on next line in Console of chrome
            line 1      alert("Vivek")          //Shift + enter
            line 2      alert("Nikate")

    practice:   
            console.log("hello world");
            alert("Very nice");
            v = prompt("Enter your name ");
            alert("hey there\n Hello "+v);

    -to create a sample JS file go to chrome inspect in that side to Console tab,    SOURCE section, in that SNIPPETS
    eg.
        22+55
            77
        22
            22
        alert(2+5)
            undefined
        typeof(22)
            'number'
        typeof('vivek')
            'string'
        typeof(true)
            'boolean'
------------------------------------------------------------------------------------------------------------------------
Prompt in JS:
    eg. 
            -prompt("What is your name?",'Here Default name');
            -prompt("What is your name?"    );
        or
        displaying user name on screen:
            -alert(prompt("What's your name?")); 
        or
        a = prompt("What's is your name?");
        alert(a)

    eg.
        -var myName = "Vivek"; 
        -myName
            'Vivek'
        -alert(myName);
------------------------------------------------------------------------
sample code:
            MyName = 'Vivek';
            Y = prompt("Your name?");
            alert("Hello, My name is "+MyName+" welcome to my course "+Y+"!")
------------------------------------------------------------------------
JavaScript variable:
    1)var
    2)let
    3)const
------------------------------------------------------------------------
    function test() {
    var a = "3";
    var b = "8";
    
        // [a,b] =[b,a]
        
        //a = a^b;
        //b = a^b;
        //a = a^b;

        //let c = a;
        // b = a;
        // a = c;


        console.log("a is " + a);
        console.log("b is " + b);
    }
--------------------------------------------------------------------------------------------------------------------------------
#JavaScript variable Naming:
    var myname = "Vivek"
    var myname = 'Vivek'
    var myname = 123

    -var Name should start with alphabates or $ or _
        eg.
            name, $one, _one 
    -var Name should NOT start with number
    -var Name can contain $ & _ sign only. not other special symbols
    -var Name can't contain space in between
--------------------------------------------------------------------------------------------------------------------------------
#String in JS:
    1.Concatenation:
        name= 'Vivek'
        msg = 'Hello '
        alert(msg+" there, "+ name)
    
    2.Length of string:
        var name = 'nikate';
            console.log(name.length)        //6        
        var name = 'vivek'
            console.log(name.length)        //5
    
    3.Text counter:
        var n =140;
        a = prompt("Enter text")
        alert("Your have written "+(a.length)+" characters, You left with "+ (n-a.length))

        n=10
        a = prompt('hey what\'s your name')
        alert("Your name is "+a.length+" character long.!!\n You left with " + (n-a.length) +" characters!!")
    
    COMMENTING IN JS:
        //SINGLE LINE COMMENT
        /*
            Multi line comment.
        */

    4.Slice:
        Syntax:
            variableName.slice(x,y)

        a = prompt("Information:");
        alert(a.slice(0,20));
        alert(a);
        alert("You written "+a.length+" characters");

        slice(x,y)  - x including
                      y excluding
        
        var v = 'vivek';
        v.slice(0,3);           //viv

        //to find out total no.of character we get in slice function just 
        //do upperbond-lowerbond
        //ie. here 3-0 = 3 character
        
        slice(2,8)      //8-2 = 6 character we get here.
        
        //using just 10 character
        alert(prompt("Information").slice(0,10))

        NOTE: TO SKIP FIRST LETTER OF STRING USE        
                var a = 'Vivek';
                console.log(a.slice(1))             //ivek

                console.log("Vivek".slice(1))       //ivek
    
        Note:
            1.
            charAt():
            The charAt() function returns the character at a given position in a string.

            Syntax:

            string.charAt(index)
            Example:

            const str = 'flexiple';
            const str2 = str.charAt(0);
            console.log(str2);

            //Output: f

            2.
            toUpperCase()
            The toUpperCase() function converts all the characters of an input string to uppercase

            Syntax:

            string.toUpperCase()
            Example

            const str = 'flexiple';
            const str2 = str.toUpperCase();
            console.log(str2);

            //Output: FLEXIPLE

    eg.
        var name = prompt("Enter your name:")
        alert("Hello "+name.slice(0,1).toUpperCase()+name.slice(1))

        -------------------------------------------------------------------|
       | Parameter |	Description                                        |
       | ----------|-------------------------------------------------------|
       | start	   |  Optional.                                            |
       |           |  Start position. Default is 0.                        |
       |           |  Negative numbers select from the end of the array.   |
       | ----------|-------------------------------------------------------|
       | end       |  Optional.                                            |           
       |           |  End position. Default is last element.               |
       |           |  Negative numbers select from the end of the array.   |
        -------------------------------------------------------------------|

    TO MAKE FIRST LETTER OF SENTENCE CAPITAL:

    str = "hello my name is vivek nice to meet you.!"
    console.log(str)

    arr = str.split(" ")

    for(var i=0;i<arr.length;i++){
        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);
    }

    str = arr.join(" ");

    console.log(str)        

    Output:
            hello my name is vivek nice to meet you.!
            Hello My Name Is Vivek Nice To Meet You.!
    

        //viVEK to fix this thing

        name = prompt("Enter your name:");          
        alert("Hello "+name.charAt(0).toUpperCase()+name.slice(1).toLowerCase())


        function myFun(s) {
            alert("Hello "+s.slice(0,1).toUpperCase()+s.slice(1).toLowerCase());
        }

        myFun('viVeK')              //Vivek
        myFun('priyANKA')           //Priyanka
--------------------------------------------------------------------------------------------------------------------------------
Arithmatic Operator in JS:
    +, -, *, /, %, **

#Dog & Human Age Calculator:
        dogAge = prompt("Enter dog age?");
        humanAge = (dogAge-2)*4 + 21
        alert("Your dog is "+humanAge+"years old in human years")
--------------------------------------------------------------------------------------------------------------------------------
Increment Operator: ++
Decrement Operator: --
eg.
    var c = 4;
    c++;        //5
    
    var  v = 5;
    v--;       //4
--------------------------------------------------------------------------------------------------------------------------------
Assignment Operator:
    =     Assign
    +=    Addition
    -=    Subtract
    *=    multiply
    /=    Divide
    %=    Modulo
    **=   Exponential
eg.
    var a = 4;
    a *= 2;     //a =a *2     
                //8
--------------------------------------------------------------------------------------------------------------------------------
#Function in JS:
    1.Function without parameter with return value
        function fun1(){
            return 'something../anything';
        }

    2.Function with parameter with return value
        function fun1(a,b){
            return a+b;
        }
        
    3.Function without parameter without return value
    4.Function with parameter without return value
  
    function HumanAge(age) {
        var HumanAge = (age-2)*4 +21;    
        alert("Your dog's age in HumanAge:"+HumanAge)
    }

    HumanAge(5)         // Generates alert like :-> Your dog's age in HumanAge:33years
    HumanAge(7)         // Generates alert like :-> Your dog's age in HumanAge:41years
--------------------------------------------------------------------------------------------------------------------------------
function example:
    function getMilk(price) {   
        console.log("leaveHouse");
        console.log("You have only "+ price +" So, You can get only "+(price/5) +" bottles of milk");
        console.log("enterHouse");
        alert("you got "+(price/5)+" milk bottle")
    }

    getMilk(50);
    getMilk(8);

    *Rounding values:
        price = 89;
        alert("you got "+ ~~(price/5)+" milk bottle")               //use ~~ double tilde to round the value in JS
        alert("you got "+ Math.floor(price/5)+" milk bottle")       //use floor method round the value in JS
--------------------------------------------------------------------------------------------------------------------------------
    #Confirm in JS :-

    <body>
        <p>Click the button to display a confirm box.</p>
        <button onclick="confirmation()">click</button>
        <p id='demo'></p>

        <script>
            function confirmation(){
                var a = confirm('Press OK..!!');
                if(a == true)
                    document.getElementById('demo').innerHTML = 'Task Executed successfully✔';
                else
                    document.getElementById('demo').innerHTML = 'Task Halted.❌';
            }
        </script>
    </body>
--------------------------------------------------------------------------------------------------------------------------------
eg.
    function lifeInWeeks(age) {

        yearLeft = 90- age;
        days = 365* yearLeft;
        weeks = 52*yearLeft;
        months = 12*yearLeft;

        console.log(`You have ${days} days, ${weeks} weeks, and ${months} months left`)
    }
    lifeInWeeks(26)
    //Output:   
        You have 23360 days, 3328 weeks, and 768 months left
--------------------------------------------------------------------------------------------------------------------------------
eg.
    function bmiCalculator(weight,height){
        // return weight/(height*height);   
        // return weight/Math.pow(height,2);                //Power Function
        return Math.round(weight/Math.pow(height,2));       //round function to round the values
    }
--------------------------------------------------------------------------------------------------------------------------------
#Random Number Generator:
    n = Math.random();
    console.log(n)
    
    -Generates 16 digit random num between 0-0.999-999-999-999-999-9
    -never will be 1.
    eg.
        Generate num 1 to 10;
        n = Math.random()*10;
        console.log(Math.floor(n)+1)        //1 to 10
        console.log(~~n)                //0 to 9

    eg. Bonding random function to Generate 1 to 6 six number only.
        n = Math.random();
        to6 = ~~(n*10+1) % 7 +1;        //double tilde (~ ~) will round the value
        console.log(to6);               //multiplying by 10 will Generate num between 0 to 9
                                        //Added 1 to generate 1 to 10 
                                        // modulo Operator with 7 will give remainder between 0 to 6
                                        //to Avoid 0 in remainder, in last intentionally added the 1
                                        //will generate the random num between 1 to 6 exacly
         n = Math.random();
         n = n*6;               //to generate the number between 0 to 5 to multiplied with 6
         n = Math.floor(n)+1;
         console.log(n);
--------------------------------------------------------------------------------------------------------------------------------
#Love Calculator in JS:
eg.
    prompt("Enter your name:");
    prompt("Enter your crush's name:")

    n = Math.random();
    n = Math.floor((n * 100) + 1)
    alert(`Your love story of chance ${n}%`);
    alert('Your love story of chance'+n+'%');   
    alert('Your love story of chance\'s '+n+'%');           //to escape the quote use back slash 
    --------------------------------------------------------------------------------------
    a = prompt("Enter your name:");
    b = prompt("Enter your crush's name:")

    n = Math.random();
    n = Math.floor((n * 100) + 1)
    alert('Your love story of '+a+' & '+b+' having a chance\'s of '+n+'%');
--------------------------------------------------------------------------------------------------------------------------------
Conditional Statement:
    a = prompt("Enter your name:");
    b = prompt("Enter your crush's name:")

    n = Math.random();
    LoveScore = Math.floor((n * 100) + 1)

    if(LoveScore >80)
        alert(`${a} & ${b} You both are crazy about each other, your LoveScore is ${LoveScore}%`)
    else
        alert(`${a} & ${b} Your LoveScore is ${LoveScore}%`)
--------------------------------------------------------------------------------------------------------------------------------
Comparator Operator:
    <, >, <=, >=, ==, ===, !=, !==, ?
    --------------------------------------
    ==	equal to
    ===	equal value and equal datatype
    !=	not equal
    !==	not equal value or not equal datatype
    >	greater than
    <	less than
    >=	greater than or equal to
    <=	less than or equal to
    ?	ternary operator

    eg.
        a =10
        b ='10'

        if(a == b)
            console.log('Same')     
        else
            console.log('not Same')

        //Output Same       == double equal don't check for data type. just checks value

        
        if(a === b)
            console.log('Same')
        else
            console.log('not Same')     

        //Output not Same       === triple equal checks for value & data type 

    ----------------------------------------
Logical Operator:

    &&	logical and
    ||	logical or
    !	logical not
eg.
        a = prompt("Enter your name:");
        b = prompt("Enter your crush's name:")

        n = Math.random();
        LoveScore = Math.floor((n * 100) + 1)

        if(LoveScore >80)
            alert(`${a} & ${b} You both are crazy about each other, your LoveScore is ${LoveScore}%`)

        if(LoveScore>=30 && LoveScore <=80)
            alert(`${a} & ${b} Your LoveScore is ${LoveScore}%`)
            
        if(LoveScore<30)
            alert(`${a} & ${b} Your LoveScore is ${LoveScore}%\n You both together like Oil & Water!`)
--------------------------------------------------------------------------------------------------------------------------------
#Leap year:-
    if(year%4 === 0)
            if(year%100 !== 0)
                console.log('Leap year.');
            else
                if(year%400 === 0)
                    console.log('Leap year.');
                else
                    console.log('Not leap year.');
        else
            console.log('Not leap year.');
--------------------------------------------------------------------------------------------------------------------------------
Bitwise     Operator:
    &	    AND	                    5 & 1	0101 & 0001 	0001	 1
    |	    OR	                    5 | 1	0101 | 0001 	0101	 5
    ~	    NOT	                    ~ 5	    ~0101       	1010     10
    ^	    XOR	                    5 ^ 1	0101 ^ 0001	    0100	 4
    <<	    left shift	            5 << 1	0101 << 1	    1010	 10
    >>	    right shift	            5 >> 1	0101 >> 1	    0010	 2
    >>>	    unsigned right shift    5 >>> 1	0101 >>> 1	    0010	 2
--------------------------------------------------------------------------------------------------------------------------------
#Arrays:    

    var a = [];

    a=[1,2,3,4,5,6,7,8,9,10];
    console.log(a);
    console.log(a.length);

    for(var i=0;i<a.length;i++)
        document.write(a[i]+"<br />");

    document.write("The 2nd item in list :"+a[1]+"<BR>");
    //array starts counting from 0
    document.write(`The last forth in list :${a[3]} <br/>`);

    document.write(`The last item in list using length method :${a[a.length-1]} <br/>`);
    document.write(`The last item in list using slice :${a.slice(-1)}`);

    NOTE:   To access the last element in array 
            3 ways are there.

            1) arr[arr.length -1]   will give the last index put that in square of array to get element {13.798ms to execute}
            2) arr.slice(-1);       will give the last element.                                         {8.839ms to execute}   
            3) arr.pop();           will delete the last element in array & reduce the length by 1      {0.138ms to execute}
--------------------------------------------------------------------------------------------------------------------------------
#Arrays eg.
    a=[1,2,3,4,5,6,7,8,9,10];
    h =parseInt(prompt("enter your num :"));        //use parseInt method for conversion from other datatype to INT.

    if(a.includes(h))
        alert("Welcome to the party!!");            //includes method will return true if it contain the value else return false. 
    else
        alert("Sorry.!\n Next time.");

    OR
    #using function:

    function Checker(h) {  
    a=[1,2,3,4,5,6,7,8,9,10];
    //h =parseInt(prompt("enter your num :"));

    if(a.includes(h))
        alert(h+" Welcome to the party!!");
    else
        alert(h+" Sorry.!\n Next time.");
    }

    Checker(1)
    Checker(2)
    Checker(3)
    Checker(4)
    Checker(5)
    Checker(10)
    Checker(11)
    Checker(21)
    Checker(144)
--------------------------------------------------------------------------------------------------------------------------------
#FizzBuzz Code In JS:
Q.1 - 100 number if divisible by 3 Fizz if divisible by 5 Buzz if both then FizzBuzz
    for(var i=1;i<=100;i++)
        if(i % 3 === 0 && i % 5 === 0)
            document.write("FizzBuzz <br/>");
        else if(i % 3 === 0)
            document.write("Fizz <br/>");
        else if(i % 5 === 0)
            document.write("Buzz <br/>");
        else 
            document.write(i+"<br/>");
--------------------------------------------------------------------------------------------------------------------------------
Typing Animation using JavaScript:
    CDN :-
    <script src="https://unpkg.com/typed.js@2.0.132/dist/typed.umd.js"></script>
    
    <div style="padding: 50px;line-height: 30px;">
          <span class="typed"></span>
          <br>
          <span id="typed"></span>
          <br>
          <input type="text" name="" id="placer">
     </div>
     
     <script>
          //for class selector
          var typed = new Typed(".typed", {
               strings:['Vivek',"Mahesh",'Nikate','Nikate Vivek Mahesh','Nikate Rohini Mahesh'],
               typeSpeed: 10,
               backSpeed: 60,
               cursorChar: '/',
               loop:true,
               // smartBackspace:true //default
          });
          
          //for Id selector
          var typed = new Typed("#typed", {
               strings:['Vivek',"Mahesh",'Nikate','Nikate Vivek Mahesh','Nikate Rohini Mahesh'],
               typeSpeed: 100,
               backSpeed: 60,
               cursorChar: '_',
               loop:true,
               // smartBackspace:true //default
          });

          //for input placeholder
          var n = new Typed("#placer",{
               strings: ['Some strings without', 'Some HTML', 'Chars'],
               typeSpeed: 30,
               backSpeed: 0,
               attr: 'placeholder',
               bindInputFocusEvents: true,        //bindInputFocusEvents does when we click to input tag the animation gets pause for while
               loop: true
          });
     </script>
--------------------------------------------------------------------------------------------------------------------------------
#Array Push & Pop methods:
    arr = [];

    //to Insert element at LAST in array use PUSH method
    arr.push(1);
    arr.push(2);
    arr.push('vivek');
    arr.push(true)

    console.log(arr)
    console.log(arr.length)

    //to Delete LAST element in array use POP method
    arr.pop()
    arr.pop();
    console.log(arr)
    console.log(arr.length)

    //Output:
        (4) [1, 2, 'vivek', true]
        4
        (2) [1, 2]
        2
--------------------------------------------------------------------------------------------------------------------------------
#
    eg.Whenever we call the function it adds next num to the array.
    var i=1;
    function FizzBuzz() {
        arr.push(i);
        i++;
        console.log(arr)
    }
    
    //Output:   
        FizzBuzz()
            [1]
        FizzBuzz()
         (2) [1, 2]
        FizzBuzz()
         (3) [1, 2, 3]
        FizzBuzz()
         (4) [1, 2, 3, 4]

#Advance:
    var arr= [];
    var i=1;
    function FizzBuzz() {
        if(i % 3 === 0 && i % 5 === 0)
            arr.push("FizzBuzz");
        else if(i % 3 === 0)
            arr.push("Fizz");
        else if(i % 5 === 0)
            arr.push("Buzz");
        else
            arr.push(i);
        console.log(arr);
        i++;
    }

    FizzBuzz()
      [1]
    undefined
    FizzBuzz()
      (2) [1, 2]
    undefined
    FizzBuzz()
      (3) [1, 2, 'Fizz']
    undefined
    FizzBuzz()
      (4) [1, 2, 'Fizz', 4]
    undefined
    FizzBuzz()
      (5) [1, 2, 'Fizz', 4, 'Buzz']
    undefined
    FizzBuzz()
      (6) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz']
    undefined
    FizzBuzz()
      (7) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7]
    undefined
    FizzBuzz()
      (8) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8]
    undefined
    FizzBuzz()
      (9) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz']
    undefined
    FizzBuzz()
      (10) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz']
    undefined
    FizzBuzz()
      (11) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11]
    undefined
    FizzBuzz()
      (12) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz']
    undefined
    FizzBuzz()
      (13) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13]
    undefined
    FizzBuzz()
      (14) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14]
    undefined
    FizzBuzz()
      (15) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz']
--------------------------------------------------------------------------------------------------------------------------------
#Game:
    function whosPaying(names) {        
            
            //Write your code here.
            var n = Math.random();      //generate random num
            var L = names.length;       
            
            n = n * L;                  //generate random num between 0 to length of array-1
            var random = Math.floor(n); //rounds that num

            return `${names[random]} is going to buy lunch today!`;
        }
--------------------------------------------------------------------------------------------------------------------------------
#Control Statement:
    1)While loop:
        Syntax:
            while(condition == true){
                    //execute this
            }
        eg.
            var count =100;
            while(count>=0){
                if(count == 1)
                    document.write(`${count} bottles of beer on the wall, ${count} bottles of beer. Take 1 down, pass it around, no bottles of beer on the wall <br />`);
                else
                    if(count == 0)
                        document.write(`no more bottles of beer on the wall,no more bottles of beer. Go to store & buy some more, 99 bottles of beer on the wall <br />`);
                    else    
                        document.write(`${count} bottles of beer on the wall, ${count} bottles of beer. Take 1 down, pass it around, ${count-1} bottles of beer on the wall <br />`);
                count--;
            }
    
    2)For loop:
        for(var i=0;i<3;i++){
            //Execute this
        }
        eg. 
            Fibonacci Series:-
                var cur = 1, pre = 0;
                var arr =[];
                n = parseInt(prompt("Enter n::"));
                    var n2 = n+2;
                    var temp;
                    for(var i=0;i<n;i++){
                        if(n2>n){
                            arr.push(i);
                            n2--;
                        }
                        else{
                            temp = pre + cur;
                            arr.push(temp);
                            pre = cur;
                            cur = temp;
                        }
                    }
                console.log(arr);
                
                var cur = 1, pre = -1;
                var arr =[];
                var temp;
                for(var i=0;i<n;i++){
                        temp = pre + cur;       
                        arr.push(temp);         
                        pre = cur;              
                        cur = temp;             
                }
                console.log(arr)
--------------------------------------------------------------------------------------------------------------------------------
#DOM (Document Object Model):-
eg. Alert pop up after page loaded
    <body onload="alert('Page Loaded')">
        <h1>Hello World.!</h1>
    </body>

#JavaScript has 3 way to add script:
    1)Inline Scripting (Adding script in html tags)
        -its not modular
        -its difficult to debug
        -also it is not a good practice

    2)Internal Scripting(Putting all scripts inside script tag at the end of BODY tag)
        -Good practice to put script (script file) tag at the ending of body tag.
        -& Good practice to put CSS file in head section of page. 
         if we put inside body at the end then it gets loaded at last & start changing all styling after site loaded.

        -STYLES MUST BE LOADED FIRST BEFORE THE SITE LOADS
        -SCRIPTS MUST ENABLED AFTER COMPLETE COMPLETE SITE LOADING IS DONE. 
        eg.
            <head>
                <meta charset="UTF-8">
                <!-- Always remember put the style sheets or CSS files link inside head section -->
                <link rel="stylesheet" href="./styles.css">
                <title>DOM</title>
            </head>
            <body onload="alert('Page Loaded')">        //inline Scripting
                <h1>Hello World.!</h1>

                <script src="path/path"></script>       //internal Scripting before ending body tag
                <script src="path/path"></script>       //internal Scripting before ending body tag
            </body>

    3)External Scripting(Putting all scripts to another file, JS file & adding link of file at ending of body tag)        
            <!-- inline scripting -->
            <body onload="alert('Page Loaded')">            //when page loaded fully then this alert generated    
                <h1>Hello World.!</h1>

                <!-- internal script -->
                <script type="text/javascript">         
                    alert('Hello World..!')                 //this will executed before below code is going to execute
                </script>               

                <!-- external script  -->
                <script src="./index.js"></script>          //at the end this will get executed
            </body>
--------------------------------------------------------------------------------------------------------------------------------
JS Sample functions:
    -innerHTML/innerText are same you can use innerText instead innerHTML
    -or also you can use textContent;

    innerHTML - litterally work work as that of name. 
                it gives all the content between that particular tag.
        eg.
                <h1>
                    <strong>Hello world</strong>
                </h1>

                document.querySelector('h1').innerHTML;
                    //it will give     
                    //<strong>Hello world</strong>

    This is how the ouput looks like for following:
    
        <h1 id="demo">
            <strong>
                Hello
            </strong>
        </h1>
    ------------------------------------------------------------------------------
    Changing text/ text manipulation:-
    ------------------------------------------------------------------------------
        1)textContent used:
                        spacing & actual content will be given
                document.querySelector('h1').textContent;
    ouput:-         '\n      \n        Hello\n      \n    '

                document.querySelectorAll('li')[1].textContent='<b>TextContent</b>';
                    //won't work with tag 
                        all content will get displayed as it is on screen like this <b>TextContent</b>

    ------------------------------------------------------------------------------
        2)innerHTML used:
                        all the thing between mentioned tag will be given
                document.querySelector('h1').innerHTML;
    ouput:-         '\n      <strong>\n        Hello\n      </strong>\n    '

               document.querySelectorAll('li')[1].innerHTML='<b>innerHTML</b>';
                        //work with HTML tags
                        document.querySelectorAll('li')[1].innerHTML='<b>innerHTML</b>';
    ------------------------------------------------------------------------------
        3)innerText used:   just gives the text between the tags 
                            the actual content
                document.querySelector('h1').innerText;
    ouput:-         'Hello'

                document.querySelectorAll('li')[1].innerText='<b>innerText</b>';
                    //won't work with tag 
                        all content will get displayed as it is on screen like this <b>innerText</b>
----------------------------------------------------------------------------------------------------------------------------------

    <h1 id="text">Hello world..!!</h1>

    function ButtonClick(){
        document.getElementById('text').innerHTML = "Hey, Hacker..!!"
    }
    function ChangeColor(){
        document.getElementById('text').style.color = 'red';
    }

    function ChangeTextBack(){
        document.getElementById('text').innerHTML = "Hello World..!";
    }

    function ChangeColorOther(){
        document.getElementById('text').style.color='black';
    }

    function GeneratePop(){
        alert("Hey, Hacker..!\n How are you...?");
    }
--------------------------------------------------------------------------------------------------------------------------------
-Everything that is contained inside your HTML document is contained in an object call the document.
    -in chrome developer tool
    -console tab give this input

    -document;          //this give complete html document
    //Output:
        <html>
            <head>
                <title></title>
            </head>
            <body></body>
        <html>

    -document.firstElementChild;       // <html>
    -document.firstElementChild.firstElementChild   //firstChild's first child
        <head>
    
    -document.firstElementChild.lastElementChild;     //last element of tag will get displayed on console.
    
    -document.firstElementChild.lastElementChild.firstElementChild;
        //this will display the child of particular element.

    -we can manipulate using above methods
    REFERENCE-1:-
            <html>
                <head></head>
                <body style="background-color: rgb(255, 224, 230);">
                    <h1>Hello World...!!</h1> 
                <body>    
            </html>
    -------------------------------------------------------------------------
    -In querySelector we can pass 
        HTML tag names,
        class name,         //when giving class name specify '.' sign
        ID also.            //when giving ID name specify '#' sign

        BUT querySelector SELECTS ONLY THE FIRST ELEMENT OF ALL MATCHING CONDITIONS.
    eg.
            document.querySelector('h1');                   //select first element whos tag h1 
            //    <h1 id=​"demo">​Hello​</h1>​

            document.querySelector('#demo');                //Selects the elements having ID demo   
            //   <h1 id=​"demo">​Hello​</h1>​                      //we gave the ID to one element so here also querySelector choose one element only.
    
            document.querySelector('.item');
            //    <li class=​"item">​::marker​<a href=​"https:​/​/​www.google.com">​Google​</a>​</li>​


    -TO SELECT ALL ELEMENT WHO SATISFIES THE CONDITIONS OF querySelector, use querySelectorAll instead querySelector only.
    -In querySelectorAll for selecting particular element always mention the index of that element
    -also you can calculate the length of querySelectorAll array
        
        document.querySelectorAll('.item').length;

        document.querySelectorAll('.item');
            //NodeList(3) [li.item, li.item, li.item]0: li.item1: li.item2: li.itemlength: 3[[Prototype]]: NodeList
        
        document.querySelectorAll('.item')[0];  //selecting specific element.

    -Also in querySelector or querySelectorAll we can pass multiple selectors.
    document.querySelector('#list a')           //selects element having anchor tag inside ID 'list'

    var heading = document.firstElementChild.lastElementChild.firstElementChild;
   
    from REFERENCE 1 (Line num 1915)
    {    
        document's firstElementChild is html
        html's lastElementChild is body
        body's firstElementChild is h1
        so here heading will point to h1
    }
    heading;
    // <h1>Hello World...!!</h1> 

    heading.innerHTML = "Hello, Hacker..!!"
    'Hello, Hacker..!!'

    heading.style.color = 'blue';

    document.querySelector('h1').style.fontStyle='italic';
    heading.style.fontFamily = 'fantasy';

    //for input selector,
    document.querySelector("input").click();        //input will gets clicked automatically

    document.querySelector('h1').innerHTML = "M Nikate";
    'M Nikate'

    document.querySelector('h1').innerText = "V. M. Nikate";
    'V. M. Nikate'
--------------------------------------------------------------------------------------------------------------------------------
#Method & function:
    Method has to be associated with an objects, while calling method we have to use the dot operator.
        
        -car is a class C is object.
        C.drive();      //calling method.
        .click();

    function we can call directly, without using object.

    properties don't need to put parenthesis, & we can call using dot operator
        eg.
            .innerHTML
            .style.color
            .firstChild
        & we set using = (Assignment operator)
            selector.innerHTML = 'something';           //setting
            selector.innerHTML;                         //getting
--------------------------------------------------------------------------------------------------------------------------------
#When using HTML tree generator:- 
    if it is just showing the loading text on screen.
    or just load then 
    -right click
    -manage extension
    -in that setting tabs "Allow access to file URLs" enable this.
    STARTS WORKING.
--------------------------------------------------------------------------------------------------------------------------------   
    <!DOCTYPE html>
    <html lang="en" dir="ltr">
        <head>
            <meta charset="utf-8">
            <title>My Website</title>
            <link rel="stylesheet" href="styles.css">
        </head>
        <body>
            <h1>Hello</h1>
            <input type="checkbox">
            <button style=":active color:red;">Click Me</button>
            <ul>
            <li class="list">
                <a href="https://www.google.com">Google</a>
            </li>
                <li class="list">Second</li>    
                <li class="list">Third</li>
            </ul>
        </body>
    </html>

    var ThirdListItem = document.firstElementChild.lastElementChild.lastElementChild.lastElementChild;  
    ThirdListItem.innerHTML = 'Vivek Mahesh Nikate';
    ThirdListItem.style.color= '#A61F69';
    ThirdListItem.style.fontSize = "3em";
    ThirdListItem.style.fontStyle='italic'
    ThirdListItem.style.fontWeight='bolder'
--------------------------------------------------------------------------------------------------------------------------------
#selecting element with JS:
In JS single or double quote both work fine choose whatever you want 
    
    1)document.getElementById('id of element')                               //Selects single element in document
        eg.
            document.getElementById('text').innerHTML = "Hey, Hacker..!!"

    2)document.getElementsByTagName('html tag here')          //selects more than one element (in array)

    3)document.getElementsByClassName("html tags class name here")          //selects more than one element(like array)
        eg.
                document.getElementsByClassName('item')[0].innerHTML;   //give the content in that tag.

                //To assign value
                document.getElementsByClassName('item')[0].innerHTML = 'Vivek Nikate';

Perform this operation on console of chrome developer tool.

    1)getElementsByTagName('tag_here') method:
        -this getElementsByTagName method give Output as an array.

        document.getElementsByTagName('li');        //this will display all the li item on page in array form.
            HTMLCollection(4) [li.list, li.list, li.list, li.list]
        
        document.getElementsByTagName('li').length          //Length of array 4
        
        document.getElementsByTagName('li').style.color = 'purple'; ❌
            //above won't work ❌, cause this is array so need to select specific element, like below.

        document.getElementsByTagName('li')[1].style.fontSize= '3em';
        document.getElementsByTagName('li')[1].style.color= 'purple';
    
        document.getElementsByTagName('li')[2].innerHTML = 'Last Item';
        'Last Item'
        document.getElementsByTagName('li')[2].innerText = '2nd time changed';
        '2nd time changed'
--------------------------------------------------------------------------------------------------------------------------------
#challenge: 
    changing the color of anchor tag Having the ID 'list' as parent & 'a' tag is child
    here 'a' tag is contained within the another tag whos ID is 'list'

        document.querySelector('#list a').style.color = 'red';
        document.querySelector('#list a').style.fontSize = '2em';

    changing the color of anchor tag only whos class is item.
    document.querySelector('.item a').style.color= 'red';

THIS ALL ABOVE PROCESS OF SELECTING ELEMENT USING Document IS CALLED SELECTING ELEMENTS USING DOM.
--------------------------------------------------------------------------------------------------------------------------------
Modifying the button properties: 
    check REFERENCE DOM file

    document.querySelector('button').style.backgroundColor = 'yellow';
    document.querySelector('button').style.fontSize = '2rem';
    document.querySelector('button').style.margin = '10px 20px 30px 40px';
    document.querySelector('button').style.margin = '15px';
    document.querySelector('button').style.border = '2px solid crimson';
    document.querySelector('button').style.borderRadius = '14px';
--------------------------------------------------------------------------------------------------------------------------------
#classList in JS:- 
        -we can add class to the html tag using JS.
        -3 methods are there.
        -add        //adds class to the particular tag
        -remove     //removes the class from that particular tag
        -toggle     //reverse the situation if the class is already added then removes it     
                        else it adds that class to that tag.

    document.querySelector('button').classList;         //checking how many class applied to the button tag.
    DOMTokenList ['btn', value: 'btn']

    document.querySelector('button').classList.add('invisible');        //adding class named invisible from the button tag.
                                                                        //here all the styling mention in class invisible
                                                                             gets applied from the button

    document.querySelector('button').classList.remove('invisible');     //removing class named invisible from the button tag.
                                                                        //here all the styling mention in class invisible
                                                                             will gets removed from the button
  
    document.querySelector('button').classList.toggle('invisible');
    false
    document.querySelector('button').classList.toggle('invisible');         //it will reverse the things 
    true                                                                        //if already applied then gets removed
                                                                                //if not applied then gets applied
--------------------------------------------------------------------------------------------------------------------------------
Attribute of tags:-
    eg. src, height, width, href, class etc

    document.querySelector('a').attributes;                //to check how many attributes is attached to this tag.
    // NamedNodeMap {0: href, href: href, length: 1}       //length is 1 means only one attribute is there.

    document.querySelector('a').getAttribute("href");       //to get the value of that attribute
        //https://www.google.com
    
    document.querySelector('a').setAttribute("href","https://www.bing.com");        
            
            //setting the attribute
            //here attribute changed now.
--------------------------------------------------------------------------------------------------------------------------------
Adding click event to button:- 
    document.querySelector('button').addEventListener('click',handleClick);
    function handleClick(){
        alert("I got clicked...!");
    }

    OR anonymous function: function without any name,
       and it can same as 
        function (){

        }
        or
        () =>{

        }

        you can pass arguments also.
       eg.
        document.querySelector('button').addEventListener('click',function (){
            alert("I got clicked...!");
        });
--------------------------------------------------------------------------------------------------------------------------------
Higher Order Function:-
    Function that can take other functions as input.
    eg. 
        simple function-
        function add(num1, num2) {
                return num1+num2;
        }
        add(4,4);

        higher order function:
            function Multi(n1,n2){
                return n1*n2;
            }   

            function diff(n1,n2){
                return n1-n2;
            }   

            function calc(n1,n2,Operator){
                return Operator(n1,n2)
            }

            //calling
            calc(12,12,diff)    //0
            calc(12,12,add)     //24

    //Debugging JavaScript: inside Console
        debugger;           //shift+enter
        add(12,12)  
            
--------------------------------------------------------------------------------------------------------------------------------
JavaScript Objects:-
    eg.1)
            var houseKeep ={
                name: 'First Person',
                age: 20,
                Experience: 4,
                Address: '12th street YT Road, Booter',
                Language:['Marathi', 'English','Hindi'],
                work: function (){
                    alert('performing tasks');
                    console.log(HouseKeep.name);
                    console.log(HouseKeep.Experience);
                    function2();
                    fun3();
                }
            }

        calling:
            HouseKeep.work();
            conso.log(HouseKeep.Address);
        
       2)
            var obj1 = {
                name:'Person1',
                age:19,
                exp:4,
                lang:['English','Marathi','Hindi','Kannada'],
                task: function (n='Default') {
                    console.log("Hello "+n);
                }
            }
        calling:
            obj1.name;
            obj1.task();                //Default gets called. Hello Default
            obj1.task('John');          //Hello John.


Constructor Function:-
    function's every first letter is capitalized.
    eg.
        function HouseKeepers(name,age,exp,addrs,lang) {
            this.name = name;
            this.age = age;
            this.exp = exp;
            this.addrs = addrs;
            this.lang = lang;
            this.task = function (){
                alert('Task is in progress');
            }
        }

        eg.
            var person1 = new HouseKeepers('First',20,4,'Pixel no.44 G-tech block, Z-pointer',['c','c++','java','python']);
            var bot = new HouseKeepers('X-stream',15,2,'Pixel no.44 G-tech block, XZ-pointer',['ServerCommunication','CCNA']);
        
Callback Function:-
    calling the particular function when keypress event happens.

        function Listen(pheno, caller) {
            var o ={
                name:'Object-1',
                num:22,
                exp:5,
                age:30,
                engine:'cycle',
                color:'pink',
                phnm:'Vivek'
            }
            if(o.phnm === pheno)
                caller(o);
        }

        function caller(e) {
            console.log(e);
        }

        Listen('Vivek',function (e) {
            console.log(e);
        });

Timer Function in JS:-
    -This will generate alert of "Hello world" after 10 sec.

    setTimeout(
        function () {
            alert("Hello world");
        },10000
    );

    or

    setTimeout(()=>{
            alert("helo world");
        },10000
    );
--------------------------------------------------------------------------------------------------------------------------------
#jQuery:-
    JavaScript Library used to prevent our fingers from breaking.

    document.querySelector('h1');
    document.querySelectorAll('h1');
        //or
    jQuery('h1');
        //or
    $('h1')
        //This all will work same.
    
    use this jQuery CDN or latest one :
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    
    NOTE:- always put the CDN inside head tag & local JS file before the ending of body tag.
    or use this method
    $(document).ready(function (){
        $('h1').css('color','deeppink');
    });
    -This above function will wait till the document get ready to perform next function.
    
    or put the jquery CDN then local js file inside body tag but in just before ending.
--------------------------------------------------------------------------------------------------------------------------------
#MiniFying:-
    -Minification to reduce file size.
    -intended for browser only.
    -not human readable.
--------------------------------------------------------------------------------------------------------------------------------
    document.querySelectorAll('h1')   
    //or
    document.querySelector('h1') 
    can be used as 
    
    jQuery('h1')
    consider as same.or
    $('h1')
--------------------------------------------------------------------------------------------------------------------------------
#Manipulating styles with jQuery:-
    if you specify the single argument inside then it give the current value.       //getting 
    if you give 2 argument inside then its set that value                           //setting

    console.log($('h1').css('color'))            //prints the current color
    console.log($('h1').css('font-size'))            //prints the font-size

    $('h1').css("color",'deeppink');            //h1 will be deeppink colored.

    NOTE:-  
            keep all script code for behaviour/action inside js file.
            keep your style code for appearance inside css file.
            keep all your HTML for content.

    -Adding class using jQuery:
        $('h1').addClass('big-title');  

    -Removing class using jQuery:
        $('h1').removeClass('big-title');

    -Adding multiple classes using jQuery:-

        $('h1').addClass('big-title margin-50');
    
        -just include space between classes name.
    
    -Removing multiple classes using jQuery:-

        $('h1').removeClass('big-title margin-50');
    
    -To check h1 has that class or not:
        $('h1').hasClass('big-title');
            -here if h1 has that big-title clas then Output will be true or else false.
--------------------------------------------------------------------------------------------------------------------------------
#Manipulating Text with jQuery:-
    $('h1').text('new_text');
        -here all h1 heading on the page will get that new_text.

    $('button').html('<i>Click</i>')
        -to add the content/text with tag.
    
    $('button').click(
        ()=>{
            $('h1').text("Hello Vivek..!");
            $("h1").css("color",'hotpink');
        }
    );
--------------------------------------------------------------------------------------------------------------------------------
#Manipulating Attributes with jQuery:-  
    //getting the values
    
    $('h1').attr('class')                       //gives the class list;

    $('img').attr('src');                       //give the value of src attribute

    $('a').attr('href');


    //setting values

    $('h1').attr('class','margin-50');                  //adding margin-50 class to h1.
    $('a').attr('href','https://www.yahoo.com');        //changing the href to yahoo.

--------------------------------------------------------------------------------------------------------------------------------
Challenge:-
    -when we press any key that will apear in place of h1
    in jQuery:-
        
        $('body').keypress(
            (e)=>{
            $('h1').text(e.key)  
            }
        )    
        or
        $(document).keypress(
            (e)=>{
            $('h1').text(e.key)  
            }
        )

    normal JS:-
        document.querySelector('body').addEventListener('keypress',(e)=>{
            var k = e.key;
            document.querySelector('h1').innerHTML = k;
        });
--------------------------------------------------------------------------------------------------------------------------------
#Adding EventListener using jQuery:-
            JQuery reduces the code length.
            we can use on() function for EventListener in jQuery.
                eg. 
                    $('h1').on('event-name',CallbackFunction);
    1)Click:-
        when we click to h1 it Changes it's color to hotpink.

            $('h1').click(()=>{
                $('h1').css("color",'hotpink');
            });

        -when we click any of button then color get changed to green using jQuery

            $('button').click(()=>{
                $("h1").css('color','green');
            })
        
        using JS:-
            for(i=0;i<btn.length;i++)
            {
                document.querySelectorAll('button')[i].addEventListener('click',()=>{
                document.querySelector('h1').style.color = 'blue'  
                })
            }

    2)keypress:-
        Using JS
        -whatever we put inside input field will get displayed in console.
            document.querySelector('input').addEventListener("keypress",(e)=>{
                console.log(e.key);
            })

        Using jQuery:-
            $('input').keypress((e)=>{
                console.log(e.key)
            });


    3)On function:-
        -when we click h1 it will change it's color.
            $("h1").on('click',()=>{
                $('h1').css("color","rgb(128,132,100)")
            })
        
        -when cursor is over the h1 then it will change its color.
            $("h1").on('mouseover',()=>{
                $('h1').css("color",'crimson')
            })
--------------------------------------------------------------------------------------------------------------------------------
#Adding element using jquery:-
    
    --This will add text/button before h1 tag.
        $("h1").before('Vivek')
        $("h1").before('<button>new</button>')

    --This will add text/button after h1 tag.
        $("h1").after('Vivek')
        $("h1").after('<button>new</button>')

    --This will add text/button within h1 tag but at starting.
        $("h1").prepend('Vivek')    
        $("h1").prepend('<button>new</button>')

    --This will add text/button within h1 tag but at ending.
        $("h1").append('Vivek')
        $("h1").append('<button>new</button>')

    --Removing element using jQuery:-
        $('button').remove();
--------------------------------------------------------------------------------------------------------------------------------
#JQuery Animation:-
    1)hide(), show(), toggle():-
        --This will hide the h1 when we click to it.
            $("h1").on('click',()=>{
                $('h1').hide(); 
            });
        
        --This will hide the h1 when we click any button on page.
            $("button").on('click',()=>{
                $('h1').hide(); 
            });
        --This will show the h1 when we click any button on page.
            $("button").on('click',()=>{
                $('h1').show(); 
            });
        
        --Toggle between hide & show.
            $("button").on('click',()=>{
                $('h1').toggle(); 
            });
    
    2) fadeOut(), fadeInt(), fadeToggle():-
    
        --when we click to any of button on page this will make h1 invisible
            $("button").on('click',()=>{
                $('h1').fadeOut(); 
            });

        --when we click to any of button on page this will make h1 Visible
            $("button").on('click',()=>{
                $('h1').fadeIn(); 
            });

        --when we click to any of button on page this will make h1 to Toggle between hide & show.
                    $("button").on('click',()=>{
                        $('h1').fadeToggle(); 
                    });

    3)slideUp(), slideDown(), slideToggle():-

        --h1 will get disappeared slideUP
                    $("button").on('click',()=>{
                        $('h1').slideUp(); 
                    });

        --h1 will re-appeared slideDown

            $("button").on('click',()=>{
                        $('h1').slideDown(); 
                    });

        --Toggle
            $("button").on('click',()=>{
                        $('h1').slideToggle(); 
                    });
        
    4) Custom animation:-   
        -in animate method inside {} braces you can add css rule who has numeric value not string.
            property value should numeric only.
                    $("button").on('click',()=>{
                        $('h1').animate({opacity:0.5}); 
                    });

                    $("button").on('click',()=>{
                        $('h1').animate({margin:"50%"}); 
                    });

        -Chaining the animation:-   
            $('button').on('click',()=>{
                $('h1').slideUp().slideDown().animate({opacity:.5})  
            });

            -first slideUp then slideDown laterwords opacity will change.
========================================================END============================================================