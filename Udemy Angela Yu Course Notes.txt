Servers : A special computer needs to be online 24*7 to serve
Client : a user requesting to Server

ISP : Internet Service Provider
DNS : Domain Name System
        It work like phone book search that 
        website IP address on its database

Every Computer connected to the Internet has an IP address
its like postal code for computer 

-to see the ip address of website go to this website
https://www.nslookup.io/

you'll get the IP address of that site

-website mostly made up of HTML, CSS & Javascript

HTML         :  Responsible for content of website
CSS          :  Responsible for styling for site color, font etc
Javascript   :  makes the site functional, actionable, working, not just looks
                make some actions

-When we refresh the browser means we're asking 
 browser to give HTML, CSS & Javascript files once again to render

<img> tag to add images to websites. 
It is an inline and empty element, which means 
that it doesn't start on a new line and doesn't take
a closing tag
=====================================================
SECTION 2: Intro to HTML
HTML : HyperText Markup Language
 HyperText means link, When we clicked goes to other documents

Tags:
    heading : <h1></h1>
    h1 to h6.

    Line break/new line not closing tag/self closing tag
    <br> or <br /> in XHTML

    Horizontal Rule <hr>, self closing tag
    <hr size="3">
    eg.
        <center>
            <hr size="5" color="black" width="50%">
            <h1>Vivek Mahes Nikate</h1>
            <h3>by</h3>
            <h2>Mahes Arun Nikate</h2>
            <hr size="5" color="grey" width="30%">
            <hr size="3" noshade>
        </center>
    

HTML Boilerplate:   Simply the structure of writing HTML
<!DOCTYPE html>     - says reading document of HTML5 version
<html lang="en">    
    <head> contain info of website
    <meta> info of website
    <title> name displayed over tab bar

    <body> content of site goes in body
==================================================
<em> or <i> tag for italics always prefer to use <em> tag cause it conveys the meaning
<b> or <strong> for boldness of text always use strong.

semantic in HTML:A semantic element/tag clearly describes its meaning 
                 to both the browser and the developer
                 eg. <form> , <table> , and <article> - Clearly defines its content.

non-semantic tag:   <div> and <span> - Tells nothing about its content

-to center element use <center> tag or
    text-align:center;  or
    display: flex; then justify-content:center;

#Building Personal Site here..
Content in that
    *Unorder Listening
    eg
        <h3>Education</h3>
        <ul>
           <li>B-Tech in CSE with 88% aggregate.</li>
           <li>HSC with 81% grade</li>
           <li>SCC with 82%</li> 
        </ul>
    *Ordered List :
        also you can use attribute "type" to count items & "start" to start the count from that number start must be decimal numbern like 
        eg. <ol type="i" start="2"> or            
            <ol type="a"> or
            <ol type="A"> or
            <ol type="I">

    Value	Description
        1	Default. Decimal numbers (1, 2, 3, 4)
        a	Alphabetically ordered list, lowercase (a, b, c, d)
        A	Alphabetically ordered list, uppercase (A, B, C, D)
        i	Roman numbers, lowercase (i, ii, iii, iv)
        I	Roman numbers, uppercase (I, II, III, IV)

        <h3>Hobbies:</h3>
        <ol type="i" start="5">
            <li>Learning new things</li>
            <li>Listening Music</li>
            <li>3D Modeling</li>
            <li>Thinking</li>
        </ol>
    -------------------------------------------------------------------------------------
    Img tag:
        " ../../ " used here to locate my image which is 2 folder back from the current folder.
        if it is inside the folder then you need to describe the path like  folder1/folder2/imgName.png
        if file & image in same folder/location then just use img name

        <img src="../../Vivek.jpg" alt="Vivek's profile photo" width="100" height="100"> 
        <img style="border-radius:90%; border:7px solid rgb(182, 12, 216);">
        <img style="border-radius:10px; border:7px solid rgb(182, 12, 216);">
    -------------------------------------------------------------------------------------------
      Hyper Link:-
        here the target attribute used to open the page on new tab      
        <a href="https://www.capgemini.com/" target="_blank">Capgemini</a>
    ------------------------------------------------------------------------------------------
    table:
    cellspacing ="4" 
    <table border="4">
            <caption>Project 1</caption>
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr> 
                    <td>Project</td>
                    <td>Blood Donation Camp Management Syste</td>
                </tr>
                <tr>
                    <td>Client</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>Role</td>
                    <td>Developer</td>
                </tr>
                <tr>
                    <td>Tech. used</td>
                    <td>C#, .Net Framework, ASP.Net</td>
                </tr>   
            </tbody>
            <tfoot>
                <tr>
                    <td>Description </td>
                    <td>The main objective of the Blood donation camp 
                        management system is to manage the details of Blood, 
                        Donor, Blood Group, Blood Bank, Stock etc. It to create an 
                        efficient system for the donors, where they can get ideas 
                        about ongoing Blood Donation Camp timing.</td>
                </tr>
            </tfoot>
        </table>
        --------------------------------------------------------------------------------------
        form:-
            <form action="mailto:vivek.nikate@capgemini.com">
            <form action="page address">

        <input type="date">
        <input type="file">
        <input type="submit">
        <input type="email">
        <input type="range">
        <input type="time">
        <input type="button">
        <form>
            <label for="name">Your name:</label>
            <input type="text" required> <br>

            <label for="">Password</label>
            <input type="password" name="" id=""><br>

            <label for="">Color</label>
            <input type="color" name="" id="" required><br>
        </form>
        ------------------------------------------------

        " To submit the static pages on github..
          create the repo & upload the files on it
          then go to setting in that pages section choose main branch & 
          then click save to host the application live "

          Home page name must must "index.html" lowercase
==========================================================================================================
NOTE:- if you don't give any styling to the page keep in mind that there is always 
        default styling given by browser. you can override it.

CSS: Cascading Style Sheets
    #Giving background color 
        <body bgcolor="hotpink">
        <body bgcolor="#FFD4B2">
        <body bgcolor="FFD4B2">
        <body style="background-color:crimson">

    1.Inline Styling 
    2.Internal Styling (in the head tag inside that style tag)
    3.External Styling (Adding link of styling file to the web)

            hr{
                background-color: powderblue;
                border-style: dotted none none;
                            /* top (left right)  bottom */
                width: 5%;
                height: 1px;
                border-color: grey;
                border-width: 8px;   
            }

            hr{
                border-bottom: 10px dotted;
                border-top: none;
            }

    Syntax:
        Selector {
            property : value;
        }
        Selector means "whos property you want to change?"
        property means "what you want to change about that Selector?"
        value means " what value want  to give to that property?"
    
    h1{
    color: red;
    font-size: 150px;
    }

    HTML ELEMENT HAVE ONE ID ONLY BUT MAY HAVE MORE THAN ONE CLASSES
    CLASS NAME ID NAME ARE CASE SENSITIVE
    IMG HAS 2 CLASSES BELOW 1. becon2 & 2.CIRCULAR
    <img class="becon2 CIRCULAR" src="https://emojipedia-us.s3.amazonaws.com/thumbs/240/apple/118/bacon_1f953.png" alt="bacon-img">
    .becon2{
        background-color: rebeccapurple;
    }

    .CIRCULAR{
        border-radius: 40px;
    }

    -------------------------------------------------------------------------
    CLASS: -
    The .class selector selects elements with a specific class attribute.
    To select elements with a specific class, write a period (.) dot character, followed by the name of the class.

    <img class="becon2" src="https://emojipedia-us.s3.amazonaws.com/thumbs/240/apple/118/bacon_1f953.png" alt="bacon-img">            
    
     .becon2{
            background-color: rebeccapurple;
        }

    eg.
        In this example all HTML elements with class="center" will be red and center-aligned: 
        .center {
        text-align: center;
        color: red;
        }
        <p class="center">This paragraph will be red and center-aligned.</p>

    eg.2nd
        You can also specify that only specific HTML elements should be affected by a class.
        Example
        In this example only <p> elements with class="center" will be red and center-aligned:

        p.center {
        text-align: center;
        color: red;
        }
        p.center {
            text-align: center;
            color: red;
        }
        p.large {
            font-size: 300%;
        }

    <h1 class="center">This heading will not be affected</h1>
    <p class="center">This paragraph will be red and center-aligned.</p>
    <p class="center large">This paragraph will be red, center-aligned, and in a large font-size.</p> 


    -----------------------------------------------------------------------------------
    
    ID Selector:-
    The id selector uses the id attribute of an HTML element to select a specific element.
    The id of an element is unique within a page(once in a page), so the id selector is used to select one unique element!
    To select an element with a specific id, write a hash (#) POUND character, followed by the id of the element.
    eg.
        <p id="para1">Hello World!</p>
        #para1 {
                text-align: center;
                color: red;
            }
        
    --------------------------------------------------------------------------------------
    * Selector:-

    Select all elements, and set their background color to yellow:
        * {
            background-color: yellow;
        }
    eg.
        this gets applied to the complete body.
                
        * {
            background-color: yellow;
            font-size:20px;
            font-weight:bold;
            color:blue;
        }

    select all elements inside <div> elements and set their background color to yellow:
    div * {
           background-color: yellow;
        }
        
        <div class="intro">
        <p id="firstname">My name is Donald.</p>
        <p id="hometown">I live in Duckburg.</p>
        </div>
    --------------------------------------------------------------------------------------
    Adding Favourite Icon 
    <link rel="icon" href="../MySite/favicons/favicon.ico">
    <link rel="icon" href="../MySite/favicons/favicon.ico?v=2"> 
        -last parameter is optional like "?v=2" is called the version 2 for cached browser
    --------------------------------------------------------------------------------------
    <div> is a content division element, allows you to split or divide your content into 
        separate container's
    NOTE: To change the default margin of h1 & body tag by default given by browser, not mandatory to mention 
            unit(px) when value is 0.
            body{
                margin: 0;
            }
            h1{
                margin: 0px;
            }
    --------------------------------------------------------------------------------------
    CSS properties:
        .middle-container{
                height: 200px;
                width: 200px;
                background-color: rgb(255, 111, 135);
                border: 20px solid black;
                margin-left: 260px;
                text-align: center;
                border-top-left-radius: 20px;
                font-size: 30px;
                font-weight: bolder;
                color: white;
                border-bottom-right-radius: 30px;
            }
    ---------------------------------------------------------------------------------------
    Block elements in CSS:
        block elements are those who takes complete/whole width of screen on web page
        eg.
            header h1 to h6
            paragraph
            div
            list
            form
    Inline elements : takes space as much as they want for their height & width,
    eg. 
            span
            img
            anchors 
    NOTE: why we use block element instead of inline
        -> for inline element we can't mention the width as 
            that of block elements
        
        to change block to inline or viceversa then use 
        display property
        eg. 
        span {
            display:block;
        }
        or
        p {
            display:inline;
        }

        NOTE: to use both property inline & block use 
        property as
        eg. 
        p {
            display : inline-block;
        }
    ====================================================================================
    *quize answer to hide
    when you hide the element on screen like it never exists use 
    display : none property/ when we use this it don't gives its original space completely disappears
    p{
        display:none;
    }
    or
    you want to hide element but want to show empty space on screen then use visibility property
    p {
        visibility : hidden;
    }
===================================================================================
  Position in CSS:
    4 types:
        1.Static
            all html element are static in Position by default, go along with HTML rule & keep the flow
        2.Relative:-
            Adding margin relative to the current position of object
            to make relative use position property first then decide by how much distance want to move the 
            div/image
            here image is relative posed & moved from the left edge by 50px to right side;
            & from top edge push to the bottom by 100px; & so far
            eg.
                img{
                     position:relative;
                     left:50px;
                     top:100px;
                     right:100px;
                     bottom:400px;
                }
        eg.
            HTML code:
                <div class="red">1</div>
                <div class="green">2</div>
                <div class="blue">3</div>
            CSS code:
                .red{
                    background-color:red;
                    height:100px;
                    width:100px;
                    display:inline-block;
                    position:relative;
                    left:400px;
                    top:100px
                }

                .green{
                    background-color:greenyellow;
                    height:100px;
                    width:100px;
                    display:inline-block;
                    position:relative;
                    right:100px;      
                }

                .blue{
                    background-color:blue;
                    height:100px;
                    width:100px;
                    display:inline-block;
                    position:relative;
                    right: 100px;
                }
        3.Absolute:
            Adding margin to it's parent element/ the element get out of the natural HTML render process.
            the original place will not there when we mention the position is Absolute
            the Absolute positioned element is dead for other element
            you can move anywhere on screen within it's parent.
            eg. 
                <div class="red">red</div>
                .red{  
                    background-color:red;
                    height:100px;
                    width:100px;
                    position:absolute;
                    bottom:50px;
                    right:50px;
                    top:100px;
                    left:200px;
                }
                here red block is going to set 50px marginal distance from bottom edge of parent & same for other.
            eg.
            HTML code:-
                <body>
                    <div class="red">Red</div>
                    <div class="blue">blue</div>
                    <div class="yello">Yellow</div>
                </body>
            CSS code:-
                body{
                    margin:0;
                }
                .red{
                    background-color:red;
                    text-align:center;
                    height:100px;
                    width:100px;
                    position:absolute;
                    top:200px;
                    left:200px;
                }

                .blue{
                    background-color:blue;
                    text-align:center;
                    height:100px;
                    width:100px;
                    position:absolute;
                    top:100px;
                    left:100px;
                }

                .yello{
                    background-color:yellow;
                    text-align:center;
                    height:100px;
                    width:100px;
                    position:absolute;
                    top:0;
                    left:0;
                }
    ----------------------------------------------------------------------------------------------------
        4.Fixed:
             <!-- here in this case the nav bar is fixed even if we scroll the page 
                    & we given the z-index to appear nav bar over the other content -->
             nav{
                position: fixed;
                width: 100%;
                background-color: aquamarine;
                left: auto;
                right: auto;
                font-size: xx-large;
                z-index: 1;
            }
            li{
                display: inline;
                margin: 30px;
                padding: 30px;
            }
            body{
                margin: 0;
            }
            <nav>
                <ul>
                    <li>Home</li>
                    <li>About</li>
                    <li>Contact</li>
                    <li>Login</li>
                    <li>Signup</li>
                </ul>
            </nav>
    -------------------------------------------------------------------------------------------
    margin: 0;      //for all sides;
    
    margin: 10px 20px; // 10px margin for top-bottom
                       // 20px margin for left-right

    margin: 12px 13px 14px; 
                        // 12px margin for top
                        // 13px margin for left right
                        // 14px margin for bottom   
    margin : 1px 12px 13px 14px;
              top right bottom left     
    ---------------------------------------------------------------------------------------------
    Fallback for font-family:-
        -here if Arial is present the use that font to render the site else go for next font
        or next is also not installed then go for next font again.
        more specific to less specific
         -font-family:Arial, Helvetica, sans-serif;
    ---------------------------------------------------------------------------------------------
    Favourite Icon on tab bar:
        put ?v=2 after icon name in href if icon not shows.
        rel is to be icon 
    <link rel="icon" href="../MySite/favicons/favicon.ico?v=2">
    ---------------------------------------------------------------------------------------------
    Font size:
        100% == 16px
        1em = capital M width(in older days) but now
        1em = 16px
        16px == 100% == 1em

        -if we put font size in px then it won't change when browser font size changes
         to change the font size of our site we need to implement the dynamically 
         changing font size 
         So use 'em' or '%' unit for font size to changable as per browser's font size

        -dynamic size depends & inherited from parent element
         else the static size like px does not depends on parent element or their size they are 
         contstant

        rem:- Root em  (recommended)
             This is like root size for font 
             ignore/ don't inherit the font size coming from parent.
        eg.
            font-size: 16rem
        NOTE:  MOSTLY USE THE rem UNIT FOR FONT-SIZE ie. most adaptable, useful, least error prone
    ---------------------------------------------------------------------------------------------------
    Line-height: without unit
        line-height:2
    --------------------------------------------------------------
    float property to float img or text
    eg. 
        float: left;    //float on left side
        float: right    //float on right side

        Never use the float property to position a element always use position property to 
        position a element.
        float use for the just wrap out the text 
    --------------------------------------------------------------
    clear property to clear the margin..
    eg. 
        clear: left;    //This is like anti- float property 
                        //clear means left side of that thing is clear 
        clear: right;
=========================================================================================================
#BootStrap :
    A Frotend Library/framework
    devleoped by Twitter for responsive applications
    just to give the class name to particular para it'll design it automatically
    CDN: - Content Delivery Network.
    
    Front-end : HTML, CSS, JavaScript, BootStrap
    Back-end  : .NET, PHP, Java, SQL, NodeJS, Ruby

    Basics classes of BootStrap:-
        btn, btn-primary, btn-dark, btn-danger, btn-outline-dark & btn-lg (large)
        navbar, bg-dark

    -To use BootStrap class need to download the style file or we need to ues the CDN link
     always try to use CDN cause it decreased the network latency increases the speed.
     
     CDN link:
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    while adding this link,
        this link must go before your css file's link.
    or download it & then use it, like 
        
        <link rel="stylesheet" href="path/styleFiles/bootstrap.css">
 ----------------------------------------------------------------------------------------
 before creating website make it's wireframe first
    1.https://balsamiq.com/
    2.https://sneakpeekit.com/
 ------------------------------------------------------------------------------------------
    BootStrap classes:- class="btn btn-primary"
                        class="bg-dark"
        primary         light
        secondary       success
        dark            info
        warning         link 
        danger

        class="btn btn-outline-primary"
        class="btn btn-outline-dark"
        class="btn btn-outline-success"
----------------------------------------------------------------------------------------------
navbar-brand class is used for company logo.
----------------------------------------------------
row, col = row  & column

-Full Screen total width is 12 box  (not responsive)
    col-6 means 50% of screen width
    col-3 means 25% of total screen width.

-Responsive column row
    col-md-6 => column medium 6
    md- medium screen
    lg- large screen
    sm- smaller screen
--------------------------------------------------------------------------------------------------
eg.
    <div class="row">
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            1
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            2
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            3
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            4
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            5
        </div>
    </div>

#2.
    <div class="row">
        <div class="col-6" style="border:2px solid; background-color:black;color:white;">col-6</div>
        <div class="col-3" style="border:2px solid; background-color:black;color:white;">col-3</div>
        <div class="col-2" style="border:2px solid; background-color:black;color:white;">col-2</div>
        <div class="col-1" style="border:2px solid; background-color:black;color:white;">col-1</div>
    </div>

#3.
    More responsive:-
    <div class="row">
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
    </div>

#4.
    <div class="row">
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
    </div>
---------------------------------------------------------------------------------------------------------------------------------
-container:- container class with some padding-margin.
            eg. class="container"

-container-fluid:- container-fluid takes full width of screen 
                    adjust according to the screen size.
            eg. class="container-fluid"
---------------------------------------------------------------------------------------------------------------------------
Always remember:
    #fff - white
    #000 - black
---------------------------------------------------------------------------------------------------------------------------
#Media-query breakpoint:
eg.
    @media <type> <feature>

    1) @media print {

    }

    2) @media screen (min-width:900px){
        //change things displayed
    }
    eg.
        @media (max-width:900px){
            h1{
                color:red;
            }
        }
        -> here the h1 will change color to red 
            when the width is 900 or less than 900
        
        @media (min-width:900px)
        {
            h1{
                font-size:5rem;
            }
        }
        -> here h1 will change its size when the minimum width must be 900 or more;
            like if the width of screen >= 900px then 
            increases the font size of h1 to 5rem.
    
    3) Multiple queries:-
        @media (min-width:700px) and (max-width:1000px){
            h1{
                color:red;
                font-size:4rem;
            }
        }
        ->
            here h1 will change its color & font-size when the
            minimum width is 700px & maximum width is 1000px
    
Font awesome link:-
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
     
     font awesome working classes icon
     <i class="fa fa-twitter"></i>
      <i class="fa fa-facebook"></i>
      <i class="fa fa-instagram"></i>
      <i class="fa fa-envelope"></i>
---------------------------------------------------------------------------------------
As a programmer, we're always aspiring to be DRY.
D - Do not
R - Repeat
Y - Yourself
--------------
Opposite of dry is WET code.
W - We
E - Enjoy
T - Typing
-----------------------
Code Refactoring:-
    1.Readability
    2.Modularity
    3.Efficiency
    4.Length
---------------------------------------------------------------------------------------
1.Multiple Selector:

    Selector1, selector2,.. {
        //styles
    }
    eg.
        h1,  h2, h3, h4, h5, h6 {
            font-family: Arial;
        }
    
2.Hierarchical Selector:-
    -space is crucial here in between selector
    -first selector is parent selector & 2nd one is child selector

    -WHEN THERE IS SPACE BETWEEN SELECTORS THEN read it from right to left like below 
        selector2 is child of Selector1.

    Selector1 selector2{
        //style
    }

    eg.
        #title .container-fluid{
            padding:3% 5%;
        }
        -> here the the class container-fluid which are INSIDE the title ID will 
        get applied the padding of 3% for top-bottom & 5% left-right

    div h1{
        color:red;
    }
    -> here the h1 tags text color will be red only if then are inside the div tag

    container-fluid h1{
        color:red;
    }
    -> here the h1 heading will get the text color of red which are INSIDE class container-fluid.
    (colored red only when h1 is the child of container-fluid)

3.Combined Selector:- DOT(.) for Class
                      POUND(#) for ID

    -WHEN THERE IS NO SPACE BETWEEN SELECTORS read it from left to right
    
    Selector1.selector2{

    }

    Selector1.#ID_selector{

    }
    eg.
        h1.container1.title{
            color:red;
        }
        -here h1 have class container1 & title have the color red;

    eg.
        h1#title{
            color:red;
        }
        -> here its like   "h1 has an ID of title should have color of red"
------------------------------------------------------------------------------------------------------------------
HTML
    <div class="container1">
        <h1 class="title">Hello World..!!</h1>
    </div>
    <div class="container2">
        <h1 class="title">Good Bye World..!!</h1>
    </div>
CSS
    div.container1{
        color:red;      //here the container1's h1 will be red colored
    }
------------------------------------------------------------------------------------------------------------------------
inline styling > ID > class > html elements 

Priority:-  
            the last style will be applied.
            eg.
                h1{
                    color:red;
                    color:green;
                }
                ->here the h1 color first turn to red then it'll be green
                
        -classes have higher priority than HTML elements(h1, div, section, etc)
        -ID have higher priority than classes
        -inline styling has higher priority than ID

RECOMMENDED:
=FIRST CONSIDER USING CLASS INSTEAD OF GOING STRAIGHT TO AN ID,even if it only appears once.
=ID are also used for navigation purpose
=Try to apply only a single custom class to each of your elements
=Avoid inline styling at all costs.
===========================================================================================================================
#4 Pillar's of Web Design:
    1) Color Theory
    2) Typography
    3) User Interface (UI)
    4) User Experience (UX)
===========================================================================================================================
#JavaScript(JS) :-  
