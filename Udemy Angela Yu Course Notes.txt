shortcut:
    alt + enter (hit it after writing something in url) //open search on new tab.
    crtl+ enter (hit it after writing in url ) it add the .com at end
    'crtl + [' or  'crtl+ ]' moving forward or backword line/lines

    scroll fast using mouse up/down & press shift button along with.
    -rearrange the tabs open in chrome using crtl + shift + (page up/ page down).
----------------------------------------------------------------------------------
Full Stack Web Development Bootcamp:-

Servers : A special computer needs to be online 24*7 to serve
Client : a user requesting to Server

ISP : Internet Service Provider
DNS : Domain Name System
        It work like phone book search that 
        website IP address on its database

Every Computer connected to the Internet has an IP address
its like postal code for computer 

-to see the ip address of website go to this website
https://www.nslookup.io/

you'll get the IP address of that site

-website mostly made up of HTML, CSS & Javascript

HTML         :  Responsible for content of website
CSS          :  Responsible for styling for site color, font etc
Javascript   :  makes the site functional, actionable, working, not just looks
                make some actions

-When we refresh the browser means we're asking 
 browser to give HTML, CSS & Javascript files once again to render

<img> tag to add images to websites. 
It is an inline and empty element, which means 
that it doesn't start on a new line and doesn't take
a closing tag
=====================================================
SECTION 2: Intro to HTML
HTML : HyperText Markup Language
 HyperText means link, When we clicked goes to other documents
 Extension is eiter .htm OR .html

Tags:
    heading : <h1></h1>
    h1 to h6.

    <h1 style="writing-mode:vertical-lr;">hello world</h1>
    -vertical text

    Line break/new line not closing tag/self closing tag
    <br> or <br /> in XHTML

    Horizontal Rule <hr>, self closing tag
    self closing tag is a tag who has no children.
    <img />
    <hr size="3" />
    eg.
        <center>
            <hr size="5" color="black" width="50%">
            <h1>Vivek Mahes Nikate</h1>
            <h3>by</h3>
            <h2>Mahes Arun Nikate</h2>
            <hr size="5" color="grey" width="30%">
            <hr size="3" noshade>
        </center>
    

HTML Boilerplate:   Simply the structure of writing HTML
<!DOCTYPE html>     - says reading document of HTML5 version
<html lang="en">    
    <head> contain info of website
    <meta> info of website
    <title> name displayed over tab bar
    <body> content of site goes in body

    <p contenteditable>This is paragraph</p>
    <p contenteditable="true">This is paragraph</p>
    <h1 contenteditable>Hello world..!</h1>
    -here the paragraph is editable now.

    changing the styles on page:
        <style contenteditable="true" style="display: block;">
            h1{
                color: red;
            }
        </style>
        -here you can change the value only, 
         you can't define the value for new tag or new property for that tag.
==================================================
<em> or <i> tag for italics always prefer to use <em> tag cause it conveys the meaning
<b> or <strong> for boldness of text always use strong.
<cite> italics.
<abbr title="Work from home>WFH</abbr>      //abbreviation
    HTML tags:
        <a> tag for hyperlink
        <img> tag for images
        <br> tag for line break
        <hr> tag for horizontal rule
        <center> tag for centering
        <p> tag for paragraph
        <h1>, <h2>, <h3>, <h4>, <h5>, <h6> tag for heading
        <ul> tag for unordered list
        <ol> tag for ordered list
        <li> tag for list item
        <table> tag for table
        <tr> tag for table row
        <td> tag for table data
        <form> tag for form
        <input> tag for input
        <button> tag for button
        <label> tag for label
        <select> tag for select
        <option> tag for option
        <textarea> tag for text area
        <div> tag for div
        <span> tag for span
        <style> tag for style
        <script> tag for scripting
        <title> tag for title


semantic in HTML:A semantic element/tag clearly describes its meaning 
                 to both the browser and the developer
                 eg. <form> , <table> , and <article> - Clearly defines its content.

non-semantic tag:   <div> and <span> - Tells nothing about its content

-to center element use <center> tag or
    text-align:center;  or
    display: flex; then justify-content:center;

#Building Personal Site here..
Content in that
    *Unorder Listening
    eg
        <h3>Education</h3>
        <ul>
           <li>B-Tech in CSE with 88% aggregate.</li>
           <li>HSC with 81% grade</li>
           <li>SCC with 82%</li> 
        </ul>
    *Ordered List :
        also you can use attribute "type" to count items & "start" to start the count from that number start must be decimal numbern like 
        eg. <ol type="i" start="2"> or            
            <ol type="a"> or
            <ol type="A"> or
            <ol type="I">

    Value	Description
        1	Default. Decimal numbers (1, 2, 3, 4)
        a	Alphabetically ordered list, lowercase (a, b, c, d)
        A	Alphabetically ordered list, uppercase (A, B, C, D)
        i	Roman numbers, lowercase (i, ii, iii, iv)
        I	Roman numbers, uppercase (I, II, III, IV)

        <h3>Hobbies:</h3>
        <ol type="i" start="5">
            <li>Learning new things</li>
            <li>Listening Music</li>
            <li>3D Modeling</li>
            <li>Thinking</li>
        </ol>
    -------------------------------------------------------------------------------------
    Img tag:
        " ../../ " used here to locate my image which is 2 folder back from the current folder.
        if it is inside the folder then you need to describe the path like  folder1/folder2/imgName.png
        if file & image in same folder/location then just use img name

        <img src="../../Vivek.jpg" alt="Vivek's profile photo" width="100" height="100"> 
        <img style="border-radius:90%; border:7px solid rgb(182, 12, 216);">
        <img style="border-radius:10px; border:7px solid rgb(182, 12, 216);">
    -------------------------------------------------------------------------------------------
      Hyper Link:-
        here the target attribute used to open the page on new tab      
        <a href="https://www.capgemini.com/" target="_blank">Capgemini</a>

      Random Photo link:
        https://picsum.photos/200/300
        https://picsum.photos/200/200;
        
        grayscale mode:
        https://picsum.photos/200/200?grayscale

    ------------------------------------------------------------------------------------------
    table:
    cellspacing ="4" 
    <table border="4">
            <caption>Project 1</caption>
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr> 
                    <td>Project</td>
                    <td>Blood Donation Camp Management Syste</td>
                </tr>
                <tr>
                    <td>Client</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>Role</td>
                    <td>Developer</td>
                </tr>
                <tr>
                    <td>Tech. used</td>
                    <td>C#, .Net Framework, ASP.Net</td>
                </tr>   
            </tbody>
            <tfoot>
                <tr>
                    <td>Description </td>
                    <td>The main objective of the Blood donation camp 
                        management system is to manage the details of Blood, 
                        Donor, Blood Group, Blood Bank, Stock etc. It to create an 
                        efficient system for the donors, where they can get ideas 
                        about ongoing Blood Donation Camp timing.</td>
                </tr>
            </tfoot>
        </table>
        --------------------------------------------------------------------------------------
        form:-
            <form action="mailto:vivek.nikate@capgemini.com">
            <form action="page address">

        <input type="date">
        <input type="file">
        <input type="submit">
        <input type="email">
        <input type="range">
        <input type="time">
        <input type="button">
        <form>
            <label for="name">Your name:</label>
            <input type="text" required> <br>

            <label for="">Password</label>
            <input type="password" name="" id=""><br>

            <label for="">Color</label>
            <input type="color" name="" id="" required><br>
        </form>
        ------------------------------------------------

        " To submit the static pages on github..
          create the repo & upload the files on it
          then go to setting in that pages section choose main branch & 
          then click save to host the application live "

          Home page name must must "index.html" lowercase
==========================================================================================================
Video tag HTML:-
    <video 
            poster="http://placehold.it/1200x500" 
            height="300px" 
            width="500px"
            style="background-color:green;"
            //src="http://techslides.com/demos/sample-videos/small.webm"
            controls
            //type="video/mp4"
        >
        <source src="link" type="video/mp4" />
    </video>
       
    -Adding multiple picture according to screen size,
    <picture style="display: flex; justify-content: center;">
          <source 
               srcset="https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8cGVyc29ufGVufDB8fDB8fA%3D%3D&w=1000&q=80"
               media="(min-width:1200px)"
          >
          <source
               srcset="https://media.hswstatic.com/eyJidWNrZXQiOiJjb250ZW50Lmhzd3N0YXRpYy5jb20iLCJrZXkiOiJnaWZcL3BsYXlcLzBiN2Y0ZTliLWY1OWMtNDAyNC05ZjA2LWIzZGMxMjg1MGFiNy0xOTIwLTEwODAuanBnIiwiZWRpdHMiOnsicmVzaXplIjp7IndpZHRoIjo4Mjh9LCJ0b0Zvcm1hdCI6ImF2aWYifX0="
               media="(min-width:720px)"
          >
          <img src="https://upload.wikimedia.org/wikipedia/commons/a/a0/Pierre-Person.jpg" alt="Person" title="I'm person">
     </picture>
==========================================================================================================
NOTE:- if you don't give any styling to the page keep in mind that there is always 
        default styling given by browser. you can override it.

CSS: Cascading Style Sheets
    #Giving background color 
        <body bgcolor="hotpink">
        <body bgcolor="#FFD4B2">
        <body bgcolor="FFD4B2">
        <body style="background-color:crimson">

    1.Inline Styling 
    2.Internal Styling (in the head tag inside that style tag)
    3.External Styling (Adding link of styling file to head section of html page)

            hr{
                background-color: powderblue;
                border-style: dotted none none;
                            /* top (left right)  bottom */
                width: 5%;
                height: 1px;
                border-color: grey;
                border-width: 8px;   
            }

            hr{
                border-bottom: 10px dotted;
                border-top: none;
            }

    Syntax:
        Selector {
            property : value;
        }
        Selector means "whos property you want to change?"
        property means "what you want to change about that Selector?"
        value means " what value want  to give to that property?"
    
    h1{
    color: red;
    font-size: 150px;
    }

    HTML ELEMENT HAVE ONE ID ONLY BUT MAY HAVE MORE THAN ONE CLASSES
    CLASS NAME ID NAME ARE CASE SENSITIVE
    IMG HAS 2 CLASSES BELOW 1. becon2 & 2.CIRCULAR
    <img class="becon2 CIRCULAR" src="https://emojipedia-us.s3.amazonaws.com/thumbs/240/apple/118/bacon_1f953.png" alt="bacon-img">
    .becon2{
        background-color: rebeccapurple;
    }

    .CIRCULAR{
        border-radius: 40px;
    }

    background gradient property:-
        background-image: -webkit-linear-gradient(65deg, #A683E3,rgb(149, 0, 255),rgb(228, 86, 162), #E4E9FD);
        background-image: -webkit-linear-gradient(30deg, #A683E3 , #E4E9FD, #f1ddd2);
        background-image: -webkit-linear-gradient(60deg, #A683E3 50%, #E4E9FD 50%);

    Text-Gradient:-
        background-image: linear-gradient( to right , rgb(28, 211, 0), rgb(0, 255, 251));
        width: fit-content;
        padding: 20px;
        -webkit-text-fill-color: transparent;
        -webkit-background-clip: text;
    -------------------------------------------------------------------------
    CLASS: -
    The .class selector selects elements with a specific class attribute.
    To select elements with a specific class, write a period (.) dot character, followed by the name of the class.

    <img class="becon2" src="https://emojipedia-us.s3.amazonaws.com/thumbs/240/apple/118/bacon_1f953.png" alt="bacon-img">            
    
     .becon2{
            background-color: rebeccapurple;
        }

    eg.
        In this example all HTML elements with class="center" will be red and center-aligned: 
        .center {
        text-align: center;
        color: red;
        }
        <p class="center">This paragraph will be red and center-aligned.</p>

    eg.2nd
        You can also specify that only specific HTML elements should be affected by a class.
        Example
        In this example only <p> elements with class="center" will be red and center-aligned:

        p.center {
        text-align: center;
        color: red;
        }
        p.center {
            text-align: center;
            color: red;
        }
        p.large {
            font-size: 300%;
        }

    <h1 class="center">This heading will not be affected</h1>
    <p class="center">This paragraph will be red and center-aligned.</p>
    <p class="center large">This paragraph will be red, center-aligned, and in a large font-size.</p> 


    -----------------------------------------------------------------------------------
    
    ID Selector:-
    The id selector uses the id attribute of an HTML element to select a specific element.
    The id of an element is unique within a page(once in a page), so the id selector is used to select one unique element!
    To select an element with a specific id, write a hash (#) POUND character, followed by the id of the element.
    eg.
        <p id="para1">Hello World!</p>
        #para1 {
                text-align: center;
                color: red;
            }
        
    --------------------------------------------------------------------------------------
    * Selector:-

    Select all elements, and set their background color to yellow:
        * {
            background-color: yellow;
        }
    eg.
        this gets applied to the complete body.
                
        * {
            background-color: yellow;
            font-size:20px;
            font-weight:bold;
            color:blue;
        }

    select all elements inside <div> elements and set their background color to yellow:
    div * {
           background-color: yellow;
        }
        
        <div class="intro">
        <p id="firstname">My name is Donald.</p>
        <p id="hometown">I live in Duckburg.</p>
        </div>
    --------------------------------------------------------------------------------------
    Adding Favourite Icon 
    <link rel="icon" href="../MySite/favicons/favicon.ico">
    <link rel="icon" href="../MySite/favicons/favicon.ico?v=2"> 
        -last parameter is optional like "?v=2" is called the version 2 for cached browser
    --------------------------------------------------------------------------------------
    <div> is a content division element, allows you to split or divide your content into 
        separate container's
    NOTE: To change the default margin of h1 & body tag by default given by browser, not mandatory to mention 
            unit(px) when value is 0.
            body{
                margin: 0;
            }
            h1{
                margin: 0px;
            }
    --------------------------------------------------------------------------------------
    CSS properties:
        .middle-container{
                height: 200px;
                width: 200px;
                background-color: rgb(255, 111, 135);
                border: 20px solid black;
                margin-left: 260px;
                text-align: center;
                border-top-left-radius: 20px;
                font-size: 30px;
                font-weight: bolder;
                color: white;
                border-bottom-right-radius: 30px;
            }
        
        accent-color	Specifies an accent color for user-interface controls
            copy paste code in browser
                <!DOCTYPE html>
                <html>
                <head>
                <style>
                input[type=checkbox] {
                accent-color: yellow;
                }

                input[type=radio] {
                accent-color: green;
                }

                input[type=range] {
                accent-color: rgb(0, 155, 255);
                }

                progress {
                accent-color: hsl(39, 100%, 50%);
                }

                </style>
                </head>
                <body>

                <h1>The accent-color Property</h1>

                <h3>Accent color for checkboxes:</h3>
                <input type="checkbox" id="vehicle1" name="vehicle1" value="Bike" checked>
                <label for="vehicle1"> I have a bike</label><br>
                <input type="checkbox" id="vehicle2" name="vehicle2" value="Car" checked>
                <label for="vehicle2"> I have a car</label><br><br>

                <h3>Accent color for radiobuttons:</h3>
                <input type="radio" id="html" name="fav" value="HTML">
                <label for="html">HTML</label><br>
                <input type="radio" id="css" name="fav" value="CSS" checked>
                <label for="css">CSS</label><br>

                <h3>Accent color for a range field:</h3>
                <label for="vol">Volume:</label>
                <input type="range" id="vol" name="vol" min="0" max="50">

                <h3>Accent color for a progress element:</h3>
                <label for="file">Downloading progress:</label>
                <progress id="file" value="92" max="100"> 72% </progress>

                </body>
                </html>
    ---------------------------------------------------------------------------------------
    //below styling will stop selecting the text from user end 
        & won't be able to copy the text
    <body>
        <h1>
            Hello world..!
        </h1>
    </body>
    
    body>h1{
        color:red;
        text-align: center;
        cursor: not-allowed;
        user-select:none;
    }
    ---------------------------------------------------------------------------------------
    Block elements in CSS:
        block elements are those who takes complete/whole width of screen on web page
        eg.
            header h1 to h6
            paragraph
            div
            list
            form
    Inline elements : takes space as much as they want for their height & width,
    eg. 
            span
            img
            anchors 
    NOTE: why we use block element instead of inline
        -> for inline element we can't mention the width as 
            that of block elements
        
        to change block to inline or viceversa then use 
        display property
        eg. 
        span {
            display:block;
        }
        or
        p {
            display:inline;
        }

        NOTE: to use both property inline & block use 
        property as
        eg. 
        p {
            display : inline-block;
        }
    ====================================================================================
    *quize answer to hide
    when you hide the element on screen like it never exists use 
    display : none property/ when we use this it don't gives its original space completely disappears
    p{
        display:none;
    }
    or
    you want to hide element but want to show empty space on screen then use visibility property
    p {
        visibility : hidden;
    }
===================================================================================
CSS Animation:-
    <h1>Hello world...!!</h1>

     h1{
        opacity: 0;
        transform: translateY(50px);
        animation: FadeUP 2s forwards;    
        /* forwards retain the last keyframe properties*/
      }

      @keyframes FadeUP{
        to{
          opacity: 1;
          transform: translateY(0);
        }  
      }
===================================================================================
  Position in CSS:
    4 types:
        1.Static
            all html element are static in Position by default, go along with HTML rule & keep the flow
        2.Relative:-
            Adding margin relative to the current position of object
            to make relative use position property first then decide by how much distance want to move the 
            div/image
            here image is relative posed & moved from the left edge by 50px to right side;
            & from top edge push to the bottom by 100px; & so far
            eg.
                img{
                     position:relative;
                     left:50px;
                     top:100px;
                     right:100px;
                     bottom:400px;
                }
        eg.
            HTML code:
                <div class="red">1</div>
                <div class="green">2</div>
                <div class="blue">3</div>
            CSS code:
                .red{
                    background-color:red;
                    height:100px;
                    width:100px;
                    display:inline-block;
                    position:relative;
                    left:400px;
                    top:100px
                }

                .green{
                    background-color:greenyellow;
                    height:100px;
                    width:100px;
                    display:inline-block;
                    position:relative;
                    right:100px;      
                }

                .blue{
                    background-color:blue;
                    height:100px;
                    width:100px;
                    display:inline-block;
                    position:relative;
                    right: 100px;
                }
        3.Absolute:
            Adding margin to it's parent element/ the element get out of the natural HTML render process.
            the original place will not there when we mention the position is Absolute
            the Absolute positioned element is dead for other element
            you can move anywhere on screen within it's parent.
            eg. 
                <div class="red">red</div>
                .red{  
                    background-color:red;
                    height:100px;
                    width:100px;
                    position:absolute;
                    bottom:50px;
                    right:50px;
                    top:100px;
                    left:200px;
                }
                here red block is going to set 50px marginal distance from bottom edge of parent & same for other.
            eg.
            HTML code:-
                <body>
                    <div class="red">Red</div>
                    <div class="blue">blue</div>
                    <div class="yello">Yellow</div>
                </body>
            CSS code:-
                body{
                    margin:0;
                }
                .red{
                    background-color:red;
                    text-align:center;
                    height:100px;
                    width:100px;
                    position:absolute;
                    top:200px;
                    left:200px;
                }

                .blue{
                    background-color:blue;
                    text-align:center;
                    height:100px;
                    width:100px;
                    position:absolute;
                    top:100px;
                    left:100px;
                }

                .yello{
                    background-color:yellow;
                    text-align:center;
                    height:100px;
                    width:100px;
                    position:absolute;
                    top:0;
                    left:0;
                }
    ----------------------------------------------------------------------------------------------------
        4.Fixed:
             <!-- here in this case the nav bar is fixed even if we scroll the page 
                    & we given the z-index to appear nav bar over the other content -->
             nav{
                position: fixed;
                width: 100%;
                background-color: aquamarine;
                left: auto;
                right: auto;
                font-size: xx-large;
                z-index: 1;
            }
            li{
                display: inline;
                margin: 30px;
                padding: 30px;
            }
            body{
                margin: 0;
            }
            <nav>
                <ul>
                    <li>Home</li>
                    <li>About</li>
                    <li>Contact</li>
                    <li>Login</li>
                    <li>Signup</li>
                </ul>
            </nav>
    -------------------------------------------------------------------------------------------
    margin: 0;      //for all sides;
    
    margin: 10px 20px; // 10px margin for top-bottom
                       // 20px margin for left-right

    margin: 12px 13px 14px; 
                        // 12px margin for top
                        // 13px margin for left right
                        // 14px margin for bottom   
    margin : 1px 12px 13px 14px;
              top right bottom left     
    ---------------------------------------------------------------------------------------------
    Fallback for font-family:-
        -here if Arial is present the use that font to render the site else go for next font
        or next is also not installed then go for next font again.
        more specific to less specific
         -font-family:Arial, Helvetica, sans-serif;
    ---------------------------------------------------------------------------------------------
    Favourite Icon on tab bar:
        put ?v=2 after icon name in href if icon not shows.
        rel is to be icon 
    <link rel="icon" href="../MySite/favicons/favicon.ico?v=2">
    ---------------------------------------------------------------------------------------------
    Font size:
        100% == 16px
        1em = capital M width(in older days) but now
        1em = 16px
        16px == 100% == 1em

        -if we put font size in px then it won't change when browser font size changes
         to change the font size of our site we need to implement the dynamically 
         changing font size 
         So use 'em' or '%' unit for font size to changable as per browser's font size

        -dynamic size depends & inherited from parent element
         else the static size like px does not depends on parent element or their size they are 
         contstant

        rem:- Root em  (recommended)
             This is like root size for font 
             ignore/ don't inherit the font size coming from parent.
        eg.
            font-size: 16rem
        NOTE:  MOSTLY USE THE rem UNIT FOR FONT-SIZE ie. most adaptable, useful, least error prone
    ---------------------------------------------------------------------------------------------------
    Line-height: without unit
        line-height:2
    --------------------------------------------------------------
    float property to float img or text
    eg. 
        float: left;    //float on left side
        float: right    //float on right side

        Never use the float property to position a element always use position property to 
        position a element.
        float use for the just wrap out the text 
    --------------------------------------------------------------
    clear property to clear the margin..
    eg. 
        clear: left;    //This is like anti- float property 
                        //clear means left side of that thing is clear 
        clear: right;
=========================================================================================================
#BootStrap :
    A Frotend Library/framework
    devleoped by Twitter for responsive applications
    just to give the class name to particular para it'll design it automatically
    CDN: - Content Delivery Network.
    
    Front-end : HTML, CSS, JavaScript, BootStrap
    Back-end  : .NET, PHP, Java, SQL, NodeJS, Ruby

    Basics classes of BootStrap:-
        btn, btn-primary, btn-dark, btn-danger, btn-outline-dark & btn-lg (large)
        navbar, bg-dark

    -To use BootStrap class need to download the style file or we need to ues the CDN link
     always try to use CDN cause it decreased the network latency increases the speed.
     
     CDN link:
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    while adding this link,
        this link must go before your css file's link.
    or download it & then use it, like 
        
        <link rel="stylesheet" href="path/styleFiles/bootstrap.css">
 ----------------------------------------------------------------------------------------
 before creating website make it's wireframe first
    1.https://balsamiq.com/
    2.https://sneakpeekit.com/
 ------------------------------------------------------------------------------------------
    BootStrap classes:- class="btn btn-primary"
                        class="bg-dark"
        primary         light
        secondary       success
        dark            info
        warning         link 
        danger

        class="btn btn-outline-primary"
        class="btn btn-outline-dark"
        class="btn btn-outline-success"
----------------------------------------------------------------------------------------------
navbar-brand class is used for company logo.
----------------------------------------------------
row, col = row  & column

-Full Screen total width is 12 box  (not responsive)
    col-6 means 50% of screen width
    col-3 means 25% of total screen width.

-Responsive column row
    col-md-6 => column medium 6
    md- medium screen
    lg- large screen
    sm- smaller screen
--------------------------------------------------------------------------------------------------
eg.
    <div class="row">
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            1
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            2
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            3
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            4
        </div>
        <div class="col" style="border:2px solid; background-color:black;color:white;">
            5
        </div>
    </div>

#2.
    <div class="row">
        <div class="col-6" style="border:2px solid; background-color:black;color:white;">col-6</div>
        <div class="col-3" style="border:2px solid; background-color:black;color:white;">col-3</div>
        <div class="col-2" style="border:2px solid; background-color:black;color:white;">col-2</div>
        <div class="col-1" style="border:2px solid; background-color:black;color:white;">col-1</div>
    </div>

#3.
    More responsive:-
    <div class="row">
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
        <div class="col-md-3" style="border:2px solid; background-color:black;color:white;">col-md-3</div>
    </div>

#4.
    <div class="row">
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
        <div class="col-lg-1 col-md-4 col-sm-6" style="border:2px solid; background-color:black;color:white;">col-lg-1</div>
    </div>
---------------------------------------------------------------------------------------------------------------------------------
-container:- container class with some padding-margin.
            eg. class="container"

-container-fluid:- container-fluid takes full width of screen 
                    adjust according to the screen size.
            eg. class="container-fluid"
---------------------------------------------------------------------------------------------------------------------------
Always remember:
    #fff - white
    #000 - black
---------------------------------------------------------------------------------------------------------------------------
#Media-query breakpoint:
eg.
    @media <type> <feature>

    1) @media print {

    }

    2) @media screen (min-width:900px){
        //change things displayed
    }
    eg.
        @media (max-width:900px){
            h1{
                color:red;
            }
        }
        -> here the h1 will change color to red 
            when the width is 900 or less than 900
        
        @media (min-width:900px)
        {
            h1{
                font-size:5rem;
            }
        }
        -> here h1 will change its size when the minimum width must be 900 or more;
            like if the width of screen >= 900px then 
            increases the font size of h1 to 5rem.
    
    3) Multiple queries:-
        @media (min-width:700px) and (max-width:1000px){
            h1{
                color:red;
                font-size:4rem;
            }
        }
        ->
            here h1 will change its color & font-size when the
            minimum width is 700px & maximum width is 1000px

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    here, content of page should be get fit according to device-width.

    @media (min-width:400px){
        //This styles will get applied if the width is 400 or more than 400
    }

    or
    @media (width >= 400){
        //This styles will get applied if the width is 400 or more than 400
    }

    @media (width = 400)          //you can use any of this operator 
    @media (width <= 400)
    @media (width >= 400)

    #RANGE:
        @media(720px <=  width <= 1080px){
            //apply styles if width is between 720px to 1080px
        }

        in css words AND
        @media (min-width:720px) and (max-width:1080px){

        }

        OR use ','

        @media (min-width:720px), (max-width:1080px){

        }

    @media (orientation:landscape){
        //apply these styles if width > height
    }

    @media (orientation:portrait){
        //apply these styles if height > width
    }

Font awesome link:-
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
     
     font awesome working classes icon
     <i class="fa fa-twitter"></i>
      <i class="fa fa-facebook"></i>
      <i class="fa fa-instagram"></i>
      <i class="fa fa-envelope"></i>
---------------------------------------------------------------------------------------
As a programmer, we're always aspiring to be DRY.
D - Do not
R - Repeat
Y - Yourself
--------------
Opposite of dry is WET code.
W - We
E - Enjoy
T - Typing
-----------------------
Code Refactoring:-
    1.Readability
    2.Modularity
    3.Efficiency
    4.Length
---------------------------------------------------------------------------------------
1.Multiple Selector:

    Selector1, selector2,.. {
        //styles
    }
    eg.
        h1,  h2, h3, h4, h5, h6 {
            font-family: Arial;
        }
    
2.Hierarchical Selector:-
    -space is crucial here in between selector
    -first selector is parent selector & 2nd one is child selector

    -WHEN THERE IS SPACE BETWEEN SELECTORS THEN read it from right to left like below 
        selector2 is child of Selector1.

    Selector1 selector2{
        //style
    }

    eg.
        #title .container-fluid{
            padding:3% 5%;
        }
        -> here the the class container-fluid which are INSIDE the title ID will 
        get applied the padding of 3% for top-bottom & 5% left-right

    div h1{
        color:red;
    }
    -> here the h1 tags text color will be red only if then are inside the div tag

    container-fluid h1{
        color:red;
    }
    -> here the h1 heading will get the text color of red which are INSIDE class container-fluid.
    (colored red only when h1 is the child of container-fluid)

3.Combined Selector:- DOT(.) for Class
                      POUND(#) for ID

    -WHEN THERE IS NO SPACE BETWEEN SELECTORS read it from left to right
    
    Selector1.selector2{

    }

    Selector1.#ID_selector{

    }
    eg.
        h1.container1.title{
            color:red;
        }
        -here h1 have class container1 & title have the color red;

    eg.
        h1#title{
            color:red;
        }
        -> here its like   "h1 has an ID of title should have color of red"
------------------------------------------------------------------------------------------------------------------
HTML
    <div class="container1">
        <h1 class="title">Hello World..!!</h1>
    </div>
    <div class="container2">
        <h1 class="title">Good Bye World..!!</h1>
    </div>
CSS
    div.container1{
        color:red;      //here the container1's h1 will be red colored
    }
------------------------------------------------------------------------------------------------------------------------
inline styling > ID > class > html elements 

Priority:-  
            the last style will be applied.
            eg.
                h1{
                    color:red;
                    color:green;
                }
                ->here the h1 color first turn to red then it'll be green
                
        -classes have higher priority than HTML elements(h1, div, section, etc)
        -ID have higher priority than classes
        -inline styling has higher priority than ID

RECOMMENDED:
=FIRST CONSIDER USING CLASS INSTEAD OF GOING STRAIGHT TO AN ID,even if it only appears once.
=ID are also used for navigation purpose
=Try to apply only a single custom class to each of your elements
=Avoid inline styling at all costs.
===========================================================================================================================
#4 Pillar's of Web Design:
    1) Color Theory
    2) Typography
    3) User Interface (UI)
    4) User Experience (UX)
===========================================================================================================================
>>Sample Design made with canva:
https://www.canva.com/design/DAFYkEsiWUM/7fWPvRA2eHX4jhMVlvPB1A/view?website#4:hotel
===========================================================================================================================
#JavaScript(JS) :-  JavaScript uses camelCase (first letter lowercase next word letter will be uppercase)
    -ECMAScript(ES6)
    -JavaScript is Interpreted Language.
    -alert("Hello");
    -alert("Hello")
    -alert('Hello')

    -use console mode in chrome's inspect mode.
        use this to print something on console tab
        console.log("Hello world");

    -use this to print on page.
        a='Vivek'
        document.write(a);
    
    -to print h1 tag on page
        document.write("<h1>Hello world..!</h1>");
    
    -styling element:-
        document.write("<h1 style=\"color:green\">Hello world..!</h1>");            //here BackSlash used to escape the quotation
        document.write("<h1 style='color:green'>Hello world..!</h1>");

        to add multiple instructions use shift for jumping on next line in Console of chrome
            line 1      alert("Vivek")          //Shift + enter
            line 2      alert("Nikate")

    practice:   
            console.log("hello world");
            alert("Very nice");
            v = prompt("Enter your name ");
            alert("hey there\n Hello "+v);

    -to create a sample JS file go to chrome inspect in that side to Console tab,    SOURCE section, in that SNIPPETS
    eg.
        22+55
            77
        22
            22
        alert(2+5)
            undefined
        typeof(22)
            'number'
        typeof('vivek')
            'string'
        typeof(true)
            'boolean'
------------------------------------------------------------------------------------------------------------------------
Prompt in JS:
    eg. 
            -prompt("What is your name?",'Here Default name');
            -prompt("What is your name?"    );
        or
        displaying user name on screen:
            -alert(prompt("What's your name?")); 
        or
        a = prompt("What's is your name?");
        alert(a)

    eg.
        -var myName = "Vivek"; 
        -myName
            'Vivek'
        -alert(myName);
------------------------------------------------------------------------
sample code:
            MyName = 'Vivek';
            Y = prompt("Your name?");
            alert("Hello, My name is "+MyName+" welcome to my course "+Y+"!")
------------------------------------------------------------------------
JavaScript variable:
    1)var
    2)let
    3)const
------------------------------------------------------------------------
    function test() {
    var a = "3";
    var b = "8";
    
        // [a,b] =[b,a]
        
        //a = a^b;
        //b = a^b;
        //a = a^b;

        //let c = a;
        // b = a;
        // a = c;


        console.log("a is " + a);
        console.log("b is " + b);
    }
--------------------------------------------------------------------------------------------------------------------------------
#JavaScript variable Naming:
    var myname = "Vivek"
    var myname = 'Vivek'
    var myname = 123

    -var Name should start with alphabates or $ or _
        eg.
            name, $one, _one 
    -var Name should NOT start with number
    -var Name can contain $ & _ sign only. not other special symbols
    -var Name can't contain space in between
--------------------------------------------------------------------------------------------------------------------------------
#String in JS:
    1.Concatenation:
        name= 'Vivek'
        msg = 'Hello '
        alert(msg+" there, "+ name)
    
    2.Length of string:
        var name = 'nikate';
            console.log(name.length)        //6        
        var name = 'vivek'
            console.log(name.length)        //5
    
    3.Text counter:
        var n =140;
        a = prompt("Enter text")
        alert("Your have written "+(a.length)+" characters, You left with "+ (n-a.length))

        n=10
        a = prompt('hey what\'s your name')
        alert("Your name is "+a.length+" character long.!!\n You left with " + (n-a.length) +" characters!!")
    
    COMMENTING IN JS:
        //SINGLE LINE COMMENT
        /*
            Multi line comment.
        */

    4.Slice:
        Syntax:
            variableName.slice(x,y)

        a = prompt("Information:");
        alert(a.slice(0,20));
        alert(a);
        alert("You written "+a.length+" characters");

        slice(x,y)  - x including
                      y excluding
        
        var v = 'vivek';
        v.slice(0,3);           //viv

        //to find out total no.of character we get in slice function just 
        //do upperbond-lowerbond
        //ie. here 3-0 = 3 character
        
        slice(2,8)      //8-2 = 6 character we get here.
        
        //using just 10 character
        alert(prompt("Information").slice(0,10))

        NOTE: TO SKIP FIRST LETTER OF STRING USE        
                var a = 'Vivek';
                console.log(a.slice(1))             //ivek

                console.log("Vivek".slice(1))       //ivek
    
        Note:
            1.
            charAt():
            The charAt() function returns the character at a given position in a string.

            Syntax:

            string.charAt(index)
            Example:

            const str = 'flexible';
            const str2 = str.charAt(0);
            console.log(str2);

            //Output: f

            2.
            toUpperCase()
            The toUpperCase() function converts all the characters of an input string to uppercase

            Syntax:

            string.toUpperCase()
            Example

            const str = 'flexible';
            const str2 = str.toUpperCase();
            console.log(str2);

            //Output: FLEXIBLE

    eg.
        var name = prompt("Enter your name:")
        alert("Hello "+name.slice(0,1).toUpperCase()+name.slice(1))

        -------------------------------------------------------------------|
       | Parameter |	Description                                        |
       | ----------|-------------------------------------------------------|
       | start	   |  Optional.                                            |
       |           |  Start position. Default is 0.                        |
       |           |  Negative numbers select from the end of the array.   |
       | ----------|-------------------------------------------------------|
       | end       |  Optional.                                            |           
       |           |  End position. Default is last element.               |
       |           |  Negative numbers select from the end of the array.   |
        -------------------------------------------------------------------|

    TO MAKE FIRST LETTER OF SENTENCE CAPITAL:

    str = "hello my name is vivek nice to meet you.!"
    console.log(str)

    arr = str.split(" ")

    for(var i=0;i<arr.length;i++){
        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);
    }

    str = arr.join(" ");

    console.log(str)        

    Output:
            hello my name is vivek nice to meet you.!
            Hello My Name Is Vivek Nice To Meet You.!
    

        //viVEK to fix this thing

        name = prompt("Enter your name:");          
        alert("Hello "+name.charAt(0).toUpperCase()+name.slice(1).toLowerCase())


        function myFun(s) {
            alert("Hello "+s.slice(0,1).toUpperCase()+s.slice(1).toLowerCase());
        }

        myFun('viVeK')              //Vivek
        myFun('priyANKA')           //Priyanka
--------------------------------------------------------------------------------------------------------------------------------
Arithmatic Operator in JS:
    +, -, *, /, %, **

#Dog & Human Age Calculator:
        dogAge = prompt("Enter dog age?");
        humanAge = (dogAge-2)*4 + 21
        alert("Your dog is "+humanAge+"years old in human years")
--------------------------------------------------------------------------------------------------------------------------------
Increment Operator: ++
Decrement Operator: --
eg.
    var c = 4;
    c++;        //5
    
    var  v = 5;
    v--;       //4
--------------------------------------------------------------------------------------------------------------------------------
Assignment Operator:
    =     Assign
    +=    Addition
    -=    Subtract
    *=    multiply
    /=    Divide
    %=    Modulo
    **=   Exponential
eg.
    var a = 4;
    a *= 2;     //a =a *2     
                //8
--------------------------------------------------------------------------------------------------------------------------------
#Function in JS:
    1.Function without parameter with return value
        function fun1(){
            return 'something../anything';
        }

    2.Function with parameter with return value
        function fun1(a,b){
            return a+b;
        }
        
    3.Function without parameter without return value
    4.Function with parameter without return value
  
    function HumanAge(age) {
        var HumanAge = (age-2)*4 +21;    
        alert("Your dog's age in HumanAge:"+HumanAge)
    }

    HumanAge(5)         // Generates alert like :-> Your dog's age in HumanAge:33years
    HumanAge(7)         // Generates alert like :-> Your dog's age in HumanAge:41years
--------------------------------------------------------------------------------------------------------------------------------
function example:
    function getMilk(price) {   
        console.log("leaveHouse");
        console.log("You have only "+ price +" So, You can get only "+(price/5) +" bottles of milk");
        console.log("enterHouse");
        alert("you got "+(price/5)+" milk bottle")
    }

    getMilk(50);
    getMilk(8);

    *Rounding values:
        price = 89;
        alert("you got "+ ~~(price/5)+" milk bottle")               //use ~~ double tilde to round the value in JS
        alert("you got "+ Math.floor(price/5)+" milk bottle")       //use floor method round the value in JS
--------------------------------------------------------------------------------------------------------------------------------
    #Confirm in JS :-

    <body>
        <p>Click the button to display a confirm box.</p>
        <button onclick="confirmation()">click</button>
        <p id='demo'></p>

        <script>
            function confirmation(){
                var a = confirm('Press OK..!!');
                if(a == true)
                    document.getElementById('demo').innerHTML = 'Task Executed successfully✔';
                else
                    document.getElementById('demo').innerHTML = 'Task Halted.❌';
            }
        </script>
    </body>
--------------------------------------------------------------------------------------------------------------------------------
eg.
    function lifeInWeeks(age) {

        yearLeft = 90- age;
        days = 365* yearLeft;
        weeks = 52*yearLeft;
        months = 12*yearLeft;

        console.log(`You have ${days} days, ${weeks} weeks, and ${months} months left`)
    }
    lifeInWeeks(26)
    //Output:   
        You have 23360 days, 3328 weeks, and 768 months left
    
    -To escape/print the ${} interpolation use \ back-slash.
     console.log(`Your BMI is \${val}`);        //this will print ${val} instead of printing the value of val
     console.log(`Your BMI is \\ \${val}`);     //this will print the \ on screen.
--------------------------------------------------------------------------------------------------------------------------------
eg.
    function bmiCalculator(weight,height){
        // return weight/(height*height);   
        // return weight/Math.pow(height,2);                //Power Function
        return Math.round(weight/Math.pow(height,2));       //round function to round the values
    }
--------------------------------------------------------------------------------------------------------------------------------
#Random Number Generator:
    n = Math.random();
    console.log(n)
    
    -Generates 16 digit random num between 0-0.999-999-999-999-999-9
    -never will be 1.
    eg.
        Generate num 1 to 10;
        n = Math.random()*10;
        console.log(Math.floor(n)+1)        //1 to 10
        console.log(~~n)                //0 to 9

    eg. Bonding random function to Generate 1 to 6 six number only.
        n = Math.random();
        to6 = ~~(n*10+1) % 7 +1;        //double tilde (~ ~) will round the value
        console.log(to6);               //multiplying by 10 will Generate num between 0 to 9
                                        //Added 1 to generate 1 to 10 
                                        // modulo Operator with 7 will give remainder between 0 to 6
                                        //to Avoid 0 in remainder, in last intentionally added the 1
                                        //will generate the random num between 1 to 6 exacly
         n = Math.random();
         n = n*6;               //to generate the number between 0 to 5 to multiplied with 6
         n = Math.floor(n)+1;
         console.log(n);
--------------------------------------------------------------------------------------------------------------------------------
#Love Calculator in JS:
eg.
    prompt("Enter your name:");
    prompt("Enter your crush's name:")

    n = Math.random();
    n = Math.floor((n * 100) + 1)
    alert(`Your love story of chance ${n}%`);
    alert('Your love story of chance'+n+'%');   
    alert('Your love story of chance\'s '+n+'%');           //to escape the quote use back slash 
    --------------------------------------------------------------------------------------
    a = prompt("Enter your name:");
    b = prompt("Enter your crush's name:")

    n = Math.random();
    n = Math.floor((n * 100) + 1)
    alert('Your love story of '+a+' & '+b+' having a chance\'s of '+n+'%');
--------------------------------------------------------------------------------------------------------------------------------
Conditional Statement:
    a = prompt("Enter your name:");
    b = prompt("Enter your crush's name:")

    n = Math.random();
    LoveScore = Math.floor((n * 100) + 1)

    if(LoveScore >80)
        alert(`${a} & ${b} You both are crazy about each other, your LoveScore is ${LoveScore}%`)
    else
        alert(`${a} & ${b} Your LoveScore is ${LoveScore}%`)
--------------------------------------------------------------------------------------------------------------------------------
Comparator Operator:
    <, >, <=, >=, ==, ===, !=, !==, ?
    --------------------------------------
    ==	equal to
    ===	equal value and equal datatype
    !=	not equal
    !==	not equal value and not equal datatype
    >	greater than
    <	less than
    >=	greater than or equal to
    <=	less than or equal to
    ?	ternary operator

    eg.
        a =10
        b ='10'

        if(a == b)
            console.log('Same')     
        else
            console.log('not Same')

        //Output Same       == double equal don't check for data type. just checks value

        
        if(a === b)
            console.log('Same')
        else
            console.log('not Same')     

        //Output not Same       === triple equal checks for value & data type 

    ----------------------------------------
Logical Operator:

    &&	logical and
    ||	logical or
    !	logical not
eg.
        a = prompt("Enter your name:");
        b = prompt("Enter your crush's name:")

        n = Math.random();
        LoveScore = Math.floor((n * 100) + 1)

        if(LoveScore >80)
            alert(`${a} & ${b} You both are crazy about each other, your LoveScore is ${LoveScore}%`)

        if(LoveScore>=30 && LoveScore <=80)
            alert(`${a} & ${b} Your LoveScore is ${LoveScore}%`)
            
        if(LoveScore<30)
            alert(`${a} & ${b} Your LoveScore is ${LoveScore}%\n You both together like Oil & Water!`)
--------------------------------------------------------------------------------------------------------------------------------
#Leap year:-
    if(year%4 === 0)
            if(year%100 !== 0)
                console.log('Leap year.');
            else
                if(year%400 === 0)
                    console.log('Leap year.');
                else
                    console.log('Not leap year.');
        else
            console.log('Not leap year.');
--------------------------------------------------------------------------------------------------------------------------------
Bitwise     Operator:
    &	    AND	                    5 & 1	0101 & 0001 	0001	 1
    |	    OR	                    5 | 1	0101 | 0001 	0101	 5
    ~	    NOT	                    ~ 5	    ~0101       	1010     10
    ^	    XOR	                    5 ^ 1	0101 ^ 0001	    0100	 4
    <<	    left shift	            5 << 1	0101 << 1	    1010	 10
    >>	    right shift	            5 >> 1	0101 >> 1	    0010	 2
    >>>	    unsigned right shift    5 >>> 1	0101 >>> 1	    0010	 2
--------------------------------------------------------------------------------------------------------------------------------
#Arrays:    

    var array = [];

    array=[1,2,3,4,5,6,7,8,9,10];
    console.log(array);
    console.log(array.length);

    //Normal for loop
    for(var i=0;i<array.length;i++)
        document.write(array[i]+"<br />");

    //Advance for loop
    array.forEach((value, index)=>{
        console.log(`The Value ${value}, the Index : ${index}`)
    })

    
    document.write("The 2nd item in list :"+array[1]+"<BR>");
    //array starts counting from 0
    document.write(`The last forth in list :${array[3]} <br/>`);

    document.write(`The last item in list using length method :${array[array.length-1]} <br/>`);
    document.write(`The last item in list using slice :${array.slice(-1)}`);

    NOTE:   To access the last element in array 
            3 ways are there.

            1) arr[arr.length -1]   will give the last index put that in square of array to get element {13.798ms to execute}
            2) arr.slice(-1);       will give the last element.                                         {8.839ms to execute}   
            3) arr.pop();           will delete the last element in array & reduce the length by 1      {0.138ms to execute}
--------------------------------------------------------------------------------------------------------------------------------
#Arrays eg.
    a=[1,2,3,4,5,6,7,8,9,10];
    h =parseInt(prompt("enter your num :"));        //use parseInt method for conversion from other datatype to INT.

    if(a.includes(h))
        alert("Welcome to the party!!");            //includes method will return true if it contain the value else return false. 
    else
        alert("Sorry.!\n Next time.");

    OR
    #using function:

    function Checker(h) {  
    a=[1,2,3,4,5,6,7,8,9,10];
    //h =parseInt(prompt("enter your num :"));

    if(a.includes(h))
        alert(h+" Welcome to the party!!");
    else
        alert(h+" Sorry.!\n Next time.");
    }

    Checker(1)
    Checker(2)
    Checker(3)
    Checker(4)
    Checker(5)
    Checker(10)
    Checker(11)
    Checker(21)
    Checker(144)
--------------------------------------------------------------------------------------------------------------------------------
#FizzBuzz Code In JS:
Q.1 - 100 number if divisible by 3 Fizz if divisible by 5 Buzz if both then FizzBuzz
    for(var i=1;i<=100;i++)
        if(i % 3 === 0 && i % 5 === 0)
            document.write("FizzBuzz <br/>");
        else if(i % 3 === 0)
            document.write("Fizz <br/>");
        else if(i % 5 === 0)
            document.write("Buzz <br/>");
        else 
            document.write(i+"<br/>");
--------------------------------------------------------------------------------------------------------------------------------
Typing Animation using JavaScript:
    CDN :-
    <script src="https://unpkg.com/typed.js@2.0.132/dist/typed.umd.js"></script>
    
    <div style="padding: 50px;line-height: 30px;">
          <span class="typed"></span>
          <br>
          <span id="typed"></span>
          <br>
          <input type="text" name="" id="placer">
     </div>
     
     <script>
          //for class selector
          var typed = new Typed(".typed", {
               strings:['Vivek',"Mahesh",'Nikate','Nikate Vivek Mahesh','Nikate Rohini Mahesh'],
               typeSpeed: 10,
               backSpeed: 60,
               cursorChar: '/',
               loop:true,
               // smartBackspace:true //default
          });
          
          //for Id selector
          var typed = new Typed("#typed", {
               strings:['Vivek',"Mahesh",'Nikate','Nikate Vivek Mahesh','Nikate Rohini Mahesh'],
               typeSpeed: 100,
               backSpeed: 60,
               cursorChar: '_',
               loop:true,
               // smartBackspace:true //default
          });

          //for input placeholder
          var n = new Typed("#placer",{
               strings: ['Some strings without', 'Some HTML', 'Chars'],
               typeSpeed: 30,
               backSpeed: 0,
               attr: 'placeholder',
               bindInputFocusEvents: true,        //bindInputFocusEvents does when we click to input tag the animation gets pause for while
               loop: true
          });
     </script>
--------------------------------------------------------------------------------------------------------------------------------
#Array Push & Pop methods:
    arr = [];

    //to Insert element at LAST in array use PUSH method
    arr.push(1);
    arr.push(2);
    arr.push('vivek');
    arr.push(true)

    console.log(arr)
    console.log(arr.length)

    //to Delete LAST element in array use POP method
    arr.pop()
    arr.pop();
    console.log(arr)
    console.log(arr.length)

    //Output:
        (4) [1, 2, 'vivek', true]
        4
        (2) [1, 2]
        2
--------------------------------------------------------------------------------------------------------------------------------
#
    eg.Whenever we call the function it adds next num to the array.
    var i=1;
    function FizzBuzz() {
        arr.push(i);
        i++;
        console.log(arr)
    }
    
    //Output:   
        FizzBuzz()
            [1]
        FizzBuzz()
         (2) [1, 2]
        FizzBuzz()
         (3) [1, 2, 3]
        FizzBuzz()
         (4) [1, 2, 3, 4]

#Advance:
    var arr= [];
    var i=1;
    function FizzBuzz() {
        if(i % 3 === 0 && i % 5 === 0)
            arr.push("FizzBuzz");
        else if(i % 3 === 0)
            arr.push("Fizz");
        else if(i % 5 === 0)
            arr.push("Buzz");
        else
            arr.push(i);
        console.log(arr);
        i++;
    }

    FizzBuzz()
      [1]
    undefined
    FizzBuzz()
      (2) [1, 2]
    undefined
    FizzBuzz()
      (3) [1, 2, 'Fizz']
    undefined
    FizzBuzz()
      (4) [1, 2, 'Fizz', 4]
    undefined
    FizzBuzz()
      (5) [1, 2, 'Fizz', 4, 'Buzz']
    undefined
    FizzBuzz()
      (6) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz']
    undefined
    FizzBuzz()
      (7) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7]
    undefined
    FizzBuzz()
      (8) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8]
    undefined
    FizzBuzz()
      (9) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz']
    undefined
    FizzBuzz()
      (10) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz']
    undefined
    FizzBuzz()
      (11) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11]
    undefined
    FizzBuzz()
      (12) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz']
    undefined
    FizzBuzz()
      (13) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13]
    undefined
    FizzBuzz()
      (14) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14]
    undefined
    FizzBuzz()
      (15) [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz']
--------------------------------------------------------------------------------------------------------------------------------
#Game:
    function whosPaying(names) {        
            
            //Write your code here.
            var n = Math.random();      //generate random num
            var L = names.length;       
            
            n = n * L;                  //generate random num between 0 to length of array-1
            var random = Math.floor(n); //rounds that num

            return `${names[random]} is going to buy lunch today!`;
        }
--------------------------------------------------------------------------------------------------------------------------------
#Control Statement:
    1)While loop:
        Syntax:
            while(condition == true){
                    //execute this
            }
        eg.
            var count =100;
            while(count>=0){
                if(count == 1)
                    document.write(`${count} bottles of beer on the wall, ${count} bottles of beer. Take 1 down, pass it around, no bottles of beer on the wall <br />`);
                else
                    if(count == 0)
                        document.write(`no more bottles of beer on the wall,no more bottles of beer. Go to store & buy some more, 99 bottles of beer on the wall <br />`);
                    else    
                        document.write(`${count} bottles of beer on the wall, ${count} bottles of beer. Take 1 down, pass it around, ${count-1} bottles of beer on the wall <br />`);
                count--;
            }
    
    2)For loop:
        for(var i=0;i<3;i++){
            //Execute this
        }
        eg. 
            Fibonacci Series:-
                var cur = 1, pre = 0;
                var arr =[];
                n = parseInt(prompt("Enter n::"));
                    var n2 = n+2;
                    var temp;
                    for(var i=0;i<n;i++){
                        if(n2>n){
                            arr.push(i);
                            n2--;
                        }
                        else{
                            temp = pre + cur;
                            arr.push(temp);
                            pre = cur;
                            cur = temp;
                        }
                    }
                console.log(arr);
                
                var cur = 1, pre = -1;
                var arr =[];
                var temp;
                for(var i=0;i<n;i++){
                        temp = pre + cur;       
                        arr.push(temp);         
                        pre = cur;              
                        cur = temp;             
                }
                console.log(arr)
--------------------------------------------------------------------------------------------------------------------------------
#DOM (Document Object Model):-
eg. Alert pop up after page loaded
    <body onload="alert('Page Loaded')">
        <h1>Hello World.!</h1>
    </body>

#JavaScript has 3 way to add script:
    1)Inline Scripting (Adding script in html tags)
        -its not modular
        -its difficult to debug
        -also it is not a good practice

    2)Internal Scripting(Putting all scripts inside script tag at the end of BODY tag)
        -Good practice to put script (script file) tag at the ending of body tag.
        -& Good practice to put CSS file in head section of page. 
         if we put inside body at the end then it gets loaded at last & start changing all styling after site loaded.

        -STYLES MUST BE LOADED FIRST BEFORE THE SITE LOADS
        -SCRIPTS MUST ENABLED AFTER COMPLETE COMPLETE SITE LOADING IS DONE. 
        eg.
            <head>
                <meta charset="UTF-8">
                <!-- Always remember put the style sheets or CSS files link inside head section -->
                <link rel="stylesheet" href="./styles.css">
                <title>DOM</title>
            </head>
            <body onload="alert('Page Loaded')">        //inline Scripting
                <h1>Hello World.!</h1>

                //internal Scripting before ending body tag
                <script>
                    //scripts
                </script>       
            </body>

    3)External Scripting(Putting all scripts to another file, JS file & adding link of file at ending of body tag)        
            <!-- inline scripting -->
            <body onload="alert('Page Loaded')">            //when page loaded fully then this alert generated    
                <h1>Hello World.!</h1>

                <!-- internal script -->
                <script type="text/javascript">         
                    alert('Hello World..!')                 //this will executed before below code is going to execute
                </script>               

                <!-- external script  -->
                <script src="./index.js"></script>          //at the end this will get executed
            </body>
--------------------------------------------------------------------------------------------------------------------------------
JS Sample functions:
    -innerHTML/innerText are same you can use innerText instead innerHTML
    -or also you can use textContent;

    innerHTML - litterally work work as that of name. 
                it gives all the content between that particular tag.
        eg.
                <h1>
                    <strong>Hello world</strong>
                </h1>

                document.querySelector('h1').innerHTML;
                    //it will give     
                    //<strong>Hello world</strong>

    This is how the output looks like for following:
    
        <h1 id="demo">
            <strong>
                Hello
            </strong>
        </h1>
    ------------------------------------------------------------------------------
    Changing text/ text manipulation:-
    ------------------------------------------------------------------------------
        1)textContent used:
                        spacing & actual content will be given
                document.querySelector('h1').textContent;
    output:-         '\n      \n        Hello\n      \n    '

                document.querySelectorAll('li')[1].textContent='<b>TextContent</b>';
                    //won't work with tag 
                        all content will get displayed as it is on screen like this <b>TextContent</b>

    ------------------------------------------------------------------------------
        2)innerHTML used:
                        all the thing between mentioned tag will be given
                document.querySelector('h1').innerHTML;
    output:-         '\n      <strong>\n        Hello\n      </strong>\n    '

               document.querySelectorAll('li')[1].innerHTML='<b>innerHTML</b>';
                        //work with HTML tags
                        document.querySelectorAll('li')[1].innerHTML='<b>innerHTML</b>';
    ------------------------------------------------------------------------------
        3)innerText used:   just gives the text between the tags 
                            the actual content
                document.querySelector('h1').innerText;
    output:-         'Hello'

                document.querySelectorAll('li')[1].innerText='<b>innerText</b>';
                    //won't work with tag 
                        all content will get displayed as it is on screen like this <b>innerText</b>
----------------------------------------------------------------------------------------------------------------------------------

    <h1 id="text">Hello world..!!</h1>

    function ButtonClick(){
        document.getElementById('text').innerHTML = "Hey, Hacker..!!"
    }
    function ChangeColor(){
        document.getElementById('text').style.color = 'red';
    }

    function ChangeTextBack(){
        document.getElementById('text').innerHTML = "Hello World..!";
    }

    function ChangeColorOther(){
        document.getElementById('text').style.color='black';
    }

    function GeneratePop(){
        alert("Hey, Hacker..!\n How are you...?");
    }
--------------------------------------------------------------------------------------------------------------------------------
-Everything that is contained inside your HTML document is contained in an object call the document.
    -in chrome developer tool
    -console tab give this input

    -document;          //this give complete html document
    //Output:
        <html>
            <head>
                <title></title>
            </head>
            <body></body>
        <html>

    -document.firstElementChild;       // <html>
    -document.firstElementChild.firstElementChild   //firstChild's first child
        <head>
    
    -document.firstElementChild.lastElementChild;     //last element of tag will get displayed on console.
    
    -document.firstElementChild.lastElementChild.firstElementChild;
        //this will display the child of particular element.

    -we can manipulate using above methods
    REFERENCE-1:-
            <html>
                <head></head>
                <body style="background-color: rgb(255, 224, 230);">
                    <h1>Hello World...!!</h1> 
                <body>    
            </html>
    -------------------------------------------------------------------------
    -In querySelector we can pass 
        HTML tag names,
        class name,         //when giving class name specify '.' sign
        ID also.            //when giving ID name specify '#' sign

        BUT querySelector SELECTS ONLY THE FIRST ELEMENT OF ALL MATCHING CONDITIONS.
    eg.
            document.querySelector('h1');                   //select first element whos tag h1 
            //    <h1 id=​"demo">​Hello​</h1>​

            document.querySelector('#demo');                //Selects the elements having ID demo   
            //   <h1 id=​"demo">​Hello​</h1>​                      //we gave the ID to one element so here also querySelector choose one element only.
    
            document.querySelector('.item');
            //    <li class=​"item">​::marker​<a href=​"https:​/​/​www.google.com">​Google​</a>​</li>​


    -TO SELECT ALL ELEMENT WHO SATISFIES THE CONDITIONS OF querySelector, use querySelectorAll instead querySelector only.
    -In querySelectorAll for selecting particular element always mention the index of that element
    -also you can calculate the length of querySelectorAll array
        
        document.querySelectorAll('.item').length;

        document.querySelectorAll('.item');
            //NodeList(3) [li.item, li.item, li.item]0: li.item1: li.item2: li.itemlength: 3[[Prototype]]: NodeList
        
        document.querySelectorAll('.item')[0];  //selecting specific element.

    -Also in querySelector or querySelectorAll we can pass multiple selectors.
    document.querySelector('#list a')           //selects element having anchor tag inside ID 'list'

    var heading = document.firstElementChild.lastElementChild.firstElementChild;
   
    from REFERENCE 1 (Line num 1915)
    {    
        document's firstElementChild is html
        html's lastElementChild is body
        body's firstElementChild is h1
        so here heading will point to h1
    }
    heading;
    // <h1>Hello World...!!</h1> 

    heading.innerHTML = "Hello, Hacker..!!"
    'Hello, Hacker..!!'

    heading.style.color = 'blue';

    document.querySelector('h1').style.fontStyle='italic';
    heading.style.fontFamily = 'fantasy';

    //for input selector,
    document.querySelector("input").click();        //input will gets clicked automatically

    document.querySelector('h1').innerHTML = "M Nikate";
    'M Nikate'

    document.querySelector('h1').innerText = "V. M. Nikate";
    'V. M. Nikate'
--------------------------------------------------------------------------------------------------------------------------------
#Method & function:
    Method has to be associated with an objects, while calling method we have to use the dot operator.
        
        -car is a class C is object.
        C.drive();      //calling method.
        .click();

    function we can call directly, without using object.

    properties don't need to put parenthesis, & we can call using dot operator
        eg.
            .innerHTML
            .style.color
            .firstChild
        & we set using = (Assignment operator)
            selector.innerHTML = 'something';           //setting
            selector.innerHTML;                         //getting
--------------------------------------------------------------------------------------------------------------------------------
#When using HTML tree generator:- 
    if it is just showing the loading text on screen.
    or just load then 
    -right click
    -manage extension
    -in that setting tabs "Allow access to file URLs" enable this.
    STARTS WORKING.
--------------------------------------------------------------------------------------------------------------------------------   
    <!DOCTYPE html>
    <html lang="en" dir="ltr">
        <head>
            <meta charset="utf-8">
            <title>My Website</title>
            <link rel="stylesheet" href="styles.css">
        </head>
        <body>
            <h1>Hello</h1>
            <input type="checkbox">
            <button style=":active color:red;">Click Me</button>
            <ul>
            <li class="list">
                <a href="https://www.google.com">Google</a>
            </li>
                <li class="list">Second</li>    
                <li class="list">Third</li>
            </ul>
        </body>
    </html>

    var ThirdListItem = document.firstElementChild.lastElementChild.lastElementChild.lastElementChild;  
    ThirdListItem.innerHTML = 'Vivek Mahesh Nikate';
    ThirdListItem.style.color= '#A61F69';
    ThirdListItem.style.fontSize = "3em";
    ThirdListItem.style.fontStyle='italic'
    ThirdListItem.style.fontWeight='bolder'
--------------------------------------------------------------------------------------------------------------------------------
#selecting element with JS:
In JS single or double quote both work fine choose whatever you want 
    
    1)document.getElementById('id of element')                               //Selects single element in document
        eg.
            document.getElementById('text').innerHTML = "Hey, Hacker..!!"

    2)document.getElementsByTagName('html tag here')          //selects more than one element (in array)

    3)document.getElementsByClassName("html tags class name here")          //selects more than one element(like array)
        eg.
                document.getElementsByClassName('item')[0].innerHTML;   //give the content in that tag.

                //To assign value
                document.getElementsByClassName('item')[0].innerHTML = 'Vivek Nikate';

Perform this operation on console of chrome developer tool.

    1)getElementsByTagName('tag_here') method:
        -this getElementsByTagName method give Output as an array.

        document.getElementsByTagName('li');        //this will display all the li item on page in array form.
            HTMLCollection(4) [li.list, li.list, li.list, li.list]
        
        document.getElementsByTagName('li').length          //Length of array 4
        
        document.getElementsByTagName('li').style.color = 'purple'; ❌
            //above won't work ❌, cause this is array so need to select specific element, like below.

        document.getElementsByTagName('li')[1].style.fontSize= '3em';
        document.getElementsByTagName('li')[1].style.color= 'purple';
    
        document.getElementsByTagName('li')[2].innerHTML = 'Last Item';
        'Last Item'
        document.getElementsByTagName('li')[2].innerText = '2nd time changed';
        '2nd time changed'
--------------------------------------------------------------------------------------------------------------------------------
#challenge: 
    changing the color of anchor tag Having the ID 'list' as parent & 'a' tag is child
    here 'a' tag is contained within the another tag whos ID is 'list'

        document.querySelector('#list a').style.color = 'red';
        document.querySelector('#list a').style.fontSize = '2em';

    changing the color of anchor tag only whos class is item.
    document.querySelector('.item a').style.color= 'red';

THIS ALL ABOVE PROCESS OF SELECTING ELEMENT USING Document IS CALLED SELECTING ELEMENTS USING DOM.
--------------------------------------------------------------------------------------------------------------------------------
Modifying the button properties: 
    check REFERENCE DOM file

    document.querySelector('button').style.backgroundColor = 'yellow';
    document.querySelector('button').style.fontSize = '2rem';
    document.querySelector('button').style.margin = '10px 20px 30px 40px';
    document.querySelector('button').style.margin = '15px';
    document.querySelector('button').style.border = '2px solid crimson';
    document.querySelector('button').style.borderRadius = '14px';
--------------------------------------------------------------------------------------------------------------------------------
#classList in JS:- 
        -we can add class to the html tag using JS.
        -3 methods are there.
        -add        //adds class to the particular tag
        -remove     //removes the class from that particular tag
        -toggle     //reverse the situation if the class is already added then removes it     
                        else it adds that class to that tag.

    document.querySelector('button').classList;         //checking how many class applied to the button tag.
    DOMTokenList ['btn', value: 'btn']

    document.querySelector('button').classList.add('invisible');        //adding class named invisible from the button tag.
                                                                        //here all the styling mention in class invisible
                                                                             gets applied from the button

    document.querySelector('button').classList.remove('invisible');     //removing class named invisible from the button tag.
                                                                        //here all the styling mention in class invisible
                                                                             will gets removed from the button
  
    document.querySelector('button').classList.toggle('invisible');
    false
    document.querySelector('button').classList.toggle('invisible');         //it will reverse the things 
    true                                                                        //if already applied then gets removed
                                                                                //if not applied then gets applied
--------------------------------------------------------------------------------------------------------------------------------
Attribute of tags:-
    eg. src, height, width, href, class etc

    document.querySelector('a').attributes;                //to check how many attributes is attached to this tag.
    // NamedNodeMap {0: href, href: href, length: 1}       //length is 1 means only one attribute is there.

    document.querySelector('a').getAttribute("href");       //to get the value of that attribute
        //https://www.google.com
    
    document.querySelector('a').setAttribute("href","https://www.bing.com");        
            
            //setting the attribute
            //here attribute changed now.
--------------------------------------------------------------------------------------------------------------------------------
Adding click event to button:- 
    document.querySelector('button').addEventListener('click',handleClick);
    function handleClick(){
        alert("I got clicked...!");
    }

    OR anonymous function: function without any name,
       and it can same as 
        function (){

        }

        or
        (parameters) =>{

        }

        or      //if single parameter is there then no need of parenthesis.
        x => {
            return x+10;
        }

        if more than one parameters are there in a function then,
        (x,y)=>{
            return x+y;
        }

        & if you are return a single statement then no need of curly braces.
        x=> x * x;

        you can pass arguments also.
       eg.
        document.querySelector('button').addEventListener('click',function (){
            alert("I got clicked...!");
        });
--------------------------------------------------------------------------------------------------------------------------------
Higher Order Function:-
    Function that can take other functions as input.
    eg. 
        simple function-
        function add(num1, num2) {
                return num1+num2;
        }
        add(4,4);

        higher order function:
            function Multi(n1,n2){
                return n1*n2;
            }   

            function diff(n1,n2){
                return n1-n2;
            }   

            function calc(n1,n2,Operator){
                return Operator(n1,n2)
            }

            //calling
            calc(12,12,diff)    //0
            calc(12,12,add)     //24

    //Debugging JavaScript: inside Console
        debugger;           //shift+enter
        add(12,12)  
            
--------------------------------------------------------------------------------------------------------------------------------
JavaScript Objects:-
    eg.1)
            var houseKeep ={
                name: 'First Person',
                age: 20,
                Experience: 4,
                Address: '12th street YT Road, Booter',
                Language:['Marathi', 'English','Hindi'],
                work: function (){
                    alert('performing tasks');
                    console.log(HouseKeep.name);
                    console.log(HouseKeep.Experience);
                    function2();
                    fun3();
                }
            }

        calling:
            HouseKeep.work();
            conso.log(HouseKeep.Address);
        
       2)
            var obj1 = {
                name:'Person1',
                age:19,
                exp:4,
                lang:['English','Marathi','Hindi','Kannada'],
                task: function (n='Default') {
                    console.log("Hello "+n);
                }
            }
        calling:
            obj1.name;
            obj1.task();                //Default gets called. Hello Default
            obj1.task('John');          //Hello John.


Constructor Function:-
    function's every first letter is capitalized.
    we can identify the Constructor function when every words first letter is capitalized.
    eg.
        function HouseKeepers(name,age,exp,addrs,lang) {
            this.name = name;
            this.age = age;
            this.exp = exp;
            this.addrs = addrs;
            this.lang = lang;
            this.task = function (){
                alert('Task is in progress');
            }
        }

        eg.
            var person1 = new HouseKeepers('First',20,4,'Pixel no.44 G-tech block, Z-pointer',['c','c++','java','python']);
            var bot = new HouseKeepers('X-stream',15,2,'Pixel no.44 G-tech block, XZ-pointer',['ServerCommunication','CCNA']);
        
Callback Function:-
    calling the particular function when keypress event happens.

        function Listen(pheno, caller) {
            var o ={
                name:'Object-1',
                num:22,
                exp:5,
                age:30,
                engine:'cycle',
                color:'pink',
                phnm:'Vivek'
            }
            if(o.phnm === pheno)
                caller(o);
        }

        function caller(e) {
            console.log(e);
        }

        Listen('Vivek',function (e) {
            console.log(e);
        });
        
        Listen('Vivek',(e)=> {
            console.log(e);
        });

Timer Function in JS:-
    -This will generate alert of "Hello world" after 10 sec.

    setTimeout(
        function () {
            alert("Hello world");
        },10000
    );

    or

    setTimeout(()=>{
            alert("helo world");
        },10000
    );
--------------------------------------------------------------------------------------------------------------------------------
#jQuery:-
    JavaScript Library used to prevent our fingers from breaking.

    document.querySelector('h1');
    document.querySelectorAll('h1');
        //or
    jQuery('h1');
        //or
    $('h1')
        //This all will work same.
    
    use this jQuery CDN or latest one :
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    
    NOTE:- always put the CDN inside head tag & local JS file before the ending of body tag.
    or use this method
    $(document).ready(function (){
        $('h1').css('color','deeppink');
    });
    -This above function will wait till the document get ready to perform next function.
    
    or put the jquery CDN then local js file inside body tag but in just before ending.
--------------------------------------------------------------------------------------------------------------------------------
#MiniFying:-
    -Minification to reduce file size.
    -intended for browser only.
    -not human readable.
--------------------------------------------------------------------------------------------------------------------------------
    document.querySelectorAll('h1')   
    //or
    document.querySelector('h1') 
    can be used as 
    
    jQuery('h1')
    consider as same.or
    $('h1')
--------------------------------------------------------------------------------------------------------------------------------
#Manipulating styles with jQuery:-
    if you specify the single argument inside then it give the current value.       //getting 
    if you give 2 argument inside then its set that value                           //setting

    console.log($('h1').css('color'))            //prints the current color
    console.log($('h1').css('font-size'))            //prints the font-size

    $('h1').css("color",'deeppink');            //h1 will be deeppink colored.

    NOTE:-  
            keep all script code for behaviour/action inside js file.
            keep your style code for appearance inside css file.
            keep all your HTML for content.

    -Adding class using jQuery:
        $('h1').addClass('big-title');  

    -Removing class using jQuery:
        $('h1').removeClass('big-title');

    -Adding multiple classes using jQuery:-

        $('h1').addClass('big-title margin-50');
    
        -just include space between classes name.
    
    -Removing multiple classes using jQuery:-

        $('h1').removeClass('big-title margin-50');
    
    -To check h1 has that class or not:
        $('h1').hasClass('big-title');
            -here if h1 has that big-title clas then Output will be true or else false.
--------------------------------------------------------------------------------------------------------------------------------
#Manipulating Text with jQuery:-
    $('h1').text('new_text');
        -here all h1 heading on the page will get that new_text.

    $('button').html('<i>Click</i>')
        -to add the content/text with tag.
    
    $('button').click(
        ()=>{
            $('h1').text("Hello Vivek..!");
            $("h1").css("color",'hotpink');
        }
    );
--------------------------------------------------------------------------------------------------------------------------------
#Manipulating Attributes with jQuery:-  
    //getting the values
    
    $('h1').attr('class')                       //gives the class list;

    $('img').attr('src');                       //give the value of src attribute

    $('a').attr('href');


    //setting values

    $('h1').attr('class','margin-50');                  //adding margin-50 class to h1.
    $('a').attr('href','https://www.yahoo.com');        //changing the href to yahoo.

--------------------------------------------------------------------------------------------------------------------------------
Challenge:-
    -when we press any key that will apear in place of h1
    in jQuery:-
        
        $('body').keypress(
            (e)=>{
            $('h1').text(e.key)  
            }
        )    
        or
        $(document).keypress(
            (e)=>{
            $('h1').text(e.key)  
            }
        )

    normal JS:-
        document.querySelector('body').addEventListener('keypress',(e)=>{
            var k = e.key;
            document.querySelector('h1').innerHTML = k;
        });
--------------------------------------------------------------------------------------------------------------------------------
#Adding EventListener using jQuery:-
            JQuery reduces the code length.
            we can use on() function for EventListener in jQuery.
                eg. 
                    $('h1').on('event-name',CallbackFunction);
    1)Click:-
        when we click to h1 it Changes it's color to hotpink.

            $('h1').click(()=>{
                $('h1').css("color",'hotpink');
            });

        -when we click any of button then color get changed to green using jQuery

            $('button').click(()=>{
                $("h1").css('color','green');
            })
        
        using JS:-
            for(i=0;i<btn.length;i++)
            {
                document.querySelectorAll('button')[i].addEventListener('click',()=>{
                document.querySelector('h1').style.color = 'blue'  
                })
            }

    2)keypress:-
        Using JS
        -whatever we put inside input field will get displayed in console.
            document.querySelector('input').addEventListener("keypress",(e)=>{
                console.log(e.key);
            })

        Using jQuery:-
            $('input').keypress((e)=>{
                console.log(e.key)
            });


    3)On function:-
        -when we click h1 it will change it's color.
            $("h1").on('click',()=>{
                $('h1').css("color","rgb(128,132,100)")
            })
        
        -when cursor is over the h1 then it will change its color.
            $("h1").on('mouseover',()=>{
                $('h1').css("color",'crimson')
            })
--------------------------------------------------------------------------------------------------------------------------------
#Adding element using jquery:-
    
    --This will add text/button before h1 tag.
        $("h1").before('Vivek')
        $("h1").before('<button>new</button>')

    --This will add text/button after h1 tag.
        $("h1").after('Vivek')
        $("h1").after('<button>new</button>')

    --This will add text/button within h1 tag but at starting.
        $("h1").prepend('Vivek')    
        $("h1").prepend('<button>new</button>')

    --This will add text/button within h1 tag but at ending.
        $("h1").append('Vivek')
        $("h1").append('<button>new</button>')

    --Removing element using jQuery:-
        $('button').remove();
--------------------------------------------------------------------------------------------------------------------------------
#JQuery Animation:-
    1)hide(), show(), toggle():-
        --This will hide the h1 when we click to it.
            $("h1").on('click',()=>{
                $('h1').hide(); 
            });
        
        --This will hide the h1 when we click any button on page.
            $("button").on('click',()=>{
                $('h1').hide(); 
            });
        --This will show the h1 when we click any button on page.
            $("button").on('click',()=>{
                $('h1').show(); 
            });
        
        --Toggle between hide & show.
            $("button").on('click',()=>{
                $('h1').toggle(); 
            });
    
    2) fadeOut(), fadeInt(), fadeToggle():-
    
        --when we click to any of button on page this will make h1 invisible
            $("button").on('click',()=>{
                $('h1').fadeOut(); 
            });

        --when we click to any of button on page this will make h1 Visible
            $("button").on('click',()=>{
                $('h1').fadeIn(); 
            });

        --when we click to any of button on page this will make h1 to Toggle between hide & show.
                    $("button").on('click',()=>{
                        $('h1').fadeToggle(); 
                    });

    3)slideUp(), slideDown(), slideToggle():-

        --h1 will get disappeared slideUP
                    $("button").on('click',()=>{
                        $('h1').slideUp(); 
                    });

        --h1 will re-appeared slideDown

            $("button").on('click',()=>{
                        $('h1').slideDown(); 
                    });

        --Toggle
            $("button").on('click',()=>{
                        $('h1').slideToggle(); 
                    });
        
    4) Custom animation:-   
        -in animate method inside {} braces you can add css rule who has numeric value not string.
            property value should numeric only.
                    $("button").on('click',()=>{
                        $('h1').animate({opacity:0.5}); 
                    });

                    $("button").on('click',()=>{
                        $('h1').animate({margin:"50%"}); 
                    });

        -Chaining the animation:-   
            $('button').on('click',()=>{
                $('h1').slideUp().slideDown().animate({opacity:.5})  
            });

            -first slideUp then slideDown laterwords opacity will change.
------------------------------------------------------------------------------------------------------------------------------------
Section 21: The Unix Command Line:
    -Git installation
    -CLI (Command Line Interface)
        BASH = Bourne Again SHell
            -Bash is a Command line interpreter for Unix systems.
            -Linux is also a Unix like system.
            -If you use Command line then you will have greater control over system
            eg.
                creating folder which is hidden
                    mkdir .Secret
                    mkdir .dummy

    -To Open File explorer:
        explorer.exe
    -open in current folder use period(.)
        explorer.exe .

    -Directory Navigation:
        -list command
            ls
        -Change Directory
            cd directory
            cd dire1/dire2/dire3     -3 step inside that Directory
            eg.
                cd document/learn/language 

            -hit up/down arrow button to go for previous commands
            -to come back from current folder
                cd ..
            
            to come back 2 step back 
                cd ../../
            
            to go back to base
                cd ~
                cd
            
            NOTE: You also can drag & drop a particular file in
                  terminal or command prompt it will take its path.

            -Use Alt + mouse to move your cursor in between path you want to edit.
            -To stop current command execution press crtl + c

        -Creating, Opening, Removing Files via CLI:
            -folder creating
                mkdir Vivek

                -multiple folder
                    mkdir two three four five six seven eight nine ten

            -folder removing:
                rm -rf <folder_name>        //-rf recursively & forcefully
                rm -rf viVeK
                rm -r two/                  //just recursively

                -multiple folder remove:
                    rm -r <folder1> <folder2> <folder3> <folder4> <folder5> <folder6> <folder7>
                    rm -r two/ three/ four/ five/ six/ seven/ eight/ nine/ ten/

            -file creating
                touch vivek.txt 

                -multiple:
                touch vivek.txt vivek1.txt  vivek2.txt viVeK3.txt
            
            -file removing
                rm vivek.txt 
                
                -multiple:
                    rm vivek.txt vivek1.txt  vivek2.txt viVeK3.txt

                -removing all files within particular folder
                    rm *
            
            -pwd (Print Working Directory)
------------------------------------------------------------------------------------------------------------------------------------
Section 22: Backend Web Development:
    Full Stack = Frontend + Backend

    Backend:-  consists of
            server
            application
            database
    
    WebApp:
        -is a application which will responds to the user.
        -for Backend using NodeJS
------------------------------------------------------------------------------------------------------------------------------------
Section 23: Node Js:
    -An asynchronous event-driven JavaScript runtime, 
     Node.Js is design to build Scalable network applications.

    -To run the JS files
    -Create index.js file 
        touch index.js

    -then use node command like  
        node index.js
    -This will execute the js file.

    -REPL (Read Evaluation Print Loop):-
        -var & let to create variables.
        -const is to create contstants.
        eg.
            var i,a;
            const PI = 90;
        
        eg. file copying using NodeJS
            const fs = require('fs');                       //this is the Syntax
            fs.copyFileSync('file 1.txt','file 2.txt');      //file 1.txt should be present before copying to 2nd file.

    -NPM (Node Package Manager)
        -npm init
            -after this command give name to Project & at end it'll create package.json file.
        
        -npm init -y 
            //keeping all default option & initializing npm.
            //-y yes for Everything

        -running multiple commands at same Line
            touch index.html index.js; npm init -y      //creating files & initializing npm also.
        
        -npm install <package_name>
        -npm i <package_name>
        eg.
            npm install superheroes
            npm i superheroes
            npm i marvel-comics-characters

            marvel.js
                
                var n = require('marvel-comics-characters');

                //generating one random name
                console.log(n.random());

                //generating 4 random names
                console.log(n.random(4));

                //to check all names
                console.log(n.all);
            
    -QR code Generator:
        -for URLs.
        
------------------------------------------------------------------------------------------------------------------------------------
Section 24: Express.js with Node.js
    Express:
        -Express is a Node framework.
        -We can add jQuery onto our Javascript to add extra features and make it easier working with Javascript
        -It's a framework, or basically a bunch of code that somebody else wrote, that adds extra features and
         helps to organize and structure your code, specifically for web applications built with Node.

    Creating our first Server with Express:
        -creating Project directory
            mkdir <project1>
        
        -creating js file in that folder
            touch index.js
        
        -initializing npm there.
            npm init            //rest all default.
        
        -installing Express
            npm install express
            npm i express
        
        -Server Creation simple code:

            const express = require('express');
            const app = express();
            app.listen(4555,()=>{
                console.log("On Port no. 4555 server is running");
            });

            //This is Callback function.
            or
            app.listen(4555,function (){
                console.log("On Port no. 4555 server is running");
            });
        
    -Handling response & request: GET request
        -There should be one res.send method for one app.get request not more than one send method.
        -but we can use res.write method more than once.

            res.write("<p>Description:"+desc+"</p>");
            res.write("<center><h1>The Temperature in Bengaluru is "+ temp1 +" </h1></center>")
            res.send();
            
            const express = require('express');
            
            const app = express();

            app.get('/', function (response, request){
                response.send('<h1>Hello world..!</h1>')
            })
                
            or

            app.get('/', (req, res) =>{
                console.log(req);
                res.send('<h1> Hello world..!</h1>')
            })

            app.listen(4555,()=>{
                console.log("On Port no. 4555 server is running");
            });

            -here '/' in get method indicates home or root level or application.
             in get method there are 2 arguments we passed,
             first '/' path
             second the Callback function.
    
    -Nodemon installation:
        -used for restarting the server when changes detected.
        -to install nodemon
         npm install -g nodemon
         npm i -g nodemon
        
        -with administrative Privileges
            sudo npm i -g nodemon
            sudo npm install -g nodemon

        -to run file with nodemon use this command
            nodemon server.js
            nodemon <file_name>

    -Working With Routes:
        NOTE:- This is anonymous function (function without name) Syntax
                in Js you can use single or double quote it works fine.
            ()=>{
                //code
            }

        -for get request
            -for home page:
            
                app.get('/', (req, res)=>{
                    console.log("This is callback Function of Home page");
                    res.send('<h1>Home Page</h1>')
                })

            -for Contact Us page:
                app.get('/contact',function (){
                    console.log('This is callback function of ContactUs page');
                    res.send("contact me at : vivek.nikate@capgemini.com");
                })
            -for About Us page:
                app.get('/about',function (){
                    console.log('This is callback function of AboutUs page');
                    res.send('<h1>About Us</h1>')
                })
            
    -Calculator WebApp:
        -Procedure for creating WebApp
            -create a folder
                mkdir <folder_name>
                mkdir project1
            
            -inside that folder create a  JS file
                touch <filename.extension>
                touch server.js
            
            -initialize the npm inside that folder
                npm init
            
            -install Express Framework
                npm install express
            
            -import express
                const express = require('express');
                const app = express();

            -create response for Home route or different Routes
                app.get('/', (req, res)=>{
                        res.send('<h1>Home Page</h1>')
                    });
            
            -create response for ContactUs route
                app.get('/contact',function (){
                        res.send("contact me at : vivek.nikate@capgemini.com");
                    });

            -Listen all things on any port 
                app.listen(3000, ()=>{
                    console.log('Server is running on port 3000');
                })

            -To run application use nodemon command
                nodemon <file_name>
                nodemon server.js

    -Responding to request with HTML files:
        -<input type="text" name="num1" placeholder="1st num">
            -here the 'name' attribute is like a variable which is identified uniquely when we submit form.

            to send the file to request:- 
                -we need to use res.sendFile method.
                -but res.sendFile is used for STATIC FILES only.
                res.sendFile('file path');
                -file path must be absolute or specify root to res.sendFile
            
            -to send the file to request
                res.sendFile(__dirname+'/index.html');
                res.sendFile(path.join(__dirname,'../public/file.html'));

                - here __dirname is a const which will give the complete file location
                - __dirname is directory name

            -printing
                console.log(__dirname);
                C:\Users\vnikate\Desktop\FSD Angela Yu course\ALL SECTION WISE\Section 24 Express & NodeJS\Calculator
        
            -body-parse:
                //installing
                    -npm i body-parser
                    -npm install body-parser

                //importing
                const bodyParser = require('body-parser');

    -Processing Request with bodyParser:
        <form action='/' method='post'> & <form  method='post'> both are same.
        -form action path is default to '/' (home).

        -HTTP return code
            100 - Hold on
            200 - here you go (success)
            300 - go away (security related)
            400 - You screwed up (client side problem)
            500 - I screwed up (server side problem)

        -When you submit data then response for that we use post method
            app.post('/', (req,res)=>{
                res.send("Thanks for posting");
            })

            -The above code is for just one route (for home page) only.
        
        -whatever user entered into the form input-data, to access them we use bodyParser.
         to tap into that data we use name attribute of input element
            -npm i body-parser
            -npm install body-parser
            -importing
            const bodyParser = require('body-parser');

            app.use(bodyParse.text())
                -parse all request into text
                app.use(bodyParser.json())
                -parse all request into json

                --This below code urlencoded you have to write everytime when you use bodyParse
                    app.use(bodyParser.urlencoded({extended:true}));
                        -parse all request into urlencoded
                        -"extended:true" is allows us to post nested object.

            -to tap into the data
                app.post('/', bodyParser.urlencoded({extended:true}), (req,res)=>{
                    res.send(req.body);
                    console.log(req.body);
                })
                -req.body is an object which contains the data. 
                    below all are input fields name attributes value,
                    we are accessing with req.body.<name's attribute value>
                    -req.body.name
                    -req.body.email
                    -req.body.password
                    -req.body.address
                    -req.body.city
                    -req.body.state
                    -req.body.zip
                    -req.body.phone
                    -req.body.fax
                    -req.body.website
                    -req.body.company
                    -req.body.company_name
                    -req.body.company_address
                    -req.body.company_city
                    -req.body.company_state
                    -req.body.company_zip
                    -req.body.company_phone
                    -req.body.company_fax
                    -req.body.company_website
                    -req.body.company_email

            -After submiting input data will get printed.         
                app.post('/',(req,res)=>{
                    console.log(req.body);
                    res.send("Thanks for posting");
                })
            
            -Converting into integer there are two method using 
                -parseInt
                -Number
                    var n1 = '30'
                    var n2 = '20'
                    n1 = parseInt(n1)
                        -parseInt(n1) will convert n1 into integer. 
                    n2 = Number(n2)
                        -Number(n2) will convert n2 into integer.
                    res.send("Thanks for posting \n"+`The result of ${n1} + ${n2} = ${n1+n2}`);

    -Project:
        inside this project folder run this below commands before starting 
        the actual project on bash.
        -npm init
        -npm install express
        -npm install body-parser

        HTML code:
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Calculator</title>
                <style>
                    body{
                        text-align: center;
                    }
                </style>
            </head>
            <body>
                <h1>Calculator</h1>
                <form action="/" method="post">
                    <input type="text" name="n1" placeholder="first" /><br><br>
                    <input type="text" name="n2" placeholder="second" /> <br><br>
                    <button type="submit">Submit</button>
                </form>
            </body>
            </html>
        
        JS code:
            const bodyParser = require('body-parser');
            const express = require('express');

            const app = express();

            app.use(bodyParser.urlencoded({extended:true}));

            app.get('/', (req, res)=>{
                res.sendFile(__dirname+'/index.html')
            })


            app.post('/',(req, res)=>{
                
                let a = Number(req.body.n1)
                let b = Number(req.body.n2)

                res.send(`<center> <h1>Thanks for Submiting :: Answer is ::${a+b}</h1></center>`);

                // res.sendFile(__dirname+'/Outcome.html');
            })


            app.listen(3000, (req, res)=>{
                console.log('Server is running on port 3000');
            })

    -BMI Challenge:
        HTML code:
            <!DOCTYPE html>
            <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta http-equiv="X-UA-Compatible" content="IE=edge">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>BMI Calculator</title>
                    <style>
                        body{
                            text-align: center;
                        }
                    </style>
                </head>
                <body>
                    <h1>BMI Calculator</h1>
                    <form method="post">
                        <input type="text" name="wt" placeholder="Enter weight" required/> <br> <br>
                        <input type="text" name="ht" placeholder="Enter height" required/> <br> <br>
                        <button type="submit">Calculate BMI</button>
                    </form>
                </body>
            </html>

        JS code:                
            const express = require('express');
            const bodyParse = require('body-parser');
            
            const app = express();
            app.use(bodyParse(urlencoded({extended:true})));
        
            app.get('/bmicalculator', (req, res)=>{
                res.sendFile(__dirname+'/bmiCalculator.html')
            })

            app.post('/bmicalculator', (req, res) =>{
                
                let a = parseInt(req.body.wt)
                let b = parseInt(req.body.ht)
                res.send(`Your BMI ${a / b}`);     
            })

            app.listen(3000, ()=>{
                console.log("Server started running on port no.3000");
            })

    -Introduction to Middleware:
        -body-parser
        -to get the path of computer
            import {dirname} from 'path';
            import {fileURLToPath} from 'url';
            const __dirname = dirname(fileURLToPath(import.meta.url));
        
        -sample stuff:
            <form action="/vicky" method="POST">                    //what path in action we mention, then we have to create post request for that path.
                <label for="street">Street Name:</label>            //if instead of vicky there is submit then, we need to create submit post route.
                <input type="text" name="street" required>
                <label for="pet">Pet Name:</label>
                <input type="text" name="pet" required>
                <input type="submit" value="Submit">
            </form>

            index.js file:
                app.post('/vicky',(req, res)=>{
                    res.send('<h1>This is form submited data on vicky\'s path.</h1>')
                });

                import bodyParser from 'body-parser';
                app.use(bodyParser.urlencoded({extended:true}));
                app.post('/submit',(req, res)=>{
                     console.log(req.body);
                })
    
    -Custom Middleware: Morgan

        import morgan from 'morgan';
        app.use(morgan("tiny"))


        function logger(req, res, next){
            console.log("Method: ",req.method,"Url :", req.url);
            next();
        }
        app.use(logger);
    
    -Secret Access Project:
        let isUserAuthenticated = false;

        //creating middleware
        function passwordCheck(req, res, next) {
            const pass = req.body['password'];

            if(pass == 'Vivek@123')
            {
                isUserAuthenticated = true;
            }
            next();
        }

        //using middleware
        app.use(passwordCheck);
------------------------------------------------------------------------------------------------------------------------------------
Section 25: APIs- Application Programming Interfaces
    An API is a set of commands, functions, protocols, and objects that programmers can use to 
    create software or interact with an external system.

    -EndPoint
        just simple one url.
        http://api/v1/user

    -Paths
        Path & parameters used to retrive specific data you want from an external server.
        url which changes its path after some common part.
        eg.
            /api/v1/user/login
            /api/v1/user/register
            /api/v1/user/profile
            /api/v1/user/logout

    -Parameters
        -parameter goes at the end of url after the question mark
         in key-value pair
        -parameters in the url.
        -parameter sequence doesn't matter at all as long as the parameter separated by & sign
         ampersign
        eg.
        /api/v1/user/login?email=<email>&password=<password>
        /api/v1/user/login?email=user@gmail.com&password=123456

        3 query first query followed by ? mark then
        further/ subsequent queries separated using & sign
        more than 1 parameter is there then we separate them with & sign

            /api/v1/user/login?email=<email>&password=<password>&type=yes
        
        eg.
            Postman application used for testing url
            for this link retrived the data
                -get link
                    https://api.openweathermap.org/data/2.5/weather
                -parameter
                    https://api.openweathermap.org/data/2.5/weather?q=Bengaluru&appid=36a426e3b4273c7036e6726ddbd68c64
                    https://api.openweathermap.org/data/2.5/weather?q=Bengaluru&appid=36a426e3b4273c7036e6726ddbd68c64&units=metric

            JSON:- JavaScript Object Notation

    -Authentication

    -making GET request with node HTTP module:
        creating Weather project:-
            Practiced different things

                app.get('/',(req, res)=>{
                    const url = 'https://api.openweathermap.org/data/2.5/weather?q=Bengaluru&units=metric&appid=36a426e3b4273c7036e6726ddbd68c64'

                    https.get(url, (response)=>{
                        // console.log(response);
                        console.log(response.statusCode);
                        if(response.statusCode == 200)
                            res.send("<center><h1>The Server Up & running</h1></center>")
                        else if(response.statusCode == 404)
                            res.send("<center><h1>Requested Page Not Found</h1></center>")
                        else if(response.statusCode == 401)
                            res.send("<center><h1>Authentication App Id problem.</h1></center>")
                    });
                })

                app.listen(3000,()=>{
                    console.log("Server is Running on port 3000");
                })
            --------------------------------------------------------------------------------
                var obj = {
                            name: 'vivek',
                            age: 22,
                            city: 'Bengaluru',
                            country: 'India'
                    }

                    console.log(JSON.stringify(obj));
                        //{"name":"vivek","age":22,"city":"Bengaluru","country":"India"}

                    console.log(obj)
                        //{ name: 'vivek', age: 22, city: 'Bengaluru', country: 'India' }
            --------------------------------------------------------------------------------
            -Using body-parser making post request to server:
            Weather Project JS file:
                
                const express = require("express");
                const bodyParser = require('body-parser');
                const app = express();

                const https = require('https');
                const { urlencoded } = require("body-parser");

                app.use(bodyParser(urlencoded({extended:true})));

                app.get('/',(req, res)=>{
                    res.sendFile(__dirname+'/index.html');
                })


                app.post('/', (req, res)=>{
                    
                    const apiKey = '36a426e3b4273c7036e6726ddbd68c64';
                    const unit = 'metric';
                    const city = req.body.cityName;

                    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=${unit}&appid=${apiKey}`

                    https.get(url, (response)=>{
                        // // console.log(response);     //response will print complete data received from that url
                            // // console.log(response.statusCode);

                            // if(response.statusCode == 200)
                            //      res.send("<center><h1>The Server Up & running</h1></center>")
                            // else if(response.statusCode == 404)
                            //      res.send("<center><h1>Requested Page Not Found</h1></center>")
                            // else if(response.statusCode == 401)
                            //      res.send("<center><h1>Authentication App Id problem.</h1></center>")

                        response.on('data', (info)=>{
                            // console.log(info); //This is in hexadecimal code to convert it into JSON use below method

                            // console.log(JSON.parse(info));
                            // res.send(JSON.parse(info));
                            
                            // const weatherData = JSON.parse(info);
                            // console.log(weatherData)

                            // const id = weatherData.weather[0].id;             //in weather data there is another array called weather so we gave index there.
                            // console.log(id);
                            
                            // //to ACCESS the specific data from json file you can copy the path from JSON VIEWER PRO chrom extension
                            
                                    // const desc = weatherData.weather[0].description;
                                    // console.log(desc);

                                    // var obj = {
                                    //      name: 'vivek',
                                    //      age: 22,
                                    //      city: 'Bengaluru',
                                    //      country: 'India'
                                    // }

                                    // console.log(JSON.stringify(obj));
                                    // console.log(obj)

                                    // const temp = weatherData.main.temp;
                                    // console.log(temp);
                            
                            const weatherData = JSON.parse(info);
                            const temp1 = weatherData.main.temp
                            console.log(temp1);

                            const desc = weatherData.weather[0].description;
                            console.log(desc);

                            const icon = weatherData.weather[0].icon;
                            // const imgURL = `https://openweathermap.org/img/wn/${icon}@2x.png`
                            const imgURL = "https://openweathermap.org/img/wn/"+icon+"@2x.png";

                            // res.send(`<center><h1>The Temperature in Bengaluru is ${temp1} <br /> Description : ${desc}</h1></center>`)
                            
                            
                            res.send("<center> <h1>The Temperature in "+city+" is "+ temp1 +" <img src="+imgURL+" /> </h1> <p>In "+city+" <cite>"+desc+"</cite> there.</p> </center>")
                            
                            // res.write("<p>Description:"+desc+"</p>");
                            // res.write("<center><h1>The Temperature in Bengaluru is "+ temp1 +" <img src="+imgURL+" /> </h1></center>")
                            // res.write(`<center><h1>The Temperature in Bengaluru is  ${temp1} <img src= ${imgURL} /> </h1></center>`)
                            // res.send();

                        })

                    });
                })

                app.listen(3000,()=>{
                    console.log("Server is Running on port 3000");
                })

            Weather Project HTML File:
                <!DOCTYPE html>
                <html lang="en">
                    <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Weather App</title>
                        <style>
                            body{
                                    text-align: center;
                            }
                        </style>
                    </head>
                    <body>
                        <h1>Weather Project</h1>
                        <!-- <form action="/" method="post">          action tells the form where to submit or to which server data need to submitted. -->
                            <!-- by default the action value is '/' this. like action='/' -->
                        <form method="post">
                            <label for="city">City Name :</label>
                            <input type="text" name="cityName" id="city"/>
                            <button>Check</button>
                            <!-- <button type="submit">Submit</button> -->
                            <!-- if you mention the type=submit or didn't still its ok -->
                        </form>
                    </body>
                </html>
            --------------------------------------------------------------------------------                
            -NewsLetter/ Email marketing Project:
                -folder created 'newletter'
                    npm init                                //initialized
                    npm i exrpess body-parser               //exrpess & body-parser installed.

                    -creating express server
                    const express = require('express');
                    const app = express();
                    
                    app.listen(4000,()=>{
                        console.log("Server is Running on port 4000");
                    });
                
                app.use(exrpess.static('folder_name'));
                //for keeping your static images & styles folder in it.

                -Heroku:
                    using to deploy WebApp.
                    Heroku is a cloud platform as a service supporting several programming languages. 
                    One of the first cloud platforms.

                    -application deploying to clouds, so it will choose any port on the fly (dynamically) so use
                        process.env.PORT
                        app.listen(process.env.PORT,()=>{
                            console.log("Server is Running on port 4000");
                        });
                        or might be on local system also

                        app.listen(process.env.PORT || 4000 ,()=>{
                            console.log("Server is Running on port 4000");
                        });

                    -initialize the git repo inside PROJECT folder & commit all changes you made.
                    -crete Procfile file.
                    -Procfile don't have extension.
                     inside that Procfile mention command to run application.
                     eg.
                        web: node app.js
-----------------------------------------------------------------------------------------------------------------------------------
Section 26: Git, GitHub & Version Control System (VCS)
    -You can create a save point.

    -to edit file using terminal there are 3 commands
        vi <file_name.txt>
        eg.
            vi index.html

        Type  :qa!  and press <Enter> to abandon all changes and exit Vim
        To save changes you made press :wq press <Enter>
        press CRTL + C 

        vim <file_name.txt>
        eg.
            vim index.html
        
        nano <file_name.txt>
            eg.
                nano index.html

    -git init           
        // in project/specific folder where your all important code is there use this command to initialize new repository
    
    -create new file 
        touch sample.txt
    
    -add files in staging/tracking area:
        git add <file_name>
        git add sample.txt      // to add specific file

        git add .
                //to add all files in that folder at once.
    
    -to check the status of project
        git status
    
    -git commit --amend     // to change last commit msg.
    
    -git diff       //to check difference between last commit file & recent changes made

    -git checkout <file_name>   //to go back previous version of file

    -git checkout -f            //all files go to previous version

    //to check all commits
    -git log 

    //just one commit
    git log -1

    //for just 2 commits
    git log -2 

    //shor oneline msg
    git log -2 --oneline
    git log --oneline

     //to push the existing repo on github
    git remote add <name_here> <url>
    -git remote add origin git@github.com:viveknikate/GitHarryPractice.git

    //to remove remote which you added before
         git remote remove <remote_name>
         git remote remove origin
        
    //to check all remotes link
    git remote -v

    //to remove from commited or staging area
    git rm --cached <file_name>

    //to see which files are in tracking mode
    -git ls-files

    //#To check files which are ignored but still in tracking use this command
    git ls-files -ci --exclude-standard

    after you found such files then remove them using this command
    git rm --cached <file_name_you_want_to_ignore>

    //to ignore the particular files
        create .gitignore file
            -touch .gitignore

        -in .gitignore file you can comment using # sign (Pound).
        
        -in that file mention the extensions you want to ignore
         or specific file name
            eg.
                secrete.txt         //just ignore secrete txt file but track other .txt files.
                *.html
                *.web
        
        -VISIT THE .gitignore Repository ON GitHub FOR PARTICULAR Project THEY WILL TELL YOU WHICH FILES
        SHOULD BE IGNORED

    -Git clone:
        //clone in current folder
            git clone https://github.com/the-pratik/react-counter-app.git .
        
        //clone with Vivek as name
            git clone https://github.com/the-pratik/react-counter-app.git Vivek
        
        //just clone with default name
            git clone https://github.com/the-pratik/react-counter-app.git

    -Git branch
        git branch      //list  * (asterik) represent the currently in which branch you are.
        git branch <name>    //create
        git branch new    //create

        change branch
        git checkout <branch_name>
        git checkout new

    -to check the branch graph
        go to GitHub
        go to any repository -> insight -> Network tab

    -Fork:
        Copying the repository to our account.
------------------------------------------------------------------------------------------------------------------------------------
Section 27: EJS:
    -Template:
        EJS stands for Embedded JavaScript.
        EJS is a template engine.
        eg.
            app.get('/', (req, res)=>{
                var today = new Date();

                if(today.getDay() === 6 || today.getDay() ===0)
                {
                    res.write("<h1>This is a Weekend.! no work Yah..!</h1>")
                    res.write("<p>This is paragram of weekdays</p>")
                }
                else{
                    res.write("<h1>Uh..! NO..!, I have to work.. This is weekday</h1>")
                    
                }
                res.send();         //writing multiple write methods & sending them all at once using send method.
            })

    -Creating Your first EJS Template:
        -need to install ejs module first.
         npm i ejs

        -for using EJS template after installing create views folder inside that
         create files with '.ejs' extension.

        -if you have more than 5 if-else statements then use switch statements

        -EJS interpolation Markup (place variable's value within this markup )
            <h1>Today day is <%=  %></h1>
            eg.
                HTML:
                    <body>
                        <h1>Today day is <%=  kindOfDay%> </h1>
                    </body>

                JS:
                    var today = new Date().getDay();
                    //today=4
                    var day='';

                    switch(today){
                        case 0:
                        day = 'Sunday'
                        break;
                        case 1:
                            day = 'Monday'
                            break;
                        case 2:
                            day = 'Tuesday'
                            break;
                        case 3:
                            day = 'Wednesday'
                            break;
                        case 4:
                            day = 'Thursday'
                            break;
                        case 5:
                            day = 'Friday'
                            break;
                        case 6:
                            day = 'Saturday'
                            break;
                        case 7:
                            day = 'Sunday'
                            break;
                        default:
                        console.log("Invalid Day.!");
                        break;
                    }

                    res.render('list',{kindOfDay:day});         //above html code is within the list.ejs file
                
                ---------------------------
                function fetchDate(){
     
                    var options = {
                        weekday:'long',
                        month:'long',
                        year:'numeric',
                        day:'numeric'
                    }
                    
                    var today = new Date().toLocaleDateString('en-US',options);
                    return today;
                }

                
    -Scriptlet tag <% %>
        -control flow no output
        -You need to add this tag at start & end of line.
        -just add this tag for condition/ decision making statements.
        eg.
            <body>
                <% if(kindOfDay === 'Saturday' || kindOfDay === 'Sunday'){ %>
                
                    <h1 style="color: purple;">Today day is <%=  kindOfDay %> Enjoy the day.!</h1>

                <% }else{ %>

                    <h1 style="color: red;">Today day is <%=  kindOfDay %>  Need to work.</h1>

                <% }%>
            </body>
    
    -For loop
        <% for(let i=0;i<newListItems.length; i++) { %>  
            <li>
                <%= newListItems[i] %>
            </li>
        <%}%>
    
    -post method:
        app.post('/',(req, res)=>{

            const item = req.body.newItem;
            items.push(item);

            // console.log(items);
            res.redirect('/');
        })

    -Scope of variable
        FOR JavaScript ONLY.
        Most of the time use let or const keywords to declare variable. Avoid Using var keyyword.
        Local variable- 
                the variable are accessible where they are declared.
                will not be accessible out of that function or block
        
        Global variable-
                accessible anywhere in program.
        
        -function is like hard wall, we can't access the variable declared inside the function,
            outside of that function

        -anything other than function, if we declare variable inside if block or else block or in while/for loop
            we can access them outside of that block, these block are like soft walls.

        -if you declare variable with var keyword inside if/else block or for/while/do-while loop, 
            then it is considered as Global variable, you can access them anywhere in program
        
        -if you declare variable with let/const keywords inside if/else block for/while/do-while loop,
            then it is considered as local variable. you can acces them inside block only.
    
    -Styling to To-Do List:
        -styling won't work directly here.
        -all styles or static files also served by our server.

        -need to create 'public' folder inside that
            you can have CSS folder, Javascript folder, images folder 
            & then we can tell express to serve this public folder as static folder.
        -we can serve static content like css, js, images, html files from public folder.
        Syntax:
            app.use(express.static('folder_name'));
            app.use(express.static('public'));
    
    -EJS Tags:
        <%= variable %>                     JS output
        <% console.log('asdf') %>           JS code
        <%- <h1>Hello</h1> %>               Render HTML
        <%%  %%>                        to show <% %> ejs tags
        <%# This is comment %>              comment
        <%- include('filename') %>          insert ejs file


    -Template vs Layout:
        Layouts persist across routes and maintain their state (Design of page stays same). 
        Templates create a new instance for each of their children on navigation (when page changes the title & content gets changed), 
        no state is preserved and DOM elements are re-created(but design stays the same).

        Design stays same is called Layout.

            This Syntax we used for partials design, all are located inside 'views' folder
            <%- include('path/file_name') -%>
            <%- include('./partial/header'); -%>
            <%- include('./partial/header');%>
            
            other ways,
                <%- include('header'); -%>
                <% include ./header.ejs %>
                
                <% include partials/header.ejs %>

                <%- include ./header.ejs -%>
                <%- include ./header.ejs %>

            eg.
                <%- include('Footer') -%>
                <%- include('Header') -%>

                *Header.ejs
                    //half header file

                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <link rel="stylesheet" href="../css/styles.css">
                        <title>ToDo List</title>
                    </head>
                    <body>

                *Footer.ejs
                    //footer file rest part of header & tags

                            <footer>
                                <div class="box">
                                    <p>
                                        Copyright&copy; VivekNikate@2024
                                    </p>
                                </div>
                            </footer>
                        </body>
                    </html>

                *about.ejs
                    <%- include('Header') -%>
                    <%- include('Footer') -%>
                eg.

                    <%- include('Header') -%>

                    <div class="container">
                        <h1>About Us</h1>
                        <p>
                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam sed erat sed nunc ultricies ultrices.
                            Etiam sed erat sed nunc ultricies ultrices. Etiam sed erat sed nunc ultricies ultrices. Etiam sed erat sed
                            nunc ultricies ultrices. Etiam sed erat sed nunc ultricies ultrices. Etiam sed erat sed nunc ultricies
                            ultrices. Etiam sed erat sed nunc ultricies ultrices. Etiam sed erat sed nunc ultricies ultrices. Etiam sed
                            erat sed nunc ultricies ultrices. Etiam sed erat sed nunc ultricies ultrices. Etiam sed erat sed nunc
                            ultricies ultrices. Etiam sed erat sed nunc ultricies ultrices. Etiam sed erat sed nunc ultricies ultrices.
                        </p>
                    </div>

                    <%- include('Footer') -%>

        content or title of page changes is called Template.
            <%= variableName %>

    -Node Module exports how to pass functions & data:
        -Don't forget TO EXPORT the module after creattion
        -module creation:
        date.js
            module.exports = getDate;           //exports one function only

            function getDate(){
                let today = new Date().toLocalDateString('en-US',{weekday:'long', month:'long', year:'numeric', day:'numeric'})
                return today;
            }

            ---------------------------
            -making to exports 2 or more functions
                module.exports.getDate = getDate;           //exports one or more function only

                function getDate(){
                    let today = new Date().toLocalDateString('en-US',{weekday:'long', month:'long', year:'numeric', day:'numeric'});
                    return today;
                }
                
                module.exports.getDay = getDay;
                
                function getDay(){
                    let today = new Date().toLocalDateString('en-US',{weekday:'long'});
                    return today;
                }



        -importing local file we created.
            const date = require(__dirname+'/date.js');
            console.log(date);      //just print the name of function
            console.log(date());      //this will execute the function

            console.log(date.getDate());      //this will execute the function
            console.log(date.getDay());      //this will execute the function

        -function declaring ways:
                            
            //normale declaration
                module.exports.fetchDate = fetchDate;
                function fetchDate(){
                    
                    var options = {
                        weekday:'long',
                        month:'long',
                        year:'numeric',
                        day:'numeric'
                    }
                    
                    var today = new Date().toLocaleDateString('en-US',options);
                    return today;
                }

                module.exports.fetchDay = fetchDay;
                function fetchDay(){
                    
                    var options = {
                        weekday:'long',
                        year:'numeric'
                    }
                    
                    var today = new Date().toLocaleDateString('en-US',options);
                    return today;
                }

            // or  without using function name like anonymouse function

                module.exports.fetchDate = function (){
                    var options = {
                        weekday:'long',
                        month:'long',
                        year:'numeric',
                        day:'numeric'
                    }
                    
                    var today = new Date().toLocaleDateString('en-US',options);
                    return today;
                }

                module.exports.fetchDay = function (){
                    var options = {
                        weekday:'long',
                        year:'numeric'
                    }
                    
                    var today = new Date().toLocaleDateString('en-US',options);
                    return today;
                }

            // or without using module again & again 

                exports.fetchDate = fetchDate;
                function fetchDate(){
                    
                    var options = {
                        weekday:'long',
                        month:'long',
                        year:'numeric',
                        day:'numeric'
                    }
                    
                    var today = new Date().toLocaleDateString('en-US',options);
                    return today;
                }

                exports.fetchDay = fetchDay;

                function fetchDay(){
                    
                    var options = {
                        weekday:'long',
                        year:'numeric'
                    }
                    
                    var today = new Date().toLocaleDateString('en-US',options);
                    return today;
                }   
            
        
        -NOTE:
            const arr = [];
            it is const arr but still we can push element inside this array.
            but we can't re-assign it to new object.
------------------------------------------------------------------------------------------------------------------------------------
Section 28: Blog WebSite
    -When you download sample project from github, always run 'npm install' or 'npm i' command
     this will download all your required depenencies from package-lock.json file.

    -home.ejs file
        <%- include('header') -%>
            <h1>Home</h1>
            <p>
                <%= homeText %>
            </p>
            
            <!-- 
                <% for(let i=0;i<content.length; i++){ %>
                    <h1> <%= content[i].title %> </h1>
                    <p> <%= content[i].body %> </p>
                <% } %> 
            -->

                <% content.forEach((i)=>{ %>
                    <h1><%= i.title %></h1>
                    <p><%= i.body %></p>
                <% }) %>
                
            <!-- 
                <% let allPosts = [] %>
                <% for(let i=0; i < allPosts.length; i++ ){ %>
                    <h1><%= allPosts[i].title %></h1>
                    <p>
                        <%= allPosts[i].Desc %>
                    </p>
                <% } %>

                using Advance for loop

                <% allPosts.forEach( (i)=>{ %>
                    <h1><%= i.title %> </h1>
                    <p>
                        <%= i.Desc %>
                    </p>
                <% }) %>  
            -->
                
            <center>
                <button class="btn btn-outline-primary" style="border-radius: 20%;font-size: 3em;">
                    <a href="/compose" style="text-decoration: none;">+</a>
                </button>
            </center>
        <%- include('footer') -%>

    -app.js file        
        const express = require("express");
        const bodyParser = require("body-parser");
        const ejs = require("ejs");                     //importing ejs module

        const homeStartingContent = "Lacus vel facilisis volutpat est velit egestas dui id ornare. Semper auctor neque vitae tempus quam. Sit amet cursus sit amet dictum sit amet justo. Viverra tellus in hac habitasse. Imperdiet proin fermentum leo vel orci porta. Donec ultrices tincidunt arcu non sodales neque sodales ut. Mattis molestie a iaculis at erat pellentesque adipiscing. Magnis dis parturient montes nascetur ridiculus mus mauris vitae ultricies. Adipiscing elit ut aliquam purus sit amet luctus venenatis lectus. Ultrices vitae auctor eu augue ut lectus arcu bibendum at. Odio euismod lacinia at quis risus sed vulputate odio ut. Cursus mattis molestie a iaculis at erat pellentesque adipiscing.";
        const aboutContent = "Hac habitasse platea dictumst vestibulum rhoncus est pellentesque. Dictumst vestibulum rhoncus est pellentesque elit ullamcorper. Non diam phasellus vestibulum lorem sed. Platea dictumst quisque sagittis purus sit. Egestas sed sed risus pretium quam vulputate dignissim suspendisse. Mauris in aliquam sem fringilla. Semper risus in hendrerit gravida rutrum quisque non tellus orci. Amet massa vitae tortor condimentum lacinia quis vel eros. Enim ut tellus elementum sagittis vitae. Mauris ultrices eros in cursus turpis massa tincidunt dui.";
        const contactContent = "Scelerisque eleifend donec pretium vulputate sapien. Rhoncus urna neque viverra justo nec ultrices. Arcu dui vivamus arcu felis bibendum. Consectetur adipiscing elit duis tristique. Risus viverra adipiscing at in tellus integer feugiat. Sapien nec sagittis aliquam malesuada bibendum arcu vitae. Consequat interdum varius sit amet mattis. Iaculis nunc sed augue lacus. Interdum posuere lorem ipsum dolor sit amet consectetur adipiscing elit. Pulvinar elementum integer enim neque. Ultrices gravida dictum fusce ut placerat orci nulla. Mauris in aliquam sem fringilla ut morbi tincidunt. Tortor posuere ac ut consequat semper viverra nam libero.";

        const app = express();

        let Tasks =[];

        app.set('view engine', 'ejs');

        app.use(bodyParser.urlencoded({extended: true}));           //bodyParse query taking from url
        app.use(express.static("public"));                          //accessing styles files from public folder


        app.get('/',(req,res)=>{
        res.render('home',{homeText :homeStartingContent, content:Tasks});
        })

        app.get('/about',(req, res)=>{
        res.render('about',{aboutText:aboutContent})
        })

        app.get('/contact',(req, res)=>{
        res.render('contact',{contactText:contactContent})
        })

        app.get('/compose',(req, res)=>{
        res.render('compose');
        })

        app.get('/posts/:matter', function(req, res){               //params to access the url navigation 
        console.log(req.params.matter);
        });

        app.post('/compose',(req,res)=>{

        let obj = {
            title: req.body.postName,
            body: req.body.postDesc
        };

        Tasks.push(obj);
        res.redirect('/')
        })

        app.listen(3000, function() {
        console.log("Server started on port 3000");
        });

    -Challenge-1
        home.ejs
            <h1>Home</h1>
            <p> <%= para %> </p>         //Syntax for printing the value of variable we pass.

    -Challenge-2
        Displaying content of home.ejs file.
            let text = '..../....some text';
            app.get('/', (req, res)=>{
                res.render('home',{para: text});      
            })

    -Challenge-3
        header & footer as partials
        <%- include('file_name') -%>
    
    -Challenge-4
        adding partials with path
        <%- include('folder1/file_name') -%>
        <%- include('folder1/header') -%>

    -Challenge-5
        app.get('/page_name',(req,res)=>{
            res.send("<h1>On page_name</h1>")
        })
    
    -Challenge-6
        navigation bar linking properly..
                <a href='/about'>about</a>
                <a href='/contact'>contact</a>

    -Challenge-7
        -creating compose.ejs page form.
            <%- include('header') -%>
            <h1>Compose</h1>
            <form method="post">
                <div class="form-group">
                    <label for="title">Title</label>
                    <input 
                        type="text" 
                        class="form-control" 
                        name="postName" 
                        placeholder="Post title"
                        oninvalid="this.setCustomValidity('Enter post title Here..')"
                        oninput="this.setCustomValidity('')"
                        required
                    />
                </div>
                <div class="form-group">
                    <label for="postDesc">Post</label>
                    <textarea 
                        name="postDesc" 
                        cols="30" 
                        rows="10" 
                        class="form-control" 
                        placeholder="Post description.."
                        oninvalid="this.setCustomValidity('Please enter post description here..')"
                        oninput="this.setCustomValidity('')"
                        required
                    ></textarea>
                </div>
                <center>
                    <button class="btn btn-success">Submit</button>
                </center>
            </form>

            <%- include('footer') -%>

    -Challenge-8,9,10,11,12,13,14
        compose get & post method

            app.get('/compose',(req, res)=>{
            res.render('compose');              //after going to '/compose' url the compose page will get opened.
            })
            
            app.post('/compose',(req,res)=>{

                let obj = {
                    title: req.body.postName,                   //accessing the attributes name of input field as postName
                    body: req.body.postDesc                     //accessing the attributes name of textarea field as postDesc.
                };

                Tasks.push(obj);                                //inserting that obj in array.
                res.redirect('/')                               //redirecting back to home page/root page.
            })
            
        -Challenge-15
            Advance for loop
                <% <varName>.forEach(function(items){ %>
                    <h1><%= items.title %></h1>
                    <p><%= items.body %></p>
                <% }) %>

                -complete coding part should enclosed within  "<% %>" these tags.
                    <% ....codes.... %>
                -for everyline it <% %> should be there.
            
        -Challenge-16,17,18,19
            url =  /posts/:matter

            app.get('/posts/:matter',(req,res)=>{       //here :matter in url will get replaced by any text come at that position.    
                console.log(req.params.matter);
            })
        
            rs - for restarting the server.

        -Challenge-20
            dynamic url
                    <a href="/posts/<%= i.title %>"> Read More...</a>
------------------------------------------------------------------------------------------------------------------------------------
Section 29: Database
    -Database based on SQL & NoSQL.
        -SQL based on table format
            all data needs to be followed this structure.
            every cell or column must have the value in it, can't be empty.
            -relational DB
            eg.
                MySQL
                postgreSQL
        -NoSQL based on Document Format (data store in JSON format, key-value pair)
            -Non-relational DB
            eg.
                MongoDB
            
        -MySQL:
            More Mature (old)
            Table structure
            Require Schema (means table structure how many columns/rows should be there, must be defined before creating the DB).
            Great with relational (relation between table, works faster)
            scales vertically
            
        -MongoDB:
            Shiny & new
            document Structured
            more flexible to changes
            Not great with complex relation between tables.
            horizontally scale
------------------------------------------------------------------------------------------------------------------------------------
Section 30: SQL (Structured Query Language)
    -SQL is used for storing, Manipulating & retriving Data from Database. 
    -SQL used to perform CRUD operation on Database.
        C - Create
        R - Read
        U - Update
        D - Delete/ Destroy
    -SQL not a case-sensitive language

    -primary key = Uniquely identifies each record in a database table.

    -creating database
        create database <database_name>
        create database products
    
    -deleting database
        drop database <database_name>
        drop database products

    -Creating Table:

        CREATE TABLE table_name (
                column_name data_type,
                column_name data_type,
                column_name data_type
                )        
        
        CREATE TABLE Products(
            ID INT NOT NULL,
            name string,
            price money,
            PRIMARY KEY(ID)
        )

        //for primary key
        CREATE TABLE Products (
            id INT PRIMARY KEY,
            name VARCHAR(20),
            price FLOAT
            )

        //for primary key & foreign key
        CREATE TABLE Products (
            id INT PRIMARY KEY,
            name VARCHAR(20),
            price FLOAT,
            //for foreign key
            CONSTRAINT fk_name FOREIGN KEY (id) REFERENCES table_name (id)
            )

    -INSERTING INTO TABLE:
        INSERT INTO Products
        values(1,'Pen',1.20)

        //multiple insertion
        INSERT INTO customer
        VALUES(1,'vivek','nikate','Bengaluru'),
        (2,'angela','yu','London')
    
        NOTE:-  if you are inserting into the table then 2 Syntax there. 
                firstly if you are entering value for all columns then no need to mention the columns name in query
                2nd is mention both columns name & values to be inserted into the table

        INSERT INTO Products (id, name)
        values(2,'Pecil');
    
    -Read Data From Database table:

        //for all records
        SELECT * FROM Products
        
        //for specific column
        SELECT name, price FROM Products

        //for specific column & row
        SELECT name, price FROM Products WHERE id = 1

        SELECT name, price FROM Products WHERE id = 1 AND name = 'Pen'

        SELECT name, price FROM Products WHERE id = 1 OR name = 'Pen'

        SELECT name, price FROM Products WHERE id = 1 OR name = 'Pen' OR price = 1.20
    
    -Updating data in table of Database:
        Update sql Syntax
            UPDATE table_name
            SET column_name = new_value
            WHERE condition
            eg.
                UPDATE Products
                SET name = 'Pen'
                WHERE id = 1
            
            //for all columns
            UPDATE Products
            SET price = 1.20
            
            //for specific column
            UPDATE Products
            SET price = 1.20
            WHERE id = 1

            //for specific column & row
            UPDATE Products
            SET price = 1.20
            WHERE id = 1 AND name = 'Pen'

            //for specific column & row
            UPDATE Products
            SET price = 1.20
            WHERE id = 1 OR name = 'Pen' OR price = 1.20

    -Deleting data from table of Database:
        Delete sql Syntax
            DELETE FROM table_name
            WHERE condition

            //for all columns, all records gets deleted
            DELETE FROM Products
            
            //for specific column
            DELETE FROM Products
            WHERE id = 1
            
            //for specific column & row
            DELETE FROM Products
            WHERE id = 1 AND name = 'Pen'
            
            //for specific column & row
            DELETE FROM Products
            WHERE id = 1 OR name = 'Pen' OR price = 1.20
                
    -Alter Table:
        Alter table statement is used to add, delete or Modify columns in an existing table.
        Syntax:
        
            ALTER TABLE table_name
            ADD column_name data_type
            eg.
                ALTER TABLE Products
                ADD stock INT

    -joins in SQL:
        -Foreign Key: used to link two tables together.
        -field in one table refers to the PRIMARY KEY in another table.
        -Inner Join:
            Inner join is the most common join type in SQL. It is used to select data from two tables based on the common column.
            Syntax:
                SELECT column_name(s)
                FROM table_name1
                INNER JOIN table_name2
                ON table_name1.column_name = table_name2.column_name
                
                eg.
                    SELECT p.id, p.name, p.price
                    FROM Products p
                    INNER JOIN Categories c
                    ON p.category_id = c.id

                    select  o.order_num, c.fname, c.lname, c.address, p.name, p.price
                    from orders o
                    JOIN customers c
                    join Products p
                    ON o.cust_id = c.ID And o.prod_id = p.id

        -Left Join:
            Left join is used to select data from one table and add the data from the other table.
                Syntax:
                    SELECT column_name(s)
                    FROM table_name1
                    LEFT JOIN table_name2
                    ON table_name1.column_name = table_name2.column_name

                    eg.
                        SELECT p.id, p.name, p.price
                        FROM Products p
                        LEFT JOIN Categories c
                        ON p.category_id = c.id

        -Right Join:
            Right join is used to select data from one table and add the data from the other table.
                Syntax:
                    SELECT column_name(s)
                    FROM table_name1
                    RIGHT JOIN table_name2
                    ON table_name1.column_name = table_name2.column_name

                    eg.
                        SELECT p.id, p.name, p.price
                        FROM Products p
                        RIGHT JOIN Categories c
                        ON p.category_id = c.id

        -Union:
            Union is used to select data from two tables.
                Syntax:
                    SELECT column_name(s)
                    FROM table_name1
                    UNION
                    SELECT column_name(s)
                    FROM table_name2

                    eg.
                        SELECT p.id, p.name, p.price
                        FROM Products p
                        UNION
                        SELECT c.id, c.name, c.price
                        FROM Categories c

        -Intersect:
            Intersect is used to select data from two tables.
                Syntax:
                    SELECT column_name(s)
                    FROM table_name1
                    INTERSECT
                    SELECT column_name(s)
                    FROM table_name2

                    eg.
                        SELECT p.id, p.name, p.price
                        FROM Products p
                        INTERSECT
                        SELECT c.id, c.name, c.price
                        FROM Categories c

        -Except:
                Except is used to select data from one table and add the data from the other table.
                    Syntax:
                        SELECT column_name(s)
                        FROM table_name1
                        EXCEPT
                        SELECT column_name(s)
                        FROM table_name2

                        eg.
                            SELECT p.id, p.name, p.price
                            FROM Products p
                            EXCEPT
                            SELECT c.id, c.name, c.price
                            FROM Categories c
------------------------------------------------------------------------------------------------------------------------------------
Section 31: MongoDB:
    -MongoDB is a NoSQL database.
    -MongoDB is a document-oriented database.
    -MongoDB is a scalable, high-performance, and fault-tolerant database.
    -MongoDB is a cloud-based, open-source, distributed database.
    -MongoDB is a widely-used database.
    -MongoDB is a popular database. It stores data in key-value pair
    -Whenever we try new database, research on How to perform CRUD Opertaions.

    -Naming convention for MongoDB Collection
        Databases: consist of the purpose (word in singular) and end with “db” – all lower case: imagedb, resumedb, memberdb, etc.
        Collections: plural in lower case: images, resumes,
        Document fields: lowerCamelCase, e.g. memberFirstName, fileName, etc.    

    -CRUD Opertaions:
        -need to install MongoDB & node.
        -commands  
            -help
            -show dbs   //list of databases
            -show databases   //list of databases

            -creating database & using that DB
                use <database_name>
                *use shopDB
                    -to show this database in database list, 
                    then there must a some content inside it.
                
                -to check in which database, you are operating currently.
                    db
                
                -inserting document in collection
                    db.<collection_name>.insert({})
                    db.<collection_name>.insertOne({})            //if collection doesn't exist in database then it create that collection
                    db.collection.insertMany()
                    eg.
                        db.users.insertOne(
                            {
                                name:'Vivek',
                                age:23,
                                status:'Subscribed'
                            }
                        )
                
                    eg. many
                         db.First.insertMany([
                                { name: 'Mahesh', age: 44}, 
                                { name: 'Nikate', age: 1}, 
                                { name: 'Rohini', age: 20}, 
                                { name: 'Aai', age: 38}
                            ])

                    -Collections in MongoDB is similar to table in SQL.
                        collection is bunch of documents
                    
                    -document is a just single data record, like a single row in SQL.

                    -to check how many collection/table are there in database
                        show collections

                    -insert into collection Products
                        db.products.insertOne({id:1, name:'pen', price:1.20})
                    
            -Reading data from database
                db.<collection_name>.find();
                db.products.find()

                finding particular data
                    db.products.find({name:'pencil'})
                
                price > 1:
                    db.products.find({price: {$gt: 1}})
                
                to just print particular column or value of that field.
                    db.products.find({name:'pencil'}, {name:1})

                    just print the data with name. mention data field with 1 means print, 0 means don't print
                        db.products.find({name:'pencil'}, {name:1,_id:0})
                        //but _id field comes by default.

            -Updating database
                Syntax
                    db.collection.updateOne(<filter>,<update>,<options>)
                    db.collection.updateMany(<filter>,<update>,<options>)
                    db.collection.replaceOne(<filter>,<update>,<options>)


                    db.<collection_name>.updateOne({query},{new_value})
                eg.
                    db.products.updateOne({_id:1},{$set:{stock:32}})

            -Delete data from database
                db.collection.deleteOne()
                db.collection.deleteMany()
                eg.
                    db.products.deleteOne({_id: ObjectId("64771aeea5a9ccd137f1d40f")})
                    db.products.deleteOne( { id: 2 })

                    db.products.deleteMany({stock:{$gt:10}})    // delete those records whos stock is > 10
            
            -Relationships in MongoDB:

                db.products.insert({ 
                    _id: 2, 
                    name: "Rubber", 
                    price: 1.3, 
                    stock: 98, 
                    reviews: [
                        { authorName: 'Vicky', rating: 5, msg: 'Best Rubber ever' }, 
                        { authorName: "Mahesh", rating: 4, msg: 'Good Rubber' }
                    ] 
                })

                eg.
                     db.products.insert({
                        _id:3,
                        name: 'pencil',
                        price: 0.80,
                        stock:90,
                        reviews:[
                            {authorName:'author1', rating:5, msg:'good pencil'},
                            {authorName:'author2', rating:4, msg:'Awesome pencil'},
                            {authorName:'author3', rating:5, msg:'Good pencil, suggest you to try once'}
                        ]
                    })

    -MongoDB native driver vs ODM(mongoose)    
        ODM - object document mapper (mongoose)
        -install mongoose
            npm i mongoose
        
        -Deleting database first switch to it, then 
            use <database_name>
            db.dropDatabase()
------------------------------------------------------------------------------------------------------------------------------------
Section 32: Mongoose
    -need to install mongoose package.
        npm i mongoose.
    
    connecting with database, require package..
        -const mongoose = require('mongoose');
        -mongoose.connect('mongodb://localhost:27017/fruitsDB')     //at end the name of database.

            //if database is not present then it will create the database, with specified name
        
        -create collection structure/Schema
            const <collection_schema> = new mongoose.Schema({
                var1: type,
                var2: type,
                var3: type,
                var4: type
            })

        -collection_name
            const collection = mongoose.model('<name>',<collection_schema>)

        -creating document/record
            const first = new <collection>({
                key:value,
                key:value,
                key:value,
                key:value
            })

            first.save();
        
        eg.
            const mongoose = require('mongoose');

            mongoose.connect('mongodb://localhost:27017/fruitsDB')

            const fruitSchema = new mongoose.Schema({
                name: String,
                rating: Number,
                review: String
            });

            const Fruit = mongoose.model('Fruit', fruitSchema);

            const fruit = new Fruit({
                name:'Apple',
                rating: 7,
                review:'Pretty Solid as fruit'
            });

            // fruit.save();


            const personSchema = new mongoose.Schema({
                name:String,
                age:Number
            });

            const person = mongoose.model('People', personSchema);

            const p1 = new person({
                name: 'Nikate',
                age:22
            })

            // p1.save();

            const Kiwi = new Fruit({
                name: 'Kiwi',
                rating:10,
                review:'The bets fruit'
            });

            const Pineapple = new Fruit({
                name:'Pineapple',
                rating:9,
                review:'Tasty fruit'
            });

            const Mango = new Fruit({
                name:'Mango',
                rating:8,
                review:'Sweet fruit'
            })

            // Fruit.insertMany([Kiwi, Pineapple, Mango]).then(()=>{
            //      console.log('Successfully added the fruits');
            // }).catch(
            //      (err)=>{
            //           console.log(err);
            //      }
            // )

            // throw new MongooseError('Model.find() no longer accepts a callback');
            // Fruit.find((err,fruits)=>{
            //      if(err){
            //           console.log(err);
            //      }else{
            //           console.log(fruits);
            //      }
            // })



            Fruit.find().then((fruits)=>{

                // console.log(fruits);          //printing all fruits data

                fruits.forEach( element => {
                    console.log(element.name);              //just printing the name of fruits
                });
            }).catch((err)=>{
                console.log(err);
            }).finally(()=>{
                mongoose.connection.close(); 
            })

    -Data Validation:
        const fruitSchema = new mongoose.Schema({
            name: String,
            rating: {
                type: Number,
                min: 1,
                max: 10
            },
            review: String
        });

        name as required field..
         const fruitSchema = new mongoose.Schema({
            name:{
                type: String,
                required:true           //required :[1]         or
                                        //required :[true, 'msg']
            },
            rating: {
                type: Number,
                min: 1,
                max: 10
            },
            review: {
                type: String,
                required: true
            }
        });

    -Update & Deleting Data using mongoose

        Fruit.updateOne({_id: "64861e6dfa3f5b14cf21a38d"}, {name: "AnonymousFruit2"}).then(function(){
            console.log('sucessfully updated..!');
        }).catch(function(err){
            console.log(err);
        })

        Fruit.deleteOne({name: 'AnonymousFruit2'}).then(function(){
            console.log('sucessfully deleted..!');
        }).catch(function(err){
            console.log(err);
        })

        Fruit.deleteOne({_id:'64861da600df48632c4cc5fa'}).then(function(){
            console.log('sucessfully deleted..!');
        }).catch(function(err){
            console.log(err);
        })

        person.deleteMany({age:{$gt:20}}).then(function(){
            console.log('sucessfully deleted..!');
        });

    -Relationships between document of different collections

        //Fruit collection structure:
            const fruitSchema = new mongoose.Schema({
                name:{
                    type: String,
                    required:true
                },
                rating: {
                    type: Number,
                    min: 1,
                    max: 10
                },
                review: {
                    type: String,
                    required: true
                }
            });

        //creating collection with Fruit name   
            const Fruit = mongoose.model('Fruit', fruitSchema);

        //fruit document
            const Kiwi = new Fruit({
                name: 'Kiwi',
                rating:10,
                review:'The best fruit'
            });

        //Person Collection structure
            const personSchema = mongoose.Schema({
                name:String,
                age:Number,
                // likeFruit: fruitSchema
                FavFruit: {
                    type: fruitSchema,          //FavFruit is a type of fruitSchema.
                    required: true              //making the field required if didn't entered value it will crash.
                }
            });

        //person collection
            const person = mongoose.model('People', personSchema);

        //person document
            const p3 = new person({
                name:'Person99',
                age:99,
                likeFruit: Kiwi
            });

            p3.save().then(()=>{
                console.log("Saved successfully ✔");
            })
    
    -Complete code of this section

        const mongoose = require('mongoose');    
        mongoose.connect('mongodb://localhost:27017/fruitsDB')

        const fruitSchema = new mongoose.Schema({
            name:{
                type: String,
                required:true
            },
            rating: {
                type: Number,
                min: 1,
                max: 10
            },
            review: {
                type: String,
                required: true
            }
        });

        const Fruit = mongoose.model('Fruit', fruitSchema);

        const fruit = new Fruit({
            name:'Apple',
            rating: 8,
            review:'Pretty Solid as fruit'
        });

        fruit.save();

        const fruit2 = new Fruit({
            name:'New_fruit2',
            rating: 10,
            review:'Pretty New as fruit'
        });

        fruit2.save();

        const fruit3 = new Fruit({
            name:"NamedAnonymousFruit1",
            review:'This is a review for anonymous Fruit',
            rating: 9
        });

        fruit3.save();

        const personSchema = mongoose.Schema({
            name:String,
            age:Number,
            likeFruit: fruitSchema
            likeFruit: {
                type: fruitSchema,
                required: true
            }
        });

        const person = mongoose.model('People', personSchema);

        const p1 = new person({
            name: 'Nikate',
            age:22
        })

        p1.save();

        const p2 = new person({
            name:'Vivek',
            age:23
        })

        const Mango = new Fruit({
            name:'Mango',
            rating:8,
            review:'Sweet fruit'
        });

        const Kiwi = new Fruit({
            name: 'Kiwi',
            rating:10,
            review:'The best fruit'
        });

        Mango.save();

        const p3 = new person({
            name:'Person99',
            age:99,
            likeFruit: Kiwi
        })

        p3.save().then(()=>{
            console.log('Saved succesffully')
        })

        p2.save();



        const Pineapple = new Fruit({
            name:'Pineapple',
            rating:9,
            review:'Tasty fruit'
        });


        Fruit.insertMany([Kiwi, Pineapple, Mango]).then(()=>{
            console.log('Successfully added the fruits');
        }).catch(
            (err)=>{
                console.log(err);
            }
        )

        throw new MongooseError('Model.find() no longer accepts a callback');
        Fruit.find((err,fruits)=>{
            if(err){
                console.log(err);
            }else{
                console.log(fruits);
            }
        })


        Fruit.updateOne({_id: "64861e6dfa3f5b14cf21a38d"}, {name: "AnonymousFruit2"}).then(function(){
            console.log('sucessfully updated..!');
        }).catch(function(err){
            console.log(err);
        })

        Fruit.deleteOne({name: 'AnonymousFruit2'}).then(function(){
            console.log('sucessfully deleted..!');
        }).catch(function(err){
            console.log(err);
        })

        Fruit.deleteOne({_id:'64861da600df48632c4cc5fa'}).then(function(){
            console.log('sucessfully deleted..!');
        }).catch(function(err){
            console.log(err);
        })

        Fruit.find().then((fruits)=>{

            console.log(fruits);          //printing all fruits data

            fruits.forEach( element => {
                    console.log(element.name);              //just printing the name of fruits
            });
        }).catch((err)=>{
            console.log('enable to connect .. '+err);
        }).finally(()=>{
            mongoose.connection.close();
        })

        person.deleteMany({age:{$gt:20}}).then(function(){
            console.log('sucessfully deleted..!');
        });


        person.find().then((ppl)=>{
            console.log(ppl)
        }).catch(()=>{
            console.log("Enable to connect..!");
        }).finally(()=>{
            mongoose.connection.close();
        })

    -Practiced code:
        -created one folder
        -created file of .js extension
        -npm init -y
        -installed the mongoose package
            npm i mongoose
        
        -need to remember this string, at the end there is name of your custom database
            mongodb://localhost:27017/MyDB

        const mongoose = require('mongoose');

        //creating connection with database
        mongoose.connect('mongodb://localhost:27017/MyDB');

        // Fruit collection structure
        const fruitSchema = new mongoose.Schema({
            name: {
                type: String,
                required: true
            },
            color: {
                type: String,
                required: true
            },
            rating:{
                type: Number,
                required: true
            }
        });

        //Person collection Structure
        const personShema = new mongoose.Schema({
            name:{
                type: String,
                required: true
            },
            age:{
                type: Number,
                required: true
            },
            loveFruit: {
                type:fruitSchema,
                required: true
            }
        });


        //fruit collection name is manyfruit
        const manyFruit = mongoose.model('manyFruit', fruitSchema)       //it will create the collection with name you mentioned within quotes ""

        //person collection name is manyPerson
        const manyPerson  = mongoose.model('loka', personShema);         //here it'll create the collection with name lokas, it adds extra 's' at end automatically


        //fruit 1st record/document
        const Apple = new manyFruit({
            name:'APPLE',
            color: 'RED',
            rating: 8
        })

        Apple.save();


        //person 1st record/document
        const p1 = new manyPerson({
            name:'Vivek',
            age:23,
            loveFruit:Apple
        });

        p1.save();

        const p2 = new manyPerson({
            name:'Mahesh',
            age:45,
            loveFruit:Apple
        })

        p2.save().then(()=>{
            console.log("saved Successfully");
        }).finally(()=>{
            console.log('Closing the connection');
            mongoose.connection.close();       //saving the document safely then closing the connection
        });
------------------------------------------------------------------------------------------------------------------------------------
Section 33: Putting Everything Together
    //complete project with database connected with frontend.MongoDB database.
    for Cylic deployment 
        npm i dotenv
        const PORT = process.env.PORT || 3000;
------------------------------------------------------------------------------------------------------------------------------------
Section 34, 35 Project work.
------------------------------------------------------------------------------------------------------------------------------------
Section 36: RESTful API
    -WHAT IS REST:-
        -REST - REpresentation State Transfer
        -Request & Response.
        -Request are made in form of HTTP, HTTPs or FTP

        -GET : Used to retrieve data from server, Read Data.
            app.get(function (){
                
            })

        -POST : Create a resource on Server
            app.post(function (){

            })

        -PUT : Update an existing Resource(completely changing or Updating the previously present data)  /
               PUT is a method of Updating record when the client transmits data that update the whole record.
            app.put(function (){

            })

        PATCH : Partially update a Resource (means which data is broken, fixing only that one.)
                PATCH is a technique for transforming the resources when the client transmits 
                partial data that will be updated without changing the whole data.
                -updating particular data field is patch

            app.patch(function (){
                
            })

        -DELETE : Delete a Resource
            app.delete(function (){
                    
            })

    -Database With Robo 3T:

    -Using Postman Testing URL
        Methods:
            const app = express();        
            1)GET
                app.get('/articles',(req, res)=>{
                    res.send("Request Processed.");
                })

            2)POST
                app.post('/articles',(req, res)=>{
                    console.log('body:', req.body);
                })

            3)DELETE
                app.delete('/articles',(req, res)=>{
                    res.send('message:Deleted Successfully');
                })

    -Chaining Route Handlers
        -instead of writing all method separately for same route we can chain them together.
        -GET, POST, DELETE
         Syntax:
            app.route('/articles').get().post().delete()

            eg.
                app.route('/articles')
                .get()
                .post()
                .delete()
------------------------------------------------------------------------------------------------------------------------------------
Section 37: Authentication & Security
    Github repo for Authentication revision:
        https://github.com/londonappbrewery/Authentication-Secrets.git

    -Level-1
        const userSchema = new mongoose.Schema({
            email: String,
            password: String
        });

        const User = new mongoose.model('User',userSchema);

        app.post('/register',(req, res)=>{
            const newUser = new User({
                email: req.body.username,
                password: req.body.password
            })

            newUser.save().then(()=>{
                res.render("secrets")
            });
        })

        app.post('/login',(req, res)=>{
            const username = req.body.username;
            const password = req.body.password;

            User.findOne({email:req.body.username}).then((foundUser)=>{
                if (foundUser){
                    if(foundUser.password === req.body.password){
                            res.render('secrets');
                    }
                }else{
                    console.log('user not exist');
                }
            })
        })

        app.post('/login',(req, res)=>{
            const username = req.body.username;
            const password = md5(req.body.password);

            User.findOne({email: username}).then((foundUser)=>{
                if (foundUser){
                    if(foundUser.password === password){
                            res.render('secrets');
                    }
                    else{
                            res.send("<h1>Wrong Password</h1>")
                    }
                }else{
                    console.log('user not exist');
                }
            })
        })

        Files:
            //jshint esversion:6
            const express = require("express");
            const bodyParser = require("body-parser");
            const ejs = require("ejs");
            const mongoose = require("mongoose");

            const app = express();

            app.use(express.static("public"));
            app.set('view engine', 'ejs');
            app.use(bodyParser.urlencoded({
            extended: true
            }));

            mongoose.connect("mongodb://localhost:27017/userDB", {useNewUrlParser: true});

            const userSchema = ({
            email: String,
            password: String
            });

            const User = new mongoose.model("User", userSchema);

            app.get("/", function(req, res){
            res.render("home");
            });

            app.get("/login", function(req, res){
            res.render("login");
            });

            app.get("/register", function(req, res){
            res.render("register");
            });

            app.post("/register", function(req, res){
            const newUser =  new User({
                email: req.body.username,
                password: req.body.password
            });
            newUser.save().then((req, res)=>{
                res.render("secrets");
                })
            });

            app.post("/login", function(req, res){
            const username = req.body.username;
            const password = req.body.password;

            User.findOne({email: username}).then((foundUser)=>{
                if (foundUser) {
                    if (foundUser.password === password) {
                    res.render("secrets");
                    }else{
                    res.render("Wrong password")
                    }
                    
                }
            });
            });

            app.listen(3000, function() {
            console.log("Server started on port 3000.");
            });

    -Level-2
        Encryption:
            const userSchema = new mongoose.Schema({
                email: String,
                password: String
            });

            const secretMsg = 'Thisisourlittlesecret.';
            userSchema.plugin(encrypt,{secret:secretMsg})          
            userSchema.plugin(encrypt,{secret: process.env.secret_msg, encryptedFields:['password'] })
            //plugin should be added first before creating model for collection

            const User = new mongoose.model('User',userSchema);

    -Level-3
        npm i dotenv
        require('dotenv').config(); //place this line at the top
        
        create .env file
            Syntax
                name=value      //no space no quotation separated by underscore (_)
                //NO COMMA (,) NOTHING TO SEPARATE OR SOMETHING.
                Example
                    PORT=5001
                    MONGO_URI=mongodb+srv://<username>:<password>@cluster0.<EMAIL>/test?retryWrites=true&w=majority
                    SECRET_MSG=Thisisourlittlesecret.
                    API_KEY=QWERTYUIOP12345

            
            accessing .env file variables
                //variableName are not case-sensitive
                console.log(process.env.API_KEY);
                console.log(process.env.SECRET_MSG);
                console.log(process.env.api_key);
                console.log(process.env.secret_msg);
        
        -Before pushing/ starting any project to GitHub you must create .env file & .gitignore file
         & ignore the file which is critical for project, or non usable files.
    
    -Level-4
        -Hashing password
            -install md5 package
            npm i md5
            const md5 = require('md5');

        -Hashing & Salting:
            -Hashing is process of running password through hash function.
            -Salting is process of adding extra set of random character.
            -This will make it harder to crack your hashed passwords by brute force attack.
            -To do this we use bcrypt library in node js
                install bcrypt
                npm i bcrypt
                npm i bcrypt@3.0.2      //specific version

            -no.of round to password means 
                original password adding salt to it running through hash function first time.
                taking the output from first & again adding same salt to it & running through hash function again this is 2nd time.
                how times you do this that much amount of rounds you have.
             
            -const saltRounds =10;

                bcrypt.hash(req.body.password, saltRounds, function (err, passwdHash){
                    const newUser = new User({
                        email: req.body.username,
                        password: passwdHash
                    })
                
                    newUser.save().then(()=>{
                        res.render("secrets")
                    });
                })

            -bcrypt
                app.post('/register',(req, res)=>{
                    bcrypt.hash(req.body.password, saltRounds, function (err, passwdHash){
                        const newUser = new User({
                            email: req.body.username,
                            password: passwdHash
                        })
                    
                        newUser.save().then(()=>{
                            res.render("secrets")
                        });
                    })
                })

                app.post('/login',(req, res)=>{
                    const username = req.body.username;
                    // const password = md5(req.body.password);
                    const password = req.body.password;

                    User.findOne({email: username}).then((foundUser)=>{
                        if (foundUser){
                            bcrypt.compare(password, foundUser.password, function (err, result){
                                    if(result === true){
                                        res.render('secrets');
                                    }else{
                                        res.send("<h1>Wrong Password</h1>")
                                    }
                            })
                        }else{
                            console.log('user not exist');
                        }
                    })
                })            

    -Level-1 to 4:
        //jshint esversion:6
        require('dotenv').config();
        const express = require("express");
        const bodyParser = require("body-parser");
        const ejs = require("ejs");
        const mongoose = require('mongoose');
        const bcrypt = require('bcrypt');

        const saltRounds = 10;

        // //password encryption methods
        // const md5 = require('md5');
        // // const encrypt = require('mongoose-encryption')

        const app = express();

        app.set('view engine', 'ejs');

        app.use(bodyParser.urlencoded({
            extended: true
        }));
        app.use(express.static("public"));

        mongoose.connect('mongodb://localhost:27017/userDB')

        const userSchema = new mongoose.Schema({
            email: String,
            password: String
        });


        // console.log(process.env.API_KEY);
        // console.log(process.env.SECRET_MSG);
        // console.log(process.env.api_key);
        // console.log(process.env.secret_msg);

        // userSchema.plugin(encrypt,{secret: process.env.secret_msg, encryptedFields:['password'] })          //plugin should be added first before creating model for collection

        const User = new mongoose.model('User',userSchema);


        app.get('/',(req, res)=>{
            res.render("home");
        })

        app.get('/register',(req, res)=>{
            res.render("register");
        })

        app.get('/login',(req, res)=>{
            res.render("login");
        })

        app.post('/register',(req, res)=>{

            bcrypt.hash(req.body.password, saltRounds, function (err, passwdHash){
                const newUser = new User({
                    email: req.body.username,
                    password: passwdHash
                })
            
                newUser.save().then(()=>{
                    res.render("secrets")
                });
            })

            // const newUser = new User({
            //      email: req.body.username,
            //      password: md5(req.body.password)
            // })

            // newUser.save().then(()=>{
            //      res.render("secrets")
            // });
        })

        app.post('/login',(req, res)=>{
            const username = req.body.username;
            // const password = md5(req.body.password);
            const password = req.body.password;

            User.findOne({email: username}).then((foundUser)=>{
                if (foundUser){
                    bcrypt.compare(password, foundUser.password, function (err, result){
                            if(result === true){
                                res.render('secrets');
                            }else{
                                res.send("<h1>Wrong Password</h1>")
                            }
                    })
                }else{
                    console.log('user not exist');
                }
            })
        })



        app.listen(3000, function() {
            console.log("Server started on port 3000");
        });

    -Level-5(Session & Cookies)
        Cookies:
            Cookies are client-side files that are stored on a local computer and contain user information(inside browser).
        
        Session:
            Sessions are server-side files that store user information.

        -Sessions are more secured compared to cookies, as they save data in encrypted form. 
         Cookies are not secure, as data is stored in a text file, 
         and if any unauthorized user gets access to our system, he can temper the data.

        -Packages we need
            passport
            passport-local
            passport-local-mongoose
            express-session

        -Hashing, Salting & Authentication using passport & above Packages
            File at start
                //jshint esversion:6
                require('dotenv').config();
                const express = require("express");
                const bodyParser = require("body-parser");
                const ejs = require("ejs");
                const mongoose = require('mongoose');

                const app = express();

                app.set('view engine', 'ejs');

                app.use(bodyParser.urlencoded({
                    extended: true
                }));
                app.use(express.static("public"));

                mongoose.connect('mongodb://localhost:27017/userDB')

                const userSchema = new mongoose.Schema({
                    email: String,
                    password: String
                });

                const User = new mongoose.model('User',userSchema);

                app.get('/',(req, res)=>{
                    res.render("home");
                })

                app.get('/register',(req, res)=>{
                    res.render("register");
                })

                app.get('/login',(req, res)=>{
                    res.render("login");
                })

                app.post('/register',(req, res)=>{

                })

                app.post('/login',(req, res)=>{

                })

                app.listen(3000, function() {
                    console.log("Server started on port 3000");
                });
            
            -Modification started:
                Installed these Packages
                    npm i passport passport-local passport-local-mongoose express-session
                                
                File:
                    //jshint esversion:6
                    require('dotenv').config();
                    const express = require("express");
                    const bodyParser = require("body-parser");
                    const ejs = require("ejs");
                    const mongoose = require('mongoose');
                    const session = require('express-session');
                    const passport = require('passport')
                    const passportLocalMongoose = require('passport-local-mongoose')

                    const app = express();

                    app.set('view engine', 'ejs');

                    app.use(bodyParser.urlencoded({
                        extended: true
                    }));
                    app.use(express.static("public"));

                    //session code must put between connect & requiring package
                    app.use(session({
                        secret:'Our little Secret.',
                        resave:false, 
                        saveUninitialized: false
                    }));

                    app.use(passport.initialize());
                    app.use(passport.session());

                    mongoose.connect('mongodb://localhost:27017/userDB')

                    const userSchema = new mongoose.Schema({
                        email: String,
                        password: String
                    });

                    userSchema.plugin(passportLocalMongoose);

                    const User = new mongoose.model('User',userSchema);

                    passport.use(User.createStrategy());

                    passport.serializeUser(User.serializeUser());
                    passport.deserializeUser(User.deserializeUser());

                    app.get('/',(req, res)=>{
                        res.render("home");
                    })

                    app.get('/register',(req, res)=>{
                        res.render("register");
                    })

                    app.get('/login',(req, res)=>{
                        res.render("login");
                    })

                    app.get('/secrets',(req, res)=>{
                        if(req.isAuthenticated()){
                            res.render('secrets');
                        }else{
                            res.redirect('/login'); 
                        }
                    })

                    app.get('/logout',(req, res)=>{
                        req.logout(function(err){
                            if(err){
                                console.log(err);
                            }else{
                                res.redirect('/')
                            }
                        });
                    })

                    app.post('/register',(req, res)=>{
                        User.register({username: req.body.username}, req.body.password, function(err, user){
                            if(err){
                                console.log(err);
                                res.redirect('/register');
                            }else{
                                passport.authenticate('local')(req, res, function(){
                                        res.redirect('/secrets')
                                }) 
                            }
                        })
                    })

                    app.post('/login',(req, res)=>{
                        const user = new User({
                            username : req.body.username,
                            password : req.body.password
                        });


                        req.login(user, function(err){
                            if(err){
                                console.log(err);
                            }else{
                                passport.authenticate('local')(req, res, function(){
                                        res.redirect('/secrets')
                                })
                            }
                        })

                    })

                    app.listen(3000, function() {
                        console.log("Server started on port 3000");
                    });

    Level-6(OAuth 2.0 Signin with Google)
        OAuth - Open Authentication
        1) Granular Access Levels
        2) Read/ Read+Write Access
        3) Revoke Access
------------------------------------------------------------------------------------------------------------------------------------
Section 38: React.Js
    React is a JavaScript library for building user interfaces (Frontend).
    React is used to build single-page applications.
    React allows us to create reusable UI components.

    frontend JavaScript library created by Facebook.
    React is a tool for building UI components.
    React creates a VIRTUAL DOM in memory.

    Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, 
    where it does all the necessary manipulating, before making the changes in the browser DOM.

    React only changes what needs to be changed!

    Babel: it's a JavaScript compiler
    eg.
        npm i react react-dom

        var React = require("react");
        var ReactDOM = require("react-dom");

        ReactDOM.render(<h1>Vivek</h1>, document.getElementById("root"));

        import React from "react";
        import ReactDOM from "react-dom";

        ReactDOM.render(
        <div>
            <h1>Vivek</h1>
            <p>My name is Vivek Mahesh Nikate</p>
        </div>,
        document.getElementById("root")
        );

    eg. implementing ReactDOM.render method.
        import React from "react";
        import ReactDOM from "react-dom";

        ReactDOM.render(
            <div>
                <h1>Vivek Nikate</h1>
                <h2>My favorite sweets are...</h2>
                <ul>
                    <li>Gulab Jamun</li>
                    <li>Kaju Katali</li>
                    <li>Barfi</li>
                </ul>
            </div>,
            document.getElementById("root")
        );
    
    eg. printing value {}
        import React from "react";
        import ReactDOM from "react-dom";

        const name = 'Vivek';
        const favNum = 4;

        ReactDOM.render(
                        <div>
                            <h1>Hello world...</h1>
                            <p>My name is {name}</p>
                            <p>My favNum is {favNum}</p>                  
                        </div>, 
                        document.getElementById("root")
                    );

    -In React within '{ }' you only can write expression (expression means an equation who will evaluate to value)
     you can't write statements there. like if-else statement.
    
    -template literals /string interpolation, So basically injecting strings into a piece of JavaScript.
    eg.
        import React from "react";
        import ReactDOM from "react-dom";

        const fname = "Vivek";
        const lname = "Nikate";

        ReactDOM.   render(
            <div>
                <h1>Info</h1>
                <p>Name : {fname + lname}</p>
                <p>
                Name : {fname} {lname}
                </p>
                <p>Name : {fname + " " + lname}</p>
                <p>Name string interpolation : {`${fname} ${lname}`}</p>
            </div>,
            document.getElementById("root")
        );
    
    -Date
        import React from "react";
        import ReactDOM from "react-dom";

        const name = "Vivek";
        const year = new Date().getFullYear();

        ReactDOM.render(
        <div>
            <p>Created by {name}.</p>
            <p>Copyright {year}.</p>
        </div>,
        document.getElementById("root")
        );
    
    -Image: Image tag in JSX must be self closing else error. <img />
            attributes names are camelCase like class is className.

        style.css file.
            .heading{
                color: blueviolet;
            }

        index.js
            import React from "react";
            import ReactDOM from "react-dom";

            ReactDOM.render(
                <div>
                    <h1
                    className="heading"
                    style={{ color: "red" }}
                    contentEditable
                    spellCheck="false"
                    >
                        My Favourite Foods
                    </h1>
                    <div>
                        <img src="https://media.istockphoto.com/id/1146517111/photo/taj-mahal-mausoleum-in-agra.jpg?s=612x612&w=0&k=20&c=vcIjhwUrNyjoKbGbAQ5sOcEzDUgOfCsm9ySmJ8gNeRk=" height='200px' width='200px'/>
                        <img src="https://media.istockphoto.com/id/1382384282/photo/bangalore-or-bengaluru.jpg?s=612x612&w=0&k=20&c=6pxwL3JxNV2B_NZSLMZLhrSLqAbyCPlGuSZYKImpjKQ=" height='200px' width='200px'/>
                        <img src="https://picsum.photos/200/400" height='200px' width='200px' />
                    </div>
                </div>,
                document.getElementById("root")
            );

            const imgURL = "https://picsum.photos/200/300";
            ReactDOM.render(
            <div>
                <img src="https://picsum.photos/200/200" />
                <img src="https://picsum.photos/200/300?grayscale" />
                <img src={imgURL} />
                <img src={imgURL+"?grayscale"} />
                <img src={imgURL} />
            </div>,
            document.getElementById("root")
            );

    -Inline Styling React        
        const customStyles = {
        color: 'deeppink',
        fontSize:'30px'
        }

        //giving border to the para
            customStyles.border='3px solid green';
        
        //changing previous color:
            customStyles.color='brown'
        
        //general styles
            customStyles.borderRadius = '20px'
            customStyles.padding = '20px'

        ReactDOM.render(
        <div>
            <h1 className='heading'>My Favourite Foods</h1>
            
            //in same line single attribute
            <p style={{color:'green'}}>loreum ipsum paragraph loreum ipsum paragraph loreum ipsum paragraphloreum ipsum paragraph</p>

            //in same line with multiple Attributes
            <p style={{color:'yellow', lineHeight:'4'}}>loreum ipsum paragraph loreum ipsum paragraph loreum ipsum paragraphloreum ipsum paragraph</p>

            //creating different object of style
            <p style={customStyles}>loreum ipsum paragraph loreum ipsum paragraph loreum ipsum paragraphloreum ipsum paragraph</p>

        </div>,
        document.getElementById("root")
        );
    
    -React Styling Practice
        styles.css file
        
            .heading {
                font-size: 50px;
                font-weight: bold;
                border-bottom: 5px solid black;
            }
        
        index.html file
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <title>JSX</title>
                <link rel="stylesheet" href="styles.css" />
            </head>

            <body>
                <div id="root"></div>
                <script src="../src/index.js" type="text/JSX"></script>
            </body>
            </html>


        index.js file 
            
            import React from "react";
            import ReactDOM from "react-dom";

            let Greet = "";

            //priting time in JS
            // console.log(new Date().toLocaleTimeString());

            //Priting hour only.
            const time = new Date().getHours();
            // console.log(time);

            //passing custom dateTime
            // const time2 = new Date(1, 1, 2024, 4).getHours();

            let customStyles = {
            fontFamily: "Arial"
            };

            if (time >= 0 && time <= 12) {

                Greet = "Good Morning!";
                customStyles.color = "red";
                
            } else if (time > 12 && time <= 18) {

                Greet = "Good Afternoon!";
                customStyles.color = "green";
            
            } else {

                Greet = "Good Evening.!";
                customStyles.color = "blue";
                
            }

            ReactDOM.render (
                <h1 style={customStyles} className="heading">
                    {Greet}
                </h1>,
                document.getElementById("root")
            );

    -React Components
        -its like a function
            define the first letter always capital.

        -Components are in different files with .jsx extension.

            Heading.jsx file
                import React from "react";

                function Heading() {
                    return <h1>My Favourite Foods</h1>;
                }

                function List() {
                    return (
                        <ul>
                            <li>Bacon</li>
                            <li>Jamon</li>
                            <li>Noodles</li>
                        </ul>
                    );
                }

                export {Heading, List};         //when exporting more than one components

            List.jsx

                import React from "react";
                function List() {
                    return (
                        <ul>
                        <li>Bacon</li>
                        <li>Jamon</li>
                        <li>Noodles</li>
                        </ul>
                    );
                }
                export default List;

        -Importing from other files
            import { Heading as Nav, List as L } from "./Heading";
            // import { Heading as Nav, List as L } from "./Heading.jsx";            
            import Heading from "./Heading";
            import List from "./List.jsx";              //exntension is not mandatory

            App.jsx
                import React from "react";
                import Heading from "./Heading";
                import List from "./List";

                function App() {
                    return (
                        <div>
                        <Heading />
                        <List />
                        <List />
                        </div>
                    );
                }

                export default App;
        
        -React Components:

            index.js file
                import React from "react";
                import ReactDOM from "react-dom";
                import App from "./components/App";

                ReactDOM.render(<App />, document.getElementById("root"));
            
            App.jsx file
                import React from "react";
                import Greeting from "./Greeting";

                function App() {
                    return <Greeting />;
                }
                export default App;
            
            Greeting.jsx file
                import React from "react";

                const date = new Date();
                const currentTime = date.getHours();

                let greeting;

                const customStyle = {
                color: ""
                };

                if (currentTime < 12) {
                    greeting = "Good Morning";
                    customStyle.color = "red";
                } else if (currentTime < 18) {
                    greeting = "Good Afternoon";
                    customStyle.color = "green";
                } else {
                    greeting = "Good Night";
                    customStyle.color = "blue";
                }

                function Greeting() {
                return (
                    <h1 className="heading" style={customStyle}>
                        {greeting}
                    </h1>
                );
                }
                export default Greeting;

    -React Import/Export:
        -DON'T FORGET TO EXPORT THE MODULE.
        -you can name anything you want for default export while importing.
        -if more than one thing exported, then it will be the same as named exports while importing. but you can rename using 'as' keyword. 
        -there MUST be one DEFAULT export per file.

        -multiple export 
            export {compo1, compo2,..., compoN} from 'path'.
        
        -default export
            export default componentName.
        
        eg.
            variable import /export
            math.js
                const PI = 3.149;
                export default PI;

            App.js
                import PIE from './math';       //name anything you want its default export
                //import PIE from './math.js';       //name anything you want its default export & if you want give exntension else don't give its fine.
                
                ReactDOM.render(
                <ul>
                    <li>{PIE}</li>
                    <li>2</li>
                    <li>3</li>
                </ul>,
                document.getElementById("root")
                );
        -----------------------------------------------------
            Function export/import
                math.js
                    const PI = 3.149;

                    function doublePI() {
                        return PI * 2;
                    }

                    function triplePI() {
                        return PI * 3;
                    }

                    export default PI; //exporting default single only. (variable)  & the EXPORT DEFAULT is single for per file.

                    //exporting multiple, functions.
                    export { doublePI, triplePI };

                App.js
                    import React from "react";
                    import ReactDOM from "react-dom";
                    import PIE, { doublePI as DPI, triplePI } from "./math";

                    ReactDOM.render(
                        <ul>
                            <li>{PIE}</li>
                            <li>{DPI()}</li>            //doublePI is imported as DPI & they are function so braces is important
                            <li>{triplePI()}</li>       // at the end.
                        </ul>,
                        document.getElementById("root")
                    );
        -----------------------------------------------------
            WildCard import /export
                App.js file:
                    import React from "react";
                    import ReactDOM from "react-dom";
                    import * as ALL from "./math";

                    ReactDOM.render(
                    <ul>
                        <li>{ALL.default}</li>
                        <li>{ALL.doublePI()}</li>
                        <li>{ALL.triplePI()}</li>
                    </ul>,
                    document.getElementById("root")
                    );
        -----------------------------------------------------
        import/export practice
            -imported using WildCard (*).
            calculator.js file
                function add(n1, n2) {
                    return n1 + n2; 
                }

                function multiply(n1, n2) {
                    return n1 * n2;
                }

                function subtract(n1, n2) {
                    return n1 - n2;
                }

                function divide(n1, n2) {
                    return n1 / n2;
                }
                export { add, multiply, subtract, divide };

            app.js file
                import React from "react";
                import ReactDOM from "react-dom";
                import * as ALL from "./calculator";

                //import { divide, add, multiply, subtract } from "./calculator";


                ReactDOM.render(
                <ul>
                    <li>{ALL.add(1, 2)}</li>
                    <li>{ALL.multiply(2, 3)}</li>
                    <li>{ALL.subtract(7, 2)}</li>
                    <li>{ALL.divide(5, 2)}</li>

                {/*
                    <li>{add(1, 2)}</li>
                    <li>{multiply(2, 3)}</li>
                    <li>{subtract(7, 2)}</li>
                    <li>{divide(5, 2)}</li>
                /*}

                </ul>,
                document.getElementById("root")
                );
    
    -Local Environment SetUp for React:
        1) Install Node updated
        2) Install VS code
        3) Create react app
        4) Run App
        -creating react app
            npx create-react-app <app-name>
                npx create-react-app first-app

            -creating within current folder use . (period) at the end.
                npx create-react-app .
        
        -Run App
             npm start
    
    -Keeper App Project
        -Ran npm i command at start.
            npm i
        -Done Project
        -Don't apply styling for custom created components apply for HTML elements only.

    -React Props:
        -React Properties.
        -Using this you can make component customizable.
        -you can pass custom values to the component.
        -attributes of custom Components are called properties (Props)
        -You can't ADD THE CLASS TO THE CUSTOM COMPONENTS. it'll consider it as custom property.
        eg.
            index.js file:
                import React from "react";
                import ReactDOM from "react-dom";


                function Card({name, img, tel, mail}){       //this is called the de-structuring of attributes
                    return(
                        <div>
                        <h2>{name}</h2>
                        <img
                            src={img}
                            alt="avatar_img"
                        />
                        <p>{tel}</p>
                        <p>{mail}</p>
                        </div>
                    );
                }

                //OR

                function Card(props){
                    return(
                        <div>
                        <h2>{props.name}</h2>
                        <img
                            src={props.img}
                            alt="avatar_img"
                        />
                        <p>{props.tel}</p>
                        <p>{props.mail}</p>
                        </div>
                    );
                }


                ReactDOM.render(
                    <div>
                        <h1>My Contacts</h1>
                        <Card 
                            name='Beyonce' 
                            img='https://blackhistorywall.files.wordpress.com/2010/02/picture-device-independent-bitmap-119.jpg' 
                            tel='+123 456 789'
                            mail='b@beyonce.com'
                        />

                        <Card 
                            name='Chuck Norris' 
                            img='https://i.pinimg.com/originals/e3/94/47/e39447de921955826b1e498ccf9a39af.png' 
                            tel='+918 372 574'
                            mail='gmail@chucknorris.com'
                        />

                        <Card 
                            name='Jack Bauer' 
                            img='https://pbs.twimg.com/profile_images/625247595825246208/X3XLea04_400x400.jpg' 
                            tel='+987 654 321'
                            mail='jack@nowhere.com'
                        />
                    </div>,
                    document.getElementById("root")
                );

    -React props practice:
        src->contact.js file
            const contacts = [
                {
                    name: "Beyonce",
                    imgURL:
                    "https://blackhistorywall.files.wordpress.com/2010/02/picture-device-independent-bitmap-119.jpg",
                    phone: "+123 456 789",
                    email: "b@beyonce.com"
                },
                {
                    name: "Jack Bauer",
                    imgURL:
                    "https://pbs.twimg.com/profile_images/625247595825246208/X3XLea04_400x400.jpg",
                    phone: "+987 654 321",
                    email: "jack@nowhere.com"
                },
                {
                    name: "Chuck Norris",
                    imgURL:
                    "https://i.pinimg.com/originals/e3/94/47/e39447de921955826b1e498ccf9a39af.png",
                    phone: "+918 372 574",
                    email: "gmail@chucknorris.com"
                },
                {
                    name: "Sarang Channe",
                    imgURL:
                    "https://media.licdn.com/dms/image/C4E03AQEsM94KhBCmEw/profile-displayphoto-shrink_800_800/0/1622289009432?e=2147483647&v=beta&t=rVJx5DX8B5GMV0YtbPviJQo2rPtmQKH_kpXdVzv9u8c",
                    phone: "+123456789",
                    email: "Sarangi.com"
                }
            ];
            export default contacts;

        src-> index.js file
            import React from "react";
            import ReactDOM from "react-dom";
            import App from "./components/App";

            ReactDOM.render(<App />, document.getElementById("root"));
        
        src->components-> Card.jsx file
            import React from "react";
            function Card(props) {
                return (
                    <div className="card">
                    <div className="top">
                        <h2 className="name">{props.name}</h2>
                        <img src={props.imgURL} alt="avatar_img" className="circle-img" />
                    </div>
                    <div className="bottom">
                        <p className="info">{props.phone}</p>
                        <p className="info">{props.email}</p>
                    </div>
                    </div>
                );
            }
            export default Card;
        
        src->components-> App.jsx file
            import React from "react";
            import contcts from "../contacts";
            import Card from "./Card";

            function App() {
            return (
                <div>
                <h1 className="heading">My Contacts</h1>
                <Card
                    name={contcts[0].name}
                    email={contcts[0].email}
                    phone={contcts[0].phone}
                    imgURL={contcts[0].imgURL}
                />
                <Card
                    name={contcts[1].name}
                    email={contcts[1].email}
                    phone={contcts[1].phone}
                    imgURL={contcts[1].imgURL}
                />
                <Card
                    name={contcts[2].name}
                    email={contcts[2].email}
                    phone={contcts[2].phone}
                    imgURL={contcts[2].imgURL}
                />
                <Card
                    name={contcts[3].name}
                    email={contcts[3].email}
                    phone={contcts[3].phone}
                    imgURL={contcts[3].imgURL}
                />
                </div>
            );
            }
            export default App;

    -React DevTools:
        for Debugging websites
        inspect mode in that goto COMPONENT tab. for 

        src->components-> Information.jsx file          //you can name file anything & create component with other name.
                                                        //but use it as the name you exported here we'll use it as <Details />
            import React from "react";

            function Details(props){
                return (
                    <p className="info">{props.info}</p>
                );
            }
            export default Details;
    
        -project splitted in smaller components:
            public->index.html
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <title>React App</title>
                    <link rel="stylesheet" href="styles.css" />
                </head>

                <body>
                    <div id="root"></div>
                    <script src="../src/index.js" type="text/jsx"></script>
                </body>
                </html>

            public->styles.css
                body {
                    font-family: sans-serif;
                    margin: 0 auto;
                    padding: 25px;
                    max-width: 400px;
                    min-width: 400px;
                    background-color: #dfe6e9;
                    text-align: center;
                }

                .heading {
                    text-align: center;
                    font-size: 2em;
                    color: #2d3436;
                    margin: 20px 0 30px;
                }

                .card {
                    border-radius: 25px;
                    position: relative;
                    padding: 25px 15px;
                    background-color: #81ecec;
                    margin: 50px 0;
                    height: 200px;
                    box-shadow: 0 2px 5px #ccc;
                    text-align: left;
                }

                .top {
                    border-radius: 25px 25px 0 0;
                    height: 100px;
                    width: 100%;
                    background-color: #00cec9;
                    position: absolute;
                    top: 0;
                    left: 0;
                    display: flex;
                }

                .name {
                    font-size: 2em;
                    color: #2d3436;
                    display: flex;
                    flex: 1;
                    margin: 10% 20px 0;
                }

                .card img {
                    margin: 30px 20px 0 0;
                }

                .circle-img {
                    border-radius: 50%;
                    border: 7px solid #fff;
                    width: 120px;
                    height: 120px;
                }

                .bottom {
                    margin-top: 120px;
                }

                .info {
                    margin: 20px 0;
                    color: #1a7e76;
                }

            src->components-> App.jsx
                import React from "react";
                import contcts from "../contacts";
                import Avatar from "./Avatar";
                import Card from "./Card";

                function App() {
                return (
                    <div>
                    <h1 className="heading">My Contacts</h1>
                    <Avatar img='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8cOVE8YmNjAIjh3ysyKfHFZL9vcDzNInHiWwOu_gthA&s' />
                    <Card
                        name={contcts[0].name}
                        email={contcts[0].email}
                        phone={contcts[0].phone}
                        imgURL={contcts[0].imgURL}
                    />
                    <Card
                        name={contcts[1].name}
                        email={contcts[1].email}
                        phone={contcts[1].phone}
                        imgURL={contcts[1].imgURL}
                    />
                    <Card
                        name={contcts[2].name}
                        email={contcts[2].email}
                        phone={contcts[2].phone}
                        imgURL={contcts[2].imgURL}
                    />
                    <Card
                        name={contcts[3].name}
                        email={contcts[3].email}
                        phone={contcts[3].phone}
                        imgURL={contcts[3].imgURL}
                    />

                    //or creating cards using map function.

                    {
                        contcts.map((i,index)=>{
                        return(
                            <Card 
                            num = {index}
                            key ={i.name}   //this key should be unique not duplicated. & this key is not a prop its used to render all DOM item properly.
                            name= {i.name}
                            imgURL = {i.imgURL}
                            phone = {i.phone}
                            email = {i.email}
                            />
                        );
                        })
                    }


                    </div>
                );
                }

                export default App;

            src->components-> Avatar.jsx
                import React from 'react';

                function  Avatar(props){
                    return(
                        <img src={props.img} alt="avatar_img" className="circle-img" />
                    );
                }

                export default Avatar;

            src->components-> Card.jsx
                import React from "react";
                import Avatar from "./Avatar";
                import Details from "./Information";

                function Card(props) {
                return (
                    <div className="card">
                    <div className="top">
                        <h2 className="name">{props.name}</h2>
                        <Avatar img={props.imgURL}/>
                    </div>
                    <div className="bottom">
                        <Details info={props.phone} />
                        <Details info={props.email}/>
                    </div>
                    </div>
                );
                }

                export default Card;

            src->components-> Information.jsx
                import React from "react";
                function Details(props){
                    return (
                        <p className="info">{props.info}</p>
                    );
                }

                export default Details;

            src->contact.js file
                const contacts = [
                    {
                        name: "Beyonce",
                        imgURL:
                        "https://blackhistorywall.files.wordpress.com/2010/02/picture-device-independent-bitmap-119.jpg",
                        phone: "+123 456 789",
                        email: "b@beyonce.com"
                    },
                    {
                        name: "Jack Bauer",
                        imgURL:
                        "https://pbs.twimg.com/profile_images/625247595825246208/X3XLea04_400x400.jpg",
                        phone: "+987 654 321",
                        email: "jack@nowhere.com"
                    },
                    {
                        name: "Chuck Norris",
                        imgURL:
                        "https://i.pinimg.com/originals/e3/94/47/e39447de921955826b1e498ccf9a39af.png",
                        phone: "+918 372 574",
                        email: "gmail@chucknorris.com"
                    },
                    {
                        name: "Sarang Channe",
                        imgURL:
                        "https://media.licdn.com/dms/image/C4E03AQEsM94KhBCmEw/profile-displayphoto-shrink_800_800/0/1622289009432?e=2147483647&v=beta&t=rVJx5DX8B5GMV0YtbPviJQo2rPtmQKH_kpXdVzv9u8c",
                        phone: "+123456789",
                        email: "Sarangi.com"
                    }
                ];

                export default contacts;

            src->index.js file
                import React from "react";
                import ReactDOM from "react-dom";
                import App from "./components/App";

                ReactDOM.render(<App />, document.getElementById("root"));

        -Minimizing Repetition: Mapping
            {
                contcts.map((i,index)=>{            //this is arrow anonymous function. & function must return.
                return(
                    <Card 
                    num = {index}
                    key ={i.name}   //this key should be unique not duplicated. & this key is not a prop its used to render all DOM item properly.
                    name= {i.name}
                    imgURL = {i.imgURL}
                    phone = {i.phone}
                    email = {i.email}
                    />
                );
                })
            }

        -Mapping function:
            public->index.html
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <title>React App</title>
                    <link
                    href="https://fonts.googleapis.com/css?family=Montserrat&display=swap"
                    rel="stylesheet"
                    />
                    <link rel="stylesheet" href="styles.css" />
                </head>

                <body>
                    <div id="root"></div>
                    <script src="../src/index.js" type="text/jsx"></script>
                </body>
                </html>

            public->styles.css
                body {
                font-family: "Montserrat", sans-serif;
                font-weight: 400;
                line-height: 1.666;
                background: #c0d2d4;
                color: #555;
                }

                h1 {
                font-weight: 900;
                font-size: 500%;
                text-align: center;
                margin-top: 4rem;
                color: #fff;
                line-height: 1.2;
                }

                h1 span {
                padding: 5px 15px;
                background: #2ec2b0;
                }

                .dictionary {
                display: flex;
                flex-wrap: wrap;
                justify-content: space-between;
                margin: 4rem auto;
                max-width: 90%;
                }

                .dictionary > .term {
                text-align: center;
                max-width: 20rem;
                margin-bottom: 3rem;
                padding: 2rem;
                border-radius: 3px;
                box-shadow: 0 2px 0 rgba(0, 0, 0, 0.05), 0 5px 20px rgba(0, 0, 0, 0.1);
                background-color: #fff;
                transition: all 100ms ease-in-out;
                }

                .dictionary > .term > dt {
                margin-bottom: 1rem;
                }

                dt {
                color: #2ec2b0;
                line-height: 1;
                }

                dt span {
                font-size: 200%;
                font-weight: 900;
                }

                .emoji {
                margin: 0 auto 20px;
                display: block;
                font-size: 400%;
                }

                dd {
                font-size: 92.5%;
                margin-left: 0;
                }

                dd dt {
                margin-top: 1rem;
                margin-bottom: 0.25rem;
                font-weight: 600;
                font-size: inherit;
                }

                dd dl {
                font-size: 90%;
                margin: 1rem auto 0 auto;
                letter-spacing: 0.33px;
                max-width: 15rem;
                }

                dd dl .term {
                margin-bottom: 1rem;
                }

            src->components->App.jsx
                import React from "react";
                import Entry from "./Entry";
                import emojipedia from "../emojipedia";

                function App() {
                return (
                    <div>
                    <h1>
                        <span>emojipedia</span>
                    </h1>
                    <dl className="dictionary">
                        {
                            emojipedia.map((emojiTerm) => {
                                return (
                                    <Entry
                                    key={emojiTerm.id}
                                    emoji={emojiTerm.emoji}
                                    name={emojiTerm.name}
                                    description={emojiTerm.meaning}
                                    />
                                );
                            })
                        }
                    </dl>
                    </div>
                );
                }

            src->components->Entry.jsx
                import React from "react";

                function Entry(props) {
                return (
                    <div className="term">
                    <dt>
                        <span className="emoji" role="img" aria-label="Tense Biceps">
                        {props.emoji}
                        </span>
                        <span>{props.name}</span>
                    </dt>
                    <dd>{props.description}</dd>
                    </div>
                );
                }

                export default Entry;

            src->components-> emojipedia.js file
                const emojipedia = [
                    {
                        id: 1,
                        emoji: "💪",
                        name: "Tense Biceps",
                        meaning:
                        "“You can do that!” or “I feel strong!” Arm with tense biceps. Also used in connection with doing sports, e.g. at the gym."
                    },
                    {
                        id: 2,
                        emoji: "🙏",
                        name: "Person With Folded Hands",
                        meaning:
                        "Two hands pressed together. Is currently very introverted, saying a prayer, or hoping for enlightenment. Is also used as a “high five” or to say thank you."
                    },
                    {
                        id: 3,
                        emoji: "🤣",
                        name: "Rolling On The Floor, Laughing",
                        meaning:
                        "This is funny! A smiley face, rolling on the floor, laughing. The face is laughing boundlessly. The emoji version of “rofl“. Stands for „rolling on the floor, laughing“."
                    },
                    {
                        id: 4,
                        emoji: "🤣",
                        name: "Rolling On The Floor, Laughing",
                        meaning:
                        "This is funny! A smiley face, rolling on the floor, laughing. The face is laughing boundlessly. The emoji version of “rofl“. Stands for „rolling on the floor, laughing“."
                    },
                    {
                        id: 5,
                        emoji: "🤣",
                        name: "Rolling On The Floor, Laughing",
                        meaning:
                        "This is funny! A smiley face, rolling on the floor, laughing. The face is laughing boundlessly. The emoji version of “rofl“. Stands for „rolling on the floor, laughing“."
                    },
                    {
                        id: 6,
                        emoji: "🤣",
                        name: "Rolling On The Floor, Laughing",
                        meaning:
                        "This is funny! A smiley face, rolling on the floor, laughing. The face is laughing boundlessly. The emoji version of “rofl“. Stands for „rolling on the floor, laughing“."
                    },
                    {
                        id: 7,
                        emoji: "🤣",
                        name: "Rolling On The Floor, Laughing",
                        meaning:
                        "This is funny! A smiley face, rolling on the floor, laughing. The face is laughing boundlessly. The emoji version of “rofl“. Stands for „rolling on the floor, laughing“."
                    }
                ];

                export default emojipedia;
      
            src->components-> index.js file
                import React from "react";
                import ReactDOM from "react-dom";
                import App from "./components/App";

                ReactDOM.render(<App />, document.getElementById("root"));

    -Map/ Filter/ Reduce/ Find/ FindIndex :

            import EMJPD from "./emojipedia";
            let newArr = [];

            EMJPD.map(function (curItem) {
                newArr.push(curItem.meaning.substring(1,100)+"...");
            });

            console.log(newArr);

        -var numbers = [3, 56, 2, 48, 5];

        //Map -Create a new array by doing something with each item in an array.
        let newMapNum = [];

        //passing function to the map or forEach funtion
        function tripleIt(x) {
        return x * 3;
        }

        let num = numbers.map(tripleIt);
        console.log("the num arry " + num); //1st

        let mapNum = numbers.map((num) => {
        return newMapNum.push(num + 10);
        });

        console.log(newMapNum); //new array increment by 10;      //2nd

        //or
        newMapNum = [];
        //using forEach

        numbers.forEach(function (x) {
        newMapNum.push(x * 10);
        });

        console.log(newMapNum); //multiplied by 10          //3rd

        //Filter - Create a new array by keeping the items that return true.

        let numFiltered = numbers.filter(function (item_got_from_numbers) {
            return item_got_from_numbers > 10;
        });

        console.log(numFiltered); //4th num > 10 will get added.

        //Reduce - Accumulate a value by doing something to each item in an array.
        //sum of
        let numReduced = numbers.reduce((accumulator, currentNumber) => {
        console.log("accumulator :" + accumulator);
        console.log("currentNumber :" + currentNumber);
        return accumulator + currentNumber;
        });

        console.log(numReduced);

        //Find - find the first item that matches from an array.

        let numFind = numbers.find(function (x){
        return x >50
        })

        console.log(numFind); //5th



        //FindIndex - find the index of the first item that matches.
        let numFindIndex = numbers.findIndex((x)=>{
        return x > 2;
        })

        console.log(numFindIndex); //6th
    
    -JS Arrow Function:
        if function have single parameter & single return statement then NO NEED of curly braces {}, parenthesis () 
        & return keyword also.
        eg.
            let numFind = numbers.find(function (x){
                return x >50
            })
            console.log(numFind);

        //or in arrow function no return statement & curly {} braces is there. 

            let numFind = numbers.find(x => x >50)
            console.log(numFind);

            //or
            let numFind = numbers.find(x => x > 50);
            let numFind = numbers.find((x) => x > 50);
        
        eg.
            let numFiltered = numbers.filter(function (item_got_from_numbers) {
                return item_got_from_numbers > 10;
            });

        //or arrow function

            numFiltered = numbers.filter(item_got_from_numbers => item_got_from_numbers > 10);

        //normal
            {   
                emojipedia.map((emojiTerm) => {
                    return (
                        <Entry
                        key={emojiTerm.id}
                        emoji={emojiTerm.emoji}
                        name={emojiTerm.name}
                        description={emojiTerm.meaning}
                        />
                    );
                })
            }
        
        //using arrow funtion
             {
                emojipedia.map(emojiTerm =>  (
                        <Entry
                            key={emojiTerm.id}
                            emoji={emojiTerm.emoji}
                            name={emojiTerm.name}
                            description={emojiTerm.meaning}
                        />
                    );
                )
            }

        -Keeper-2
            Section 38 -> refere Keeper-2 folder 
    
    -React Conditional Rendering with the Ternary Operator & AND Operator
        -Single Responsibility Principle (chopping the giant code into smaller pieces.)
            always create reusable components

        -each component should have single Responsibility.

            let isLogin = true

            {isLogin === true ? <h1>Hello</h1> : <Login />}         //or
            {isLogin ? <h1>Hello</h1> : <Login />}

            let isTime = new Date().getHours();
            {(isTime > 12) ? <h1>Why are you working..?</h1> : null}

            //or
            //using && operator if both side are true then right side will be printed. 
                if left side is false then it won't check for the right side condition.

            let isTime = new Date().getHours();
            {isTime > 12 && <h1>Why are you working..?</h1>}
            {isLogin && <h1>Hello</h1> }
    
    -React calling function:
        I have a question regarding calling a function in React.
        Say I have this code:

            function test() {
                console.log("hi");
            }

        Then I am implementing it like this:

                return (
                    <TextField label="Name" name='itemName' value={formValues.itemName} onChange={test} />
                )
        
        If I do it this way: test it will be fine. It will only change when I put something on the field.
        But if I do it test() then the function will be triggered right away on every render.

        When you write test() you are calling the function on the spot (executing your function).
        On the other hand, writing it like this test will pass a pointer to the function that needs to be executed later (onChange in your case).

    -React Hooks
        eg.
            const state = useState(1)       //whatever value you put here. that's a starting value/state.   

            const [red, green, blue] = [234, 178, 160];         //array de-structuring.

            const [red, green, ...blue] = [234, 178, 160, 2,3,4,5,6,7];

            <p>{red}</p>            //234
            <p>{green}</p>          //178
            <p>{blue}</p>           //rest all values

        eg.

            function App() {
            const [count, setCount] = useState(0);

            function increment() {
                setCount(count + 1);
            }

            function decrement() {
                setCount(count - 1);
            }

            return (
                <div className="container">
                <h1>{count}</h1>
                <button onClick={increment}>+</button>
                <button onClick={decrement}>-</button>
                </div>
            );
            }

            export default App;
    
    -useState hook:
        -calling function every second
            function funName(){
                //code
            }
            setInterval(funName,1000)
    
    -Array De-Structuring JS:
        Animal.js file:
            const animals = [
                {
                    name: "cat",
                    sound: "meow",
                    feedingRequirement: {
                    food: 2,
                    water: 4,
                    foodName: "CatFood"
                    }
                },
                { name: "dog", sound: "woof" }
            ];
            export default animals;

        index.js file:
            import animal from "./data";

            const [cat, ...dog] = animal;

            console.log(cat);
            console.log(dog);

            console.log(cat.name);
            console.log(cat.sound);

            //or

            // const { name, sound } = cat;
            // console.log(name);
            // console.log(sound);

            //or Renaming properties of object.

            const { name: catName, sound: catSound } = cat;
            console.log(catName);
            console.log(catSound);

            //or passing default value if actual is not present

            const { name: dogName = "shera", sound: dogSound = "BowBow" } = dog;            //de-structuring Object.

            console.log(dogName);
            console.log(dogSound);

            //destructuring single object of cat.
            const {
                feedingRequirement: { food, water, foo dName }
            } = cat;

            console.log(`cat food name is ${foodName}`);
            console.log(`cat feeded by ${food} times a day`);
            console.log(`cat need to drunk water by ${water} times a day`);    

            //function
            animal.js file
            function useAnimal(animals) {
                return [
                    animals.name,
                    function () {
                    console.log(animals.sound);
                    }
                ];
            }

            export { useAnimal };

            index.js file
                
                const [cat, dog] = animal;           //for de-structuring array

                const [animal, makeSound] = useAnimals(dog);
                console.log(animal);
                makeSound()
            
    -Challenge:
        cars.js file:
            const cars = [
                {
                    model: "Honda Civic",
                    //The top colour refers to the first item in the array below:
                    //i.e. hondaTopColour = "black"
                    coloursByPopularity: ["black", "silver"],
                    speedStats: {
                    topSpeed: 140,
                    zeroToSixty: 8.5
                    }
                },
                {
                    model: "Tesla Model 3",
                    coloursByPopularity: ["red", "white"],
                    speedStats: {
                    topSpeed: 150,
                    zeroToSixty: 3.2
                    }
                }
            ];
            export default cars;

        index.js file:
            // CHALLENGE: uncomment the code below and see the car stats rendered
            import React from "react";
            import ReactDOM from "react-dom";
            import cars from "./practice";

            const [honda, tesla] = cars;

            const {
            speedStats: { topSpeed: hondaTopSpeed }
            // coloursByPopularity: hondaTopColour
            } = honda;

            const {
            speedStats: { topSpeed: teslaTopSpeed }
            // coloursByPopularity: teslaTopColour
            } = tesla;

            // const [teslaTopColour] = tesla.coloursByPopularity
            // const [hondaTopColour] = honda.coloursByPopularity

            const { coloursByPopularity: [hondaTopColour]} = honda;
            const { coloursByPopularity: [teslaTopColour]} = tesla;

            //other way

            // const [honda, tesla] = cars;

            // const {
            //   speedStats: { topSpeed: hondaTopSpeed }
            // } = honda;

            // const {
            //   speedStats: { topSpeed: teslaTopSpeed }
            // } = tesla;

            // const {
            //   coloursByPopularity: [, hondaTopColour]      //accessing 2nd color
            // } = honda;
            // const {
            //   coloursByPopularity: [, teslaTopColour]
            // } = tesla;



            ReactDOM.render(
            <table>
                <tr>
                <th>Brand</th>
                <th>Top Speed</th>
                </tr>
                <tr>
                <td>{tesla.model}</td>
                <td>{teslaTopSpeed}</td>
                <td>{teslaTopColour}</td>
                </tr>
                <tr>
                <td>{honda.model}</td>
                <td>{hondaTopSpeed}</td>
                <td>{hondaTopColour}</td>
                </tr>
            </table>,
            document.getElementById("root")
            );
    
    -Event Handling:
         function App() {
            const [text, setText] = useState("Hello");
            const [mouseOver, setMouseOver] = useState(false);

            function clicked() {
                setText("submitted");
            }

            function changeColor() {
                setMouseOver(true)
            }
            function originalColor() {
                setMouseOver(false)
            }

            return (
                <div className="container">
                <h1>{text}</h1>
                <input type="text" placeholder="What's your name?" />
                <button
                    onClick={clicked}
                    style={{backgroundColor: mouseOver? 'black' : 'white'}}
                    onMouseOver={changeColor}
                    onMouseOut={originalColor}
                >
                    Submit
                </button>
                </div>
            );
        }

        export default App;

    -React forms:
        function changing(e){
            console.log(e.target.value);
            console.log(e.target.placeholder);
            console.log(e.target.type);
        }

        <input 
            onChange={changing}
            type="text" 
            placeholder="What's your name?" 
         />
        
        -App.js
            import React, { useState } from "react";

            function App() {
                const [name, setName] = useState("");

                const [head, setHead] = useState("");

                function changeName() {
                    setHead(name);
                }

                function handleChange(event) {
                    setName(event.target.value);
                    //event.preventDefault();           //prevent form from submiting
                }

                <form onSubmit={handleChange}>
                
                </form>

                return (
                    <div className="container">
                    <h1>Hello {head}</h1>
                    <input
                        onChange={handleChange}
                        type="text"
                        placeholder="What's your name?"
                    />
                    <button onClick={changeName}>Submit</button>
                    </div>
                );
            }

            export default App;

    -Class component vs. functional component:
        eg.
            class App extends React.Component{
                render(
                    return <h1>Hello </h1>
                )
            }
        
        -you can use hooks with only functional components NOT WITH CLASS COMPONENTS

    -Complex State practice:
        ----------------------------------------------------------
            import React, { useState } from "react";

            function App() {
            const [contact, setContact] = useState({
                fName: "",
                lName: "",
                email: ""
            });

            function handleChange(event) {
                // const name = event.target.name;
                // const value = event.target.value;

                const { name, value } = event.target;

                // console.log(name);
                // console.log(value);

                setContact((storedValue) => {
                if (name === "fName") {
                    return {
                    fName: value,
                    lName: storedValue.lName,
                    email: storedValue.email
                    };
                } else if (name === "lName") {
                    return {
                    fName: storedValue.fName,
                    lName: value,
                    email: storedValue.email
                    };
                } else {
                    return {
                    fName: storedValue.fName,
                    lName: storedValue.lName,
                    email: value
                    };
                }
                });
            }

            return (
                <div className="container">
                <h1>
                    Hello {contact.fName} {contact.lName}
                </h1>
                <p>{contact.email}</p>
                <form>
                    <input
                        onChange={handleChange}
                        name="fName"
                        placeholder="First Name"
                        value={contact.fName}
                    />
                    <input
                        onChange={handleChange}
                        name="lName"
                        placeholder="Last Name"
                        value={contact.lName}
                    />
                    <input
                        onChange={handleChange}
                        name="email"
                        placeholder="Email"
                        value={contact.email}
                    />
                    <button>Submit</button>
                </form>
                </div>
            );
            }

            export default App;

        --------------------------------------------------------
            import React, { useState } from "react";

            function App() {
            const [fullName, setFullName] = useState({
                frName: "",
                lsName: ""
            });

            function handleChange(event) {
                const name = event.target.name;
                const value = event.target.value;

                setFullName((preValue) => {
                if (name === "fName") {
                    return {
                    frName: value,
                    lsName: preValue.lsName
                    };
                } else {
                    return {
                    frName: preValue.frName,
                    lsName: value
                    };
                }
                });
            }

            //or for handleChange function
            function handleChange(event) {
                const { name, value } = event.target;

                setContact((Prevalues) => {
                return {
                    ...Prevalues,
                    [name]: value
                }; 

                // OR FOR setContact
                // setContact((prevValue) => ({ ...prevValue, [name]: value }));

            });

            return (
                <div className="container">
                <h1>
                    Hello {fullName.frName} {fullName.lsName}
                </h1>
                <form>
                    <input
                    onChange={handleChange}
                    name="fName"
                    placeholder="First Name"
                    value={fullName.frName}
                    />
                    <input
                    onChange={handleChange}
                    name="lName"
                    placeholder="Last Name"
                    value={fullName.lsName}
                    />
                    <button>Submit</button>
                </form>
                </div>
            );
            }

            export default App;

    -JS Spread Operator:
        const citrius = ["lemon", "tartaric", "cold-drinks"];

        let fruits = ["Apple", "banana", "Chiku", ...citrius];

        console.log(citrius);                   //["lemon", "tartaric", "cold-drinks"]
        console.log(fruits);                    // ["Apple", "banana", "Chiku", "lemon", "tartaric", "cold-drinks"]

        fruits = ["Apple", ...citrius, "banana", "Chiku"];          //using spread operator.
        console.log(fruits);                    //["Apple", "lemon", "tartaric", "cold-drinks", "banana", "Chiku"]


        fruits = ["Apple", citrius, "banana", "Chiku"];     //without using spread operator
        console.log(fruits);                                // ["Apple", Array(3), "banana", "Chiku"]
                                                                0: "Apple"
                                                                1: Array(3)
                                                                    0: "lemon"
                                                                    1: "tartaric"
                                                                    2: "cold-drinks"
                                                                2: "banana"
                                                                3: "Chiku"

    -ES6 Spread Operator Practice:
        import React, { useState } from "react";

        function App() {
            const [task, setTask] = useState("");
            const [works, setWorks] = useState([]);

            function handleChange(event) {
                setTask(event.target.value);
            }

            function btnClick() {
                // setWorks((oldValues) => [...oldValues, task]);
                //or

                setWorks((oldValues)=>{
                return[...oldValues, task]
                })

                setTask("");
            }

            return (
                <div className="container">
                <div className="heading">
                    <h1>To-Do List</h1>
                </div>
                <div className="form">
                    <input type="text" onChange={handleChange} value={task} />
                    <button onClick={btnClick}>
                    <span>Add</span>
                    </button>
                </div>
                <div>
                    <ul>
                    <li>A Item</li>
                    {works.map((todoItem) => {
                        return <li>{todoItem}</li>;
                    })}
                    </ul>
                </div>
                </div>
            );
        }

        export default App;
    
    -Managing Component Tree:
        -Props are readOnly.

        -App.js file
            import ToDoItem from "./ToDoItem";
             <ul>
                {items.map((todoItem) => (
                    // <li>{todoItem}</li>
                    <ToDoItem name={todoItem} />
                ))}
            </ul>
        -ToDoItem.jsx file
            import React from "react";

            function ToDoItem(props) {
                return <li>{props.name}</li>;
            }

            export default ToDoItem;

        -ToDoItem file
            import React, { useState } from "react";

            function ToDoItem(props) {
                const [clicked, setClick] = useState(false);

                function chnageStyle() {
                    //setClick(!clicked);

                    // or
                    setClick((oldValue) => {
                        return !oldValue;
                    });

                    //or

                    // let i = clicked;
                    // if (i == true) setClick(false);
                    // else setClick(true);

                    console.log(clicked);
                }

                //or
                //const customStyle = { textDecoration: clicked ? "line-through" : "none" };


                return (
                    <li
                    onClick={chnageStyle}
                    style={{ textDecoration: clicked ? "line-through" : "none" }}
                    //style={customStyle}
                    >
                    {props.name}
                    </li>
                );
            }

            export default ToDoItem;

        -passing function to the component:
            -I'm going to use the index as the key. Now in an ideal world, React advises us 
             to not use the index for the key and instead use some sort of unique identifying string.            
------------------------------------------------------------------------------------------------------------------------------------
Section 39: Web3 De-centralised App (DApp)
    -BlockChain is a ledger
    -Instead of using Encryption BlockChain uses Hashing.
    -Cause from Encryption msg can be decrypted.

    -commands:
        open powershell & then type..
            wsl --install
            wsl --install -d <distro_name>
                wsl --install -d Ubuntu
            
            To turn on Ubuntu machine, use command 
                wsl 
    
    -Project Creation:
        -mkdir ic-projects
        -cd ic-projects
        -dfx new <Project_name>
        eg.
            dfx new hello
            dfx new dbank
        -mkdir ic-projects; cd ic-projects; dfx new hello

        -to open file explorer
            explorer.exe .      //in current folder.
        
        -open project in vs code.
        -to run project
            dfx start
        
        -in new terminal
            -dfx deploy

        to run 
            -npm start (if got error related webpack cli use below command)
                -npm install webpack-cli@4.10.0
------------------------------------------------------------------------------------------------------------------------------------
Section 40: DeCentralised Finanace App

    -make a folder
        mkdir project

    -create new project
        dfx new <Project_name>
    
    -main.mo file:
        import Debug "mo:base/Debug";

        actor DBank{
            var currentValue = 300;                 //implicit datatype (not mentioned). Nat stands for natural number.
            var value: Int = 300;                 //explicitly datatype (mentioned).
            var value: Nat = 300;                 //explicitly datatype (mentioned).

            currentValue := 100;

            // Debug.print("Vivek Nikate,")

            Debug.print(debug_show(currentValue));
        }
    
    -actor is our canister.
    -let keyword is used to create contstants.
    -var keyword is used to create variable.

    -Motoko Function & candid user interface
    
        //creating function
            func topUP() {
                currentValue +=1;
                Debug.print("Updated Value : ");
                Debug.print(debug_show(currentValue));
            };

        //calling
        topUP();

        -instead of deploying complete project using dfx deploy.
         we can call the specific method also. using this command,
            -dfx canister call <canister_name> <function_name> 
            -dfx canister call dbank topUP          (it will give error if function is private).

        -public functions:
            public func topUP() {
                currentValue +=1;
                Debug.print("Updated Value : ");
                Debug.print(debug_show(currentValue));  
            };
        
        -Candid:
            -candid is an interface description language
            
            -creating candid id:
                -dfx canister id __Candid_UI
                -copy the output of above command.
                
                -then open the link of starting server which is came after running 'dfx start' command. eg.
                    http://127.0.0.1:8000/

                put ? at end, & canisterId as key & value the copied canisterid.
                eg.
                    http://127.0.0.1:8000/?canisterId=r7inp-6aaaa-aaaaa-aaabq-cai
                
                -asking for canister id:
                    run this command
                        dfx canister id <your_canister_name>.
                        dfx canister id dbank

                    -copy its output & put into 'Provide a canister ID' this field.
                
                -this will create fronted for that function

        -Argument to function:  amount is name & Nat is natural num.
            public func topUP(amount: Nat) {
                currentValue +=1;
                Debug.print("Updated Value : ");
                Debug.print(debug_show(currentValue));
            };

        -Query function & Update function:
            usually making changes in this, its slow,
            to go ultra fast mode need to use query method.
            -end of every line there should be semicolon.
            -if its last function, then no need to add semicolon.
            eg.
                Update funtion:
                    public func topUP(amount: Nat) {
                        currentValue +=amount;
                        Debug.print("Credited Amount: ");
                        Debug.print(debug_show(currentValue)); 
                    };

                Query Function: (query functions are read only.)
                    public query func checkBalance(): async Nat {
                        return currentValue;
                    }
        
        -Orthogonal Persistance:
            -ICP - Internet Computer Protocol.
            -Orthogonal Persistance means previous data is saved. 
            -using stable keyword.
                normal/ flexible
                    var num1: Nat = 200;
                    num1 += 200;
                    //400
                
                stable
                    stable var num1: Nat = 200;

        -Frontend part:
            -html/css
            -js file:
                import {dbank} from '../../declarations/dbank';
                // dbank

                window.addEventListener('load', async function(){
                // console.log("Finished Loading");
                Update();
                })

                document.querySelector('form').addEventListener('submit', async function(event){
                event.preventDefault();
                // console.log('Submitted');
                const button = event.target.querySelector('#submit-btn');

                const inputAmount =  parseFloat(document.getElementById('input-amount').value);
                const withdrawalAmount =  parseFloat(document.getElementById('withdrawal-amount').value);

                button.setAttribute('disabled', true);

                if(document.getElementById('input-amount').value.length != 0)
                    await dbank.topUP(inputAmount);
                
                if(document.getElementById('withdrawal-amount').value.length != 0)
                    await dbank.WithDraw(withdrawalAmount);
                

                await dbank.compound();

                Update();

                document.getElementById('input-amount').value = '';
                document.getElementById('withdrawal-amount').value = '';

                button.removeAttribute("disabled");

                });

                async function Update(){

                // var currentAmount = await dbank.checkBalance();
                // currentAmount = currentAmount.toFixed(2);
                // document.getElementById('value').innerText = currentAmount;

                var currentAmount = await (await dbank.checkBalance()).toFixed(2);
                // currentAmount = currentAmount.toFixed(2);
                document.getElementById('value').innerText = currentAmount;
                }

        -Cycles & ICP Tokens:
            NNS - Network Nervous System

            -hosting on live
                DFX Principle Id
                    dfx identity get-principal
                
                dfx identity --network ic get-wallet

------------------------------------------------------------------------------------------------------------------------------------
Section 41: ICP Live BlockChain
    -Deploy static site on IC:
            -store all files inside one folder named assets
            -all images, files are on same level not one inside other.

            -create dfx.json file & inside that write,
                {
                    'canister':{
                        'website':{
                            'type': 'assets',
                            'source': ['assets']
                        }
                    }
                }       
            
            -to deploy on live
                dfx deploy --network ic

            -to get the id:
                dfx canister --network ic id <canister_name>
                dfx canister --network ic id website
                    //copy the output of above command then at the end add '.raw.ic0.app'
------------------------------------------------------------------------------------------------------------------------------------
Section 42:Building DApps With React Frontend:
    -installing node of 16th version:
        npm i node@16       
------------------------------------------------------------------------------------------------------------------------------------
Section 43: Create your own Crypto Token
    -
------------------------------------------------------------------------------------------------------------------------------------
Section 44: Minting NFT
    
------------------------------------------------------------------------------------------------------------------------------------
Section 45: QNA
    -Start making Projects.
    -Start making Simple project first.
    -start making portfolio / unpaid freelancing.
    
    -Stay consistent.
    -min 1hr/day. programming.
========================================================END=============================================================================
========================================================FSD Completed===================================================================