coursera 1st course
	react is powerful frontend JS library not a framework
	Developed by facebook & released for the world in 2013
	better than angular
	react popular coz the shadow & virtual dom

    -Angular & NEXT.JS are framework, React is library.

coursera 2nd course
	REACT:
		react is open-source javaScript library Developed by facebook
		best for handling presentation like webpages
		not be confused with react native
		native is used for developing mobile apps
		virtula DOM facilitates fast, partial screen update
		DOM = document object model
		JSX = javaScript xml (javaScript Syntax Extension)
		npm - node package manager
		npx - node package execute

	To create a new react app:
		-npx create-react-app <app-name>
		-cd <app-name>
		-npm start
	
    -When you download new project without node_modules then before running 'npm start'
        download npm dependencies
        -npm install or
        -npm i
        -npm start


	-JSX is almost a html little change require for being javaScript
	-React return only 1 tag.
		or if you want to return multiple tag use below Syntax
		<>
			<h1></h1>
			<div></div>
		</>
	
	* here we can declare the variable with 'var' keyword or 'let' keyword
	* within single (' ') or double quote (" ") 
	* with semicolon or without semicolon fine.
	* while using it use {} put variable name inside it.
	eg.
		let name ='Vivek';
		var name2 = "Nikate"

	* The whatever code is written within app.js file inside return ( );
	  is the code which is compiled by babel in proper javaScript
	  Babel compiles JSX down to React.createElement().
	
	*React is in 2 parts 
		Function based Components	
		Class based Components
		
		-Function based is currently used MOSTLY cause feels it's easy than class Components
----------------------------------------------------------------------------------------------------
Props:- properties
		-create components folder. create components file with first letter capital.
		& import it wherever you needed.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=--=--=-=-=-=-=-=-=-=-=--=--=---=-=-=-=---=-=-=-=-=-=-=-=-=-=-
YouTube 5 Project Video:-

Webapps:-
    it is a thing which don't have multiple pages all things are done on single page only 
    so it is called as SPA (single page application).
Website:-
    it is site having multiple pages called web-site
    
-Component is the thing in react that we can use multiple time
-Component name must start with Capital letter. Capitalize tag is the Component.    
    <h1></h1> is tag
    <H1></H1> this is react Component
-Component types:
    1)Class based
    2)Functional based  (function name's first letter Capital)
-Make Component of type 
.jsx - javaScript Syntax Extension
.js - javaScript

-Component should return only one thing (anything) but must one thing it should return.
 wrap all thing in '<> </>' this. or <Fragment></Fragment>
    1).
       <React.Fragment>
            //content
       </React.Fragment>

    2).
        <>
            //Content
        </>
    
    3). 
        <Fragment>
            //Content
        </Fragment>

-normal function
    export default function functionName(){
        return(
            
        );
    }

    function MyHeading(){
    return <h1>Heading</h1>
    }
    export default MyHeading;

-Arrow function
 const SecondHeading = () =>{
   return(
     <h1>2nd Heading</h1>    
   );
 }

-Arrow Function in react:
    Syntax:

        const function_name = () => //put whatever you want here.
    eg.
        const MainHeading = () => <h1>Hey, this is Main Heading</h1>

-While exporting default function:
    export default MainHeading;

-While exporting more than one function:
    export {MainHead2,MainHead3,MainHead4}; 

-which importing one/default function:
    -you can name it anything. while importing, 
    but at the time of multiple function exporting you need to call them in {} braces &
    while importing same name as you exported or you can change name using 'as' keyword

    import name from 'path';
    eg.
        import Heading from './folder/file';

-multiple importing:
    same as exported.
    import{Function1, Function2 as FUN2, Function3} from 'path';

    use them as 
    <function1 />     

    use function2 as FUN2
    <FUN2 />

-default exported function you can import with any name but
 the function which are not default imported,
 the function which are exported mannually like below
    export {Function1, Function2, Function3} need to import them with same name 
    or change their name using as keyword, like
    export {Function1 as Fun1, Function2 as Fun2, Function3}

    using like  
        <Fun1 />
        <Fun2 />
        <Function3 />

or write export on same line to export that function
eg.
    export const MainHead2 = () => <h2>Main heading 2.</h2>

importing default & mannual function same time.
    import defaultOne, { Function1 as Fun1, Function2 as Fun2, Function3} from "path";
    eg.
        import React, { Fragment } from "react";
-----------------------------------------------------------------------------------------------------

Heading.jsx file:
    const MainHeading = () => <h1>Hey, this is Main Heading</h1>

    export const MainHead2 = () => <h2>Main heading 2.</h2>

    const MainHead3 = () => <h2>Main heading 3.</h2>

    const MainHead4 = () => <h2>Main heading 4.</h2>

    export default MainHeading;
    export {MainHead3, MainHead4}; 
 ----------------------------------------------------------------------------------------------
App.js file:
    import React, { Fragment } from "react";
    import MeraHeading from './Components/Heading';

    import {MainHead2 as SecondHead ,MainHead3,MainHead4} from './Components/Heading';

    // var a = 200;
    // normal function
    // export default function functionName(){}

    // function MyHeading(){
    //   return <h1>Heading</h1>
    // }

    //arrow function
    // const SecondHeading = () =>{
    //   return(
    //     <h1>2nd Heading</h1>    
    //   );
    // }

    //using arrow function we can reduce the code to one line also.
    // const ThirdHeading = () => <h2>Third Heading</h2>

    function App(){
    return(
        // <Fragment>
        //   <div>
        //     <MyHeading />
        //     <SecondHeading />
        //     <ThirdHeading />
        //     <h1>Welcome page {a} </h1>
        //     <p>This is paragraph</p>
        //   </div>
        //   <div>
        //     <h1>Second Div</h1> 
        //   </div>
        // </Fragment> 
        <>
        <MeraHeading/>
        <SecondHead />
        <MainHead3 />
        <MainHead4 />
        </>
    );
    }
    export default App;
-----------------------------------------------------------------------------------------------------
Sending props:

    Heading.jsx
    const MainHeading = (props) => <h1>Hey {props.name}, This is {props.place}</h1>

    export const MainHead2 = (props) => <h2>{props.name}, Software Engineer at {props.compName}</h2>

    const MainHead3 = (props) => {
        var a = props.Lname;
        return(
        <h2>hey, {a}</h2>
        );
    }

    App.jsx
    import { MainHead2 as MH, MainHead3 as MH3 } from './Components/Heading'
    <Title name='Vivek' place='Bengluru'/>
    <MH name='Vivek Nikate' compName='Capgemini'/>
    <MH3 Lname='Surname'/>
--------------------------------------------------------------------------------------------------------
De-Structuring:

    const MainHead3 = (props) => {
        var name = props.Lname;
        const obj = {
            a:1,
            b:2,
            c:3,
        };
        
        const {a,b,c} = obj;            //this is de-structuring of object

        return(
        <>
            <h2>hey, {props.name}</h2>
            <h3>{obj.a}</h3>                 {/* Before de-structuring we have to use like this */}
            <h4>{b}</h4>                     {/* After de-structuring we can use like this direcly name of varible*/}
            <h4>{c}</h4>                     {/* After de-structuring we can use like this */}
        </>
        );
    }
--------------------------------------------------------------------------------------------------------
Sending props using De-structure:
    -props names are caseSensitive.
    -you can pass string or number in {} braces as below with single quote.
    -we Destructured data of props here instead of using props.varName

    -inline styling in React:
        <h1 style={{color:'green'}}>Salary is {Salary}</h1>

    -multiple styles: comma(,)
        <h1 style={{color:'red',FontFamily:'cursive'}}>Enter your text here..!</h1>

    -You can pass props like
        name = 'name here'  or 
        name = {'name here'} or
        Salary='999,999,999' or
        Salary={'999,999,999'} or

        Salary= {999999999}         //if number must enclose in curly braces
    -=-=-=-=-=-=--=-=--=-=-=-=-=---=---=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-
        export const Destructure = ({name,Age,place,Salary}) =>{
        return(
            <>
                <h1>Destructuring</h1>
                <h2>Hey, Hello <br /> My name is {name}, I'm from {place} & my age is {Age} </h2>
                <h1 style={{color:'green'}}>Salary is {Salary}</h1>
            </>
            );
        }

    import { Destructure as DSR } from './Components/Heading'
    <DSR name='Vivek' Age='23' Salary={'99,999,999,999'} place={'Solapur, Maharashtra'} />
--------------------------------------------------------------------------------------------------------

function to another function data transfer:
    
    Heading.jsx:

    export const AnotherFun = ({value}) =>{
        return(
        <h2>This is value from another Function: {value}</h2>
        );

    export const Destructure = ({name,Age,place,Salary,price}) =>{
        return(
            <>
                <h1>Destructuring</h1>
                <h2>Hey, Hello <br /> My name is {name}, I'm from {place} & my age is {Age} </h2>
                <h1 style={{color:'green'}}>Salary is {Salary}</h1>
                <AnotherFun value={price}/>
            </>
        );
    }
    
    App.jsx:

    import { Destructure as DSR } from './Components/Heading'
    <DSR name='Vivek' Age={23} Salary='999,999,999' place={'Solapur, Maharashtra'} price={101}/>
--------------------------------------------------------------------------------------------------------
Setting default value to props:
    Function:
    
    export const Destructure = ({name= 'This is default name' ,Age ='faultAge 999' ,place='FaultPlace Alien' ,Salary ='Fault ∞' ,price='NaN'}) =>{
    return(
        <>
            <h1>Destructuring</h1>
            <h2>Hey, Hello <br /> My name is {name}, I'm from {place} & my age is {Age} </h2>
            <h1 style={{color:'green'}}>Salary is {Salary}</h1>
            <AnotherFun value={price}/>
        </>
    );

    Calling:
        <DSR />
        <DSR name='Amazing' />              //here just the name will get settled. rest all have the default value. 
}
--------------------------------------------------------------------------------------------------------
#Styling:
    -Recommended,
        always make a new folder to style the components.
        put the link of style-sheet in 
            public-> index.html or
            src -> App.js       or
            src -> index.js
    eg.
        import Header from './Components/Heading';          
                --This is while importing particular function from file.

        import './styles/App.css'
                --This is while importing that complete file.
            
        import '../styles/Header.css';
                --This is while importing that complete file, but out of current folder 
                  there is another folder called style inside that Header.css file, include that.   
                    that's why used '..' there.
        
        -That style gets applied which is defineded at last.

    box-shadow: 5px 5px 5px 8px rgba(0, 0, 0, 0.5);
                x-offset | y-offset | blur-radius | Spread-radius | color
    
    background-color: pink !important;
        -in usual case what happens when we style any thing in css the last style will
         get applied to that element, & if we used this !important (extra parameter)
         then by forcefully we are telling to the browswer that apply this style to that 
         particular element.
         Like here the 'background-color:pink' will get applied forcefully
--------------------------------------------------------------------------------------------------------
    <a href="#">Home</a>
    <a href="/">Blog</a>
What's difference between # or / in link:
    -if we put # then just stay on same page or go to that particular id's content
     like    
         <a href="#demo">Home</a>
    -if / is there then it is the root of all files.

text-decoration: none; 
    -use this property to remove text decoration like underLine strikethrough, wavy etc.
    -use this property to remove text decoration like underLine strikethrough, wavy etc. 

    strikethrough in css 
        text-decoration: line-through;

        text-decoration-line: overline underline;
        text-decoration-style: wavy;

text-decoration-style value:
            solid	Default value. The line will display as a single line	
            double	The line will display as a double line	
            dotted	The line will display as a dotted line	
            dashed	The line will display as a dashed line	
            wavy    The line will display as a wavy line
    ----------------------------------------
    font:400 3rem cursive;
        boldness size style

--------------------------------------------------------------------------------------------------------
React-router-DOM:-
    -packages used for routing in React.(navigating from one page to other without reloading the page)
    -React won't reload the page, it just change the Component of that page. 

    -npm i react-router-dom
    or to download the specific version of that package use 
        -npm i package_name@version
    "npm i react-router-dom@6.4.2"

    
    import {  BrowserRouter as Router, Routes, Route } from "react-router-dom";
        use this to import router related functionality.
--------------------------------------------------------------------------------------------------------
Import default related errors:
    -suppose if you made function like this ..
        
        export const About = () => {
            return 
                <h1>
                    About us page.
                </h1>
            }
    
    -export is on same line of function name, this is OK but at last mention the default export to 
     to export that function like ↓
        export const About = () => {
            return 
                <h1>
                    About us page.
                </h1>
            }  
        export default About;
        
        -function_name & export default should be same.
--------------------------------------------------------------------------------------------------------
#Routing for page not found:
    
      <Route path='*' element={<h1 style={{color:'red'}} >Page not Found 404</h1>} />

      here, * - for all path except the mentioned.
            shows the content that page not found
            keep this React tag where you want in <Routes>, if page not found then this will be shown
--------------------------------------------------------------------------------------------------------
Accessing id by url: Dynamic URL. in app.js file
      <Route path='/product/:id' element={<ProductName />} />
      <Route path='/article/:ArtNum' element={<ArticlePage />} />
      
      normal URL: in app.js file
        <Route path='/product/id' element={<ProductName />} />

    URL to header.js file: file used to just display the content on screen in that file use this links
        
        <Link to="/PRODUCT/id">Products</Link>          //for Dynamic purpose is same link as that of normal
        <Link to="/blog">Blog</Link>                    //when we put colon then before parameter then it become the Dynamic.
        <Link to="/contact">Contact</Link>
        <Link to="/about">About</Link>
        <Link to="/ARTICLE/art">Article</Link>

    To display that ID or its content use "useParams" a HOOK.
    HOOK should be defined inside the components/function only.
--------------------------------------------------------------------------------------------------------
When you clicked to the link it reloads the site.
    so use this import
        import { Link } from 'react-router-dom';
            -replace anchor tag (<a></a>) with Link
            -& 'href' attribute with 'to'
    
    eg.
        <a href="/">Home</a>
        <a href="/PRODUCT/id">Products</a>
        <a href="/blog">Blog</a>
        <a href="/contact">Contact</a>
        <a href="/about">About</a>
        <a href="/ARTICLE/art">Article</a>
    ->
        <Link to="/">Home</Link>
        <Link to="/PRODUCT/id">Products</Link>
        <Link to="/blog">Blog</Link>
        <Link to="/contact">Contact</Link>
        <Link to="/about">About</Link>
        <Link to="/ARTICLE/art">Article</Link>
    
    -this will won't reload now.
--------------------------------------------------------------------------------------------------------
-To display all content of array till end.
           const Home = () =>{
            const arr = [1,2,3,4,5,6,7,8,9,10];
                return(
                    <>
                        <h1>Home Page</h1>
                        <h3>
                            {
                                arr.map(i=>(
                                    <Products value={i}/>
                                ))
                            }
                        </h3>
                    </>
                );
            }
            export default Home;
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Project-1:
    Project explanation..
    -npx create-react-app .         //to create app in current folder
    -npm i react-router-dom         //dependencies

    //installing multiple dependencies same time 
    -npm i react-router-dom react-icons sass            //3 files downloaded

    //npm i or npm install are same.
    -3 Folder created.
        -styles     //for styling
        -components //different pages
        -assets     //required stuff here.

    SASS    -Syntactically Awesome Style Sheets
             Sass is a CSS pre-processor.
             Sass reduces repetition of CSS and therefore saves time.  
             Sass is a preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets.  
        -2 ways to to write
        -2 extension also
            1).scss
            2).sass

            1).scss syntax:-
                p{
                    background-color: red;
                    height:100vh        // viewport height
                }
                --------------------------------
                p{
                    a{
                        color: red;
                    }
                }

            2).sass syntax:-    nearly similar syntax to python (indentation)
                p
                    background-color:red
                -----------------------------
                p
                    a
                        color:red
            ----------------------------------------
    -Search good Google-Font.
    ------------------------------------------------
    -you can put {} braces or not, enclose in single or double quote no problem
          <Link to={"/"}>Home</Link>
          <Link to={"/contact"}>Contact</Link>
          <Link to='/#brand'>Brands</Link>
          <Link to='/#about'>About</Link>
          <Link to={'/service'}>Services</Link>
--------------------------------------------------------------------------------------------------------
Project files:-
    Study complete project throughly (line by line). Understand every line.
    Study->
        Project-one 
            -assets
            -components
            -style      (check this scss files for refering styles)
    
    importing sass/scss file
        @import './colors.scss';        //in the same folder
        @import "./colors.scss";

        @import 'colors';               //in the same folder
    
    Note:-
        position: fixed;        //fixed = absolute + sticky
                                absolute - get out of the flow, means won't take space
                                fixed -  stick to the particular position.

        position: sticky        //sticky = stick to position + it'll take space also to show
                                            his presence                        
    
    -To get scroll to the particular section of page where ID is.
    download this package for react 
        -npm i react-router-hash-link

    -downloading the specific version of package
        -npm i package_name@version             //here i is for install
        -npm i react-router-hash-link@2.4.2
    
        Link tag used to go another page of Website, & HashLink used within page to scroll down 
        to the particular section of page in 
        
            <HashLink to={"/#"}>Home</HashLink>
            <Link to={"/contact"}>Contact</Link>
            <HashLink to='/#brand'>Brands</HashLink>
            <HashLink to='/#about'>About</HashLink>
            <Link to={'/service'}>Services</Link>
        
    
        for normal html we use anchor tag 
            <a href='/#brand'>Brands</a>
            -this will get to that specific section of page.
        
        footer{

            >div{
                    //this is the div which is child of footer
                    //will get the this styling
                    //all other div inside this div won't get this styling.

                    //ie. direct child of footer
            }
        }

        -npm i react-responsive-carousel

        -npm i -g vercel        //first downlaod CLI
            to deploy projec to web.
        
        -vercel login
        -then deploy your project with name
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------